/*
Deployment script for HPB_Logistics

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;
SET NUMERIC_ROUNDABORT OFF;
GO
:setvar DatabaseName "HPB_Logistics"
:setvar DefaultFilePrefix "HPB_Logistics"
:setvar DefaultDataPath "F:\MSSQL\Data\"
:setvar DefaultLogPath "E:\SQLLogs\"
GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END
GO
USE [$(DatabaseName)];
GO
PRINT N'Altering [meta].[CurrentTitleStockInventory]...';
GO
ALTER TABLE [meta].[CurrentTitleStockInventory]
    ADD [NV_Reserved_Quantity]     INT  NULL,
        [NV_Backorder_Quantity]    INT  NULL,
        [NV_OnHand_Quantity]       INT  NULL,
        [NV_OnOrder_Quantity]      INT  NULL,
        [NV_Expected_Receive_Date] DATE NULL,
        [CI_Reserved_Quantity]     INT  NULL,
        [CI_Backorder_Quantity]    INT  NULL,
        [CI_OnHand_Quantity]       INT  NULL,
        [CI_OnOrder_Quantity]      INT  NULL,
        [CI_Expected_Receive_Date] DATE NULL,
        [DD_Reserved_Quantity]     INT  NULL,
        [DD_Backorder_Quantity]    INT  NULL,
        [DD_OnHand_Quantity]       INT  NULL,
        [DD_OnOrder_Quantity]      INT  NULL,
        [DD_Expected_Receive_Date] DATE NULL,
        [EE_Reserved_Quantity]     INT  NULL,
        [EE_Backorder_Quantity]    INT  NULL,
        [EE_OnHand_Quantity]       INT  NULL,
        [EE_OnOrder_Quantity]      INT  NULL,
        [EE_Expected_Receive_Date] DATE NULL;
GO
PRINT N'Starting rebuilding table [meta].[IngramContentDCQuantities]...';
GO
BEGIN TRANSACTION;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SET XACT_ABORT ON;
CREATE TABLE [meta].[tmp_ms_xx_IngramContentDCQuantities] (
    [ISBNUPC]      VARCHAR (30) NOT NULL,
    [LVTN_OnHand]  INT          NULL,
    [LVTN_Reserve] INT          NULL,
    [LVTN_Flag]    CHAR (1)     NULL,
    [ATPA_OnHand]  INT          NULL,
    [ATPA_Reserve] NCHAR (10)   NULL,
    [ATPA_Flag]    CHAR (1)     NULL,
    [CBPA_OnHand]  INT          NULL,
    [CBPA_Reserve] INT          NULL,
    [CBPA_Flag]    CHAR (1)     NULL,
    [FWIN_OnHand]  INT          NULL,
    [FWIN_Reserve] INT          NULL,
    [FWIN_Flag]    CHAR (1)     NULL,
    [RBOR_OnHand]  INT          NULL,
    [RBOR_Reserve] NCHAR (10)   NULL,
    [RBOR_Flag]    CHAR (1)     NULL,
    [FOCA_OnHand]  INT          NULL,
    [FOCA_Reserve] INT          NULL,
    [FOCA_Flag]    CHAR (1)     NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_IngramContentDCQuantities1] PRIMARY KEY CLUSTERED ([ISBNUPC] ASC) WITH (FILLFACTOR = 98)
);
IF EXISTS (SELECT TOP 1 1 
           FROM   [meta].[IngramContentDCQuantities])
    BEGIN
        INSERT INTO [meta].[tmp_ms_xx_IngramContentDCQuantities] ([ISBNUPC], [LVTN_OnHand], [LVTN_Flag], [ATPA_OnHand], [ATPA_Flag], [CBPA_OnHand], [CBPA_Flag], [FWIN_OnHand], [FWIN_Flag], [RBOR_OnHand], [RBOR_Flag], [FOCA_OnHand], [FOCA_Flag])
        SELECT   [ISBNUPC],
                 [LVTN_OnHand],
                 [LVTN_Flag],
                 [ATPA_OnHand],
                 [ATPA_Flag],
                 [CBPA_OnHand],
                 [CBPA_Flag],
                 [FWIN_OnHand],
                 [FWIN_Flag],
                 [RBOR_OnHand],
                 [RBOR_Flag],
                 [FOCA_OnHand],
                 [FOCA_Flag]
        FROM     [meta].[IngramContentDCQuantities]
        ORDER BY [ISBNUPC] ASC;
    END
DROP TABLE [meta].[IngramContentDCQuantities];
EXECUTE sp_rename N'[meta].[tmp_ms_xx_IngramContentDCQuantities]', N'IngramContentDCQuantities';
EXECUTE sp_rename N'[meta].[tmp_ms_xx_constraint_PK_IngramContentDCQuantities1]', N'PK_IngramContentDCQuantities', N'OBJECT';
COMMIT TRANSACTION;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
GO
PRINT N'Altering [staging].[CurrentTitleStockInventory]...';
GO
ALTER TABLE [staging].[CurrentTitleStockInventory]
    ADD [NV_Reserved_Quantity]     INT  NULL,
        [NV_Backorder_Quantity]    INT  NULL,
        [NV_OnHand_Quantity]       INT  NULL,
        [NV_OnOrder_Quantity]      INT  NULL,
        [NV_Expected_Receive_Date] DATE NULL,
        [CI_Reserved_Quantity]     INT  NULL,
        [CI_Backorder_Quantity]    INT  NULL,
        [CI_OnHand_Quantity]       INT  NULL,
        [CI_OnOrder_Quantity]      INT  NULL,
        [CI_Expected_Receive_Date] DATE NULL,
        [DD_Reserved_Quantity]     INT  NULL,
        [DD_Backorder_Quantity]    INT  NULL,
        [DD_OnHand_Quantity]       INT  NULL,
        [DD_OnOrder_Quantity]      INT  NULL,
        [DD_Expected_Receive_Date] DATE NULL,
        [EE_Reserved_Quantity]     INT  NULL,
        [EE_Backorder_Quantity]    INT  NULL,
        [EE_OnHand_Quantity]       INT  NULL,
        [EE_OnOrder_Quantity]      INT  NULL,
        [EE_Expected_Receive_Date] DATE NULL;
GO
PRINT N'Refreshing [meta].[vwTitlesActive_CurrentStock]...';
GO
EXECUTE sp_refreshsqlmodule N'[meta].[vwTitlesActive_CurrentStock]';
GO
PRINT N'Altering [dbo].[vwVX_IC_AvailQty]...';
GO
ALTER VIEW [dbo].[vwVX_IC_AvailQty]
AS
	SELECT i_n.ISBNUPC	, 'N' AS [Warehouse], ISNULL(i_n.LVTN_OnHand,0) AS [QtyOnHand], ISNULL(i_n.LVTN_Reserve,0) AS [Reserve], ISNULL(i_n.LVTN_OnHand,0) + ISNULL(i_n.LVTN_Reserve,0) AS [TotalQty]
	FROM meta.IngramContentDCQuantities i_n
	WHERE i_n.LVTN_Flag = 'Y' 
		AND i_n.LVTN_OnHand > 0
	UNION
	SELECT i_b.ISBNUPC	, 'B' AS [Warehouse], ISNULL(i_b.ATPA_OnHand,0) AS [QtyOnHand], ISNULL(i_b.ATPA_Reserve,0) AS [Reserve], ISNULL(i_b.ATPA_OnHand,0) + ISNULL(i_b.ATPA_Reserve,0) AS [TotalQty]
	FROM meta.IngramContentDCQuantities i_b
	WHERE i_b.ATPA_Flag = 'Y' 
		AND i_b.ATPA_OnHand > 0
	UNION
	SELECT i_c.ISBNUPC	, 'C' AS [Warehouse], ISNULL(i_c.CBPA_OnHand,0) AS [QtyOnHand], ISNULL(i_c.CBPA_Reserve,0) AS [Reserve], ISNULL(i_c.CBPA_OnHand,0) + ISNULL(i_c.CBPA_Reserve,0) AS [TotalQty]
	FROM meta.IngramContentDCQuantities i_c
	WHERE i_c.CBPA_Flag = 'Y'
		AND i_c.CBPA_OnHand > 0
	UNION
	SELECT i_d.ISBNUPC	, 'D' AS [Warehouse], ISNULL(i_d.FWIN_OnHand,0) AS [QtyOnHand], ISNULL(i_d.FWIN_Reserve,0) AS [Reserve], ISNULL(i_d.FWIN_OnHand,0) + ISNULL(i_d.FWIN_Reserve,0) AS [TotalQty]
	FROM meta.IngramContentDCQuantities i_d
	WHERE i_d.FWIN_Flag = 'Y' 
		AND i_d.FWIN_OnHand > 0
	UNION
	SELECT i_e.ISBNUPC	, 'E' AS [Warehouse], ISNULL(i_e.RBOR_OnHand,0) AS [QtyOnHand], ISNULL(i_e.RBOR_Reserve,0) AS [Reserve], ISNULL(i_e.RBOR_OnHand,0) + ISNULL(i_e.RBOR_Reserve,0) AS [TotalQty]
	FROM meta.IngramContentDCQuantities i_e
	WHERE i_e.RBOR_Flag = 'Y'
		AND i_e.RBOR_OnHand > 0
	UNION
	SELECT i_j.ISBNUPC	, 'J' AS [Warehouse], ISNULL(i_j.FOCA_OnHand,0) AS [QtyOnHand], ISNULL(i_j.FOCA_Reserve,0) AS [Reserve], ISNULL(i_j.FOCA_OnHand,0) + ISNULL(i_j.FOCA_Reserve,0) AS [TotalQty]
	FROM Meta.IngramContentDCQuantities i_j
	WHERE i_j.FOCA_Flag = 'Y' 
		AND i_j.FOCA_OnHand > 0
GO
PRINT N'Altering [meta].[uspInventoryUpdate]...';
GO
-- =============================================
-- Author:		Andrew B
-- Create date: 2019-08
-- Description:	Update Inventory
-- =============================================
ALTER PROCEDURE [meta].[uspInventoryUpdate]
AS
BEGIN
	DECLARE	 @return INT = -1
			,@completed VARCHAR(2500) = ''

	BEGIN TRANSACTION upsert_records
	BEGIN TRY
		IF ((SELECT COUNT(1) 
			FROM staging.CurrentTitleStockInventory srce
				INNER JOIN meta.CurrentTitleStockInventory trgt
					ON srce.EAN = trgt.EAN
						AND srce.Last_Modified_Date <> trgt.Last_Modified_Date) > 0)
			BEGIN
				UPDATE  trgt
					SET	 [GTIN14]									= srce.[GTIN14]
						,[ISBN13]									= srce.[ISBN13]
						,[UPC]										= srce.[UPC]
						,[ISBN10]									= srce.[ISBN10]
						,[LVTN_On_Hand_Quantity]					= srce.[LVTN_On_Hand_Quantity]
						,[RBOR_On_Hand_Quantity]					= srce.[RBOR_On_Hand_Quantity]
						,[FWIN_On_Hand_Quantity]					= srce.[FWIN_On_Hand_Quantity]
						,[CBPA_On_Hand_Quantity]					= srce.[CBPA_On_Hand_Quantity]
						,[ATPA_On_Hand_Quantity]					= srce.[ATPA_On_Hand_Quantity]
						,[FOCA_On_Hand_Quantity]					= srce.[FOCA_On_Hand_Quantity]
						,[FFOH_On_Hand_Quantity]					= srce.[FFOH_On_Hand_Quantity]
						,[WADC_On_Hand_Quantity]					= srce.[WADC_On_Hand_Quantity]
						,[LVTN_On_Order_Quantity]					= srce.[LVTN_On_Order_Quantity]
						,[RBOR_On_Order_Quantity]					= srce.[RBOR_On_Order_Quantity]
						,[FWIN_On_Order_Quantity]					= srce.[FWIN_On_Order_Quantity]
						,[CBPA_On_Order_Quantity]					= srce.[CBPA_On_Order_Quantity]
						,[ATPA_On_Order_Quantity]					= srce.[ATPA_On_Order_Quantity]
						,[FOCA_On_Order_Quantity]					= srce.[FOCA_On_Order_Quantity]
						,[FFOH_On_Order_Quantity]					= srce.[FFOH_On_Order_Quantity]
						,[WADC_On_Order_Quantity]					= srce.[WADC_On_Order_Quantity]
						,[Total_Quantity_On_Hand]					= srce.[Total_Quantity_On_Hand]
						,[Price]									= srce.[Price]
						,[Discount_Level_Original_Value]			= srce.[Discount_Level_Original_Value]
						,[CDF_Discount_Pct]							= srce.[CDF_Discount_Pct]
						,[Bulk_Discount_Pct]						= srce.[Bulk_Discount_Pct]
						,[Publisher_Status_Code]					= srce.[Publisher_Status_Code]
						,[Publisher_Status_Description]				= srce.[Publisher_Status_Description]
						,[LVTN_Stock_Flag]							= srce.[LVTN_Stock_Flag]
						,[RBOR_Stock_Flag]							= srce.[RBOR_Stock_Flag]
						,[FWIN_Stock_Flag]							= srce.[FWIN_Stock_Flag]
						,[CBPA_Stock_Flag]							= srce.[CBPA_Stock_Flag]
						,[ATPA_Stock_Flag]							= srce.[ATPA_Stock_Flag]
						,[FOCA_Stock_Flag]							= srce.[FOCA_Stock_Flag]
						,[FFOH_Stock_Flag]							= srce.[FFOH_Stock_Flag]
						,[WADC_Stock_Flag]							= srce.[WADC_Stock_Flag]
						,[Publication_Date]							= srce.[Publication_Date]
						,[On_Sale_Date]								= srce.[On_Sale_Date]
						,[Returnable_Indicator]						= srce.[Returnable_Indicator]
						,[Return_Date]								= srce.[Return_Date]
						,[Backorder_Only_Indicator]					= srce.[Backorder_Only_Indicator]
						,[Media_Mail_Indicator]						= srce.[Media_Mail_Indicator]
						,[Ingram_Product_Type]						= srce.[Ingram_Product_Type]
						,[Ingram_Product_Type_Description]			= srce.[Ingram_Product_Type_Description]
						,[Imprintable_Indicator]					= srce.[Imprintable_Indicator]
						,[Indexable_Indicator]						= srce.[Indexable_Indicator]
						,[Weight]									= srce.[Weight]
						,[Ingram_Publisher_Number]					= srce.[Ingram_Publisher_Number]
						,[Ingram_Publisher_Number_Description]		= srce.[Ingram_Publisher_Number_Description]
						,[Restricted_Code]							= srce.[Restricted_Code]
						,[Restricted_Code_Description]				= srce.[Restricted_Code_Description]
						,[Discount_Category_Code]					= srce.[Discount_Category_Code]
						,[Product_Availability_Code]				= srce.[Product_Availability_Code]
						,[Product_Availability_Code_Description]	= srce.[Product_Availability_Code_Description]
						,[Ingram_Title_Code]						= srce.[Ingram_Title_Code]
						,[Product_Classification_Type]				= srce.[Product_Classification_Type]
						,[Last_Modified_Date]						= srce.[Last_Modified_Date]		
						,[NV_Backorder_Quantity]					= srce.[NV_Backorder_Quantity]
						,[NV_Expected_Receive_Date]					= srce.[NV_Expected_Receive_Date]
						,[NV_OnHand_Quantity]						= srce.[NV_OnHand_Quantity]
						,[NV_OnOrder_Quantity]						= srce.[NV_OnOrder_Quantity]
						,[NV_Reserved_Quantity]						= srce.[NV_Reserved_Quantity]
						,[CI_Backorder_Quantity]					= srce.[CI_Backorder_Quantity]
						,[CI_Expected_Receive_Date]					= srce.[CI_Expected_Receive_Date]
						,[CI_OnHand_Quantity]						= srce.[CI_OnHand_Quantity]
						,[CI_OnOrder_Quantity]						= srce.[CI_OnOrder_Quantity]
						,[CI_Reserved_Quantity]						= srce.[CI_Reserved_Quantity]
						,[DD_Backorder_Quantity]					= srce.[DD_Backorder_Quantity]
						,[DD_Expected_Receive_Date]					= srce.[DD_Expected_Receive_Date]
						,[DD_OnHand_Quantity]						= srce.[DD_OnHand_Quantity]
						,[DD_OnOrder_Quantity]						= srce.[DD_OnOrder_Quantity]
						,[DD_Reserved_Quantity]						= srce.[DD_Reserved_Quantity]
						,[EE_Backorder_Quantity]					= srce.[EE_Backorder_Quantity]
						,[EE_Expected_Receive_Date]					= srce.[EE_Expected_Receive_Date]
						,[EE_OnHand_Quantity]						= srce.[EE_OnHand_Quantity]
						,[EE_OnOrder_Quantity]						= srce.[EE_OnOrder_Quantity]
						,[EE_Reserved_Quantity]						= srce.[EE_Reserved_Quantity]
				FROM staging.CurrentTitleStockInventory srce
					INNER JOIN meta.CurrentTitleStockInventory trgt
						ON srce.EAN = trgt.EAN
							AND srce.Last_Modified_Date <> trgt.Last_Modified_Date

				SET @completed = @completed + ';UPD_INV=YES'
			END
		ELSE
			SET @completed = @completed + ';UPD_INV=NRC'

		IF ((SELECT COUNT(1) 
			FROM staging.CurrentTitleStockInventory srce
				LEFT JOIN meta.CurrentTitleStockInventory trgt
							ON srce.EAN = trgt.EAN
			WHERE trgt.EAN IS NULL) > 0)

			BEGIN
				INSERT INTO meta.CurrentTitleStockInventory ([GTIN14], [EAN], [ISBN13], [UPC], [ISBN10], [LVTN_On_Hand_Quantity], [RBOR_On_Hand_Quantity], [FWIN_On_Hand_Quantity]
															,[CBPA_On_Hand_Quantity], [ATPA_On_Hand_Quantity], [FOCA_On_Hand_Quantity], [FFOH_On_Hand_Quantity], [WADC_On_Hand_Quantity]
															,[LVTN_On_Order_Quantity], [RBOR_On_Order_Quantity], [FWIN_On_Order_Quantity], [CBPA_On_Order_Quantity], [ATPA_On_Order_Quantity]
															,[FOCA_On_Order_Quantity], [FFOH_On_Order_Quantity], [WADC_On_Order_Quantity], [Total_Quantity_On_Hand], [Price]
															,[Discount_Level_Original_Value], [CDF_Discount_Pct], [Bulk_Discount_Pct], [Publisher_Status_Code], [Publisher_Status_Description]
															,[LVTN_Stock_Flag], [RBOR_Stock_Flag], [FWIN_Stock_Flag], [CBPA_Stock_Flag], [ATPA_Stock_Flag], [FOCA_Stock_Flag], [FFOH_Stock_Flag]
															,[WADC_Stock_Flag], [Publication_Date], [On_Sale_Date], [Returnable_Indicator], [Return_Date], [Backorder_Only_Indicator]
															,[Media_Mail_Indicator], [Ingram_Product_Type], [Ingram_Product_Type_Description], [Imprintable_Indicator], [Indexable_Indicator]
															,[Weight], [Ingram_Publisher_Number], [Ingram_Publisher_Number_Description], [Restricted_Code], [Restricted_Code_Description]
															,[Discount_Category_Code], [Product_Availability_Code], [Product_Availability_Code_Description], [Ingram_Title_Code]
															,[Product_Classification_Type], [Last_Modified_Date] ,[CI_Backorder_Quantity],[CI_Expected_Receive_Date],[CI_OnHand_Quantity]
															,[CI_OnOrder_Quantity],[CI_Reserved_Quantity],[DD_Backorder_Quantity],[DD_Expected_Receive_Date],[DD_OnHand_Quantity]
															,[DD_OnOrder_Quantity],[DD_Reserved_Quantity],[EE_Backorder_Quantity],[EE_Expected_Receive_Date],[EE_OnHand_Quantity]
															,[EE_OnOrder_Quantity],[EE_Reserved_Quantity]															
															)
					SELECT	 srce.[GTIN14],srce.[EAN],srce.[ISBN13],srce.[UPC],srce.[ISBN10],srce.[LVTN_On_Hand_Quantity],srce.[RBOR_On_Hand_Quantity],srce.[FWIN_On_Hand_Quantity]
							,srce.[CBPA_On_Hand_Quantity],srce.[ATPA_On_Hand_Quantity],srce.[FOCA_On_Hand_Quantity],srce.[FFOH_On_Hand_Quantity],srce.[WADC_On_Hand_Quantity]
							,srce.[LVTN_On_Order_Quantity],srce.[RBOR_On_Order_Quantity],srce.[FWIN_On_Order_Quantity],srce.[CBPA_On_Order_Quantity],srce.[ATPA_On_Order_Quantity]
							,srce.[FOCA_On_Order_Quantity],srce.[FFOH_On_Order_Quantity],srce.[WADC_On_Order_Quantity],srce.[Total_Quantity_On_Hand],srce.[Price]
							,srce.[Discount_Level_Original_Value],srce.[CDF_Discount_Pct],srce.[Bulk_Discount_Pct],srce.[Publisher_Status_Code],srce.[Publisher_Status_Description]
							,srce.[LVTN_Stock_Flag],srce.[RBOR_Stock_Flag],srce.[FWIN_Stock_Flag],srce.[CBPA_Stock_Flag],srce.[ATPA_Stock_Flag],srce.[FOCA_Stock_Flag],srce.[FFOH_Stock_Flag]
							,srce.[WADC_Stock_Flag],srce.[Publication_Date],srce.[On_Sale_Date],srce.[Returnable_Indicator],srce.[Return_Date],srce.[Backorder_Only_Indicator]
							,srce.[Media_Mail_Indicator],srce.[Ingram_Product_Type],srce.[Ingram_Product_Type_Description],srce.[Imprintable_Indicator],srce.[Indexable_Indicator]
							,srce.[Weight],srce.[Ingram_Publisher_Number],srce.[Ingram_Publisher_Number_Description],srce.[Restricted_Code],srce.[Restricted_Code_Description]
							,srce.[Discount_Category_Code],srce.[Product_Availability_Code],srce.[Product_Availability_Code_Description],srce.[Ingram_Title_Code]
							,srce.[Product_Classification_Type],srce.[Last_Modified_Date],srce.[CI_Backorder_Quantity],srce.[CI_Expected_Receive_Date],srce.[CI_OnHand_Quantity]
							,srce.[CI_OnOrder_Quantity],srce.[CI_Reserved_Quantity],srce.[DD_Backorder_Quantity],srce.[DD_Expected_Receive_Date],srce.[DD_OnHand_Quantity]
							,srce.[DD_OnOrder_Quantity],srce.[DD_Reserved_Quantity],srce.[EE_Backorder_Quantity],srce.[EE_Expected_Receive_Date],srce.[EE_OnHand_Quantity]
							,srce.[EE_OnOrder_Quantity],srce.[EE_Reserved_Quantity]
					FROM staging.CurrentTitleStockInventory srce
						LEFT JOIN meta.CurrentTitleStockInventory trgt
									ON srce.EAN = trgt.EAN
					WHERE trgt.EAN IS NULL

				SET @completed = @completed + ';INS_INV=YES'
			END
		ELSE
			SET @completed = @completed + ';INS_INV=NRC'

		IF @@TRANCOUNT > 0  COMMIT TRANSACTION upsert_records
			SET @return = 1 
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION upsert_records
		SELECT @return = 0, @completed = @completed + ';CATCH_INVOKED=' + CAST(ERROR_NUMBER() AS VARCHAR(20)) + ' ' + ERROR_MESSAGE()
	END CATCH

	SELECT @return AS ReturnValue, @completed AS ItemsCompleted
END
GO
PRINT N'Altering [meta].[uspTitleAndInventoryUpdate]...';
GO
-- =============================================
-- Author:		Andrew B
-- Create date: 2019-08
-- Description:	Update titles and inventory
-- =============================================
ALTER PROCEDURE [meta].[uspTitleAndInventoryUpdate]
AS
BEGIN
	DECLARE @return INT = -1
	DECLARE @completed VARCHAR(2500) = ''

	BEGIN TRANSACTION upsert_records

	BEGIN TRY
		IF((SELECT COUNT(1) FROM staging.IngramContentTitlesActive) > 0)
			BEGIN
				UPDATE  trgt
						SET	 [ISBN_10]									= srce.[ISBN_10]
							,[Ingram_Product_Type_Code]					= srce.[Ingram_Product_Type_Code]
							,[Ingram_Product_Type]						= srce.[Ingram_Product_Type]
							,[Accessory_Code]							= srce.[Accessory_Code]
							,[Product_Classification_Type]				= srce.[Product_Classification_Type]
							,[Product_Form_Code]						= srce.[Product_Form_Code]
							,[Product_Form]								= srce.[Product_Form]
							,[Product_Form_Detail]						= srce.[Product_Form_Detail]
							,[Title]									= srce.[Title]
							,[Edition_Description]						= srce.[Edition_Description]
							,[Contributor_1_Role]						= srce.[Contributor_1_Role]
							,[Contributor_1]							= srce.[Contributor_1]
							,[Contributor_2_Role]						= srce.[Contributor_2_Role]
							,[Contributor_2]							= srce.[Contributor_2]
							,[Contributor_3_Role]						= srce.[Contributor_3_Role]
							,[Contributor_3]							= srce.[Contributor_3]
							,[Publisher]								= srce.[Publisher]
							,[BISAC_Binding_Type]						= srce.[BISAC_Binding_Type]
							,[BISAC_Childrens_Book_Type]				= srce.[BISAC_Childrens_Book_Type]
							,[Ingram_Subject_Code]						= srce.[Ingram_Subject_Code]
							,[BISAC_Subject_Code_1]						= srce.[BISAC_Subject_Code_1]
							,[BISAC_Subject_Heading_Description_1]		= srce.[BISAC_Subject_Heading_Description_1]
							,[BISAC_Subject_Code_2]						= srce.[BISAC_Subject_Code_2]
							,[BISAC_Subject_Heading_Description_2]		= srce.[BISAC_Subject_Heading_Description_2]
							,[BISAC_Subject_Code_3]						= srce.[BISAC_Subject_Code_3]
							,[BISAC_Subject_Heading_Description_3]		= srce.[BISAC_Subject_Heading_Description_3]
							,[Audience_Age_Minimum]						= srce.[Audience_Age_Minimum]
							,[Audience_Age_Maximum]						= srce.[Audience_Age_Maximum]
							,[Audience_Grade_Minimum]					= srce.[Audience_Grade_Minimum]
							,[Audience_Grade_Minimum_Desc]				= srce.[Audience_Grade_Minimum_Desc]
							,[Audience_Grade_Maximum]					= srce.[Audience_Grade_Maximum]
							,[Audience_Grade_Maximum_Desc]				= srce.[Audience_Grade_Maximum_Desc]
							,[Lexile_Reading_Level]						= srce.[Lexile_Reading_Level]
							,[LCCN]										= srce.[LCCN]
							,[Dewey_Decimal_Classification]				= srce.[Dewey_Decimal_Classification]
							,[Library_of_Congress_Subject_Heading_1]	= srce.[Library_of_Congress_Subject_Heading_1]
							,[Library_of_Congress_Subject_Heading_2]	= srce.[Library_of_Congress_Subject_Heading_2]
							,[Number_Pages]								= srce.[Number_Pages]
							,[Playing_Time]								= srce.[Playing_Time]
							,[Number_Of_Items]							= srce.[Weight_In_Pounds]
							,[Weight_In_Pounds]							= srce.[Weight_In_Pounds]
							,[Length_In_Inches]							= srce.[Length_In_Inches]
							,[Width_In_Inches]							= srce.[Width_In_Inches]
							,[Height_In_Inches]							= srce.[Height_In_Inches]
							,[Dump_Display_Flag]						= srce.[Dump_Display_Flag]
							,[Illustration_Flag]						= srce.[Illustration_Flag]
							,[Spring_Arbor_Division_Flag]				= srce.[Spring_Arbor_Division_Flag]
							,[Language]									= srce.[Language]
							,[Spring_Arbor_Product_Type]				= srce.[Spring_Arbor_Product_Type]
							,[Spring_Arbor_Subject_Code_Major]			= srce.[Spring_Arbor_Subject_Code_Major]
							,[Spring_Arbor_Subject_Code_Minor]			= srce.[Spring_Arbor_Subject_Code_Minor]
							,[Publisher_Price]							= srce.[Publisher_Price] 
							,[Publication_Date]							= srce.[Publication_Date]
							,[Title_Last_Updated]						= srce.[Title_Last_Updated]
				FROM staging.IngramContentTitlesActive srce
					INNER JOIN meta.IngramContentTitlesActive trgt
						ON srce.EAN = trgt.EAN
							AND srce.Title_Last_Updated <> trgt.Title_Last_Updated

				SET @completed = @completed + ';UPD_TTL=YES'
	
				INSERT INTO meta.IngramContentTitlesActive ([ISBN_10],[Ingram_Product_Type_Code],[Ingram_Product_Type],[Accessory_Code],[Product_Classification_Type],[Product_Form_Code]
															,[Product_Form],[Product_Form_Detail],[Title],[Edition_Description],[Contributor_1_Role],[Contributor_1],[Contributor_2_Role]
															,[Contributor_2],[Contributor_3_Role],[Contributor_3],[Publisher],[BISAC_Binding_Type],[BISAC_Childrens_Book_Type]
															,[Ingram_Subject_Code],[BISAC_Subject_Code_1],[BISAC_Subject_Heading_Description_1],[BISAC_Subject_Code_2]
															,[BISAC_Subject_Heading_Description_2],[BISAC_Subject_Code_3],[BISAC_Subject_Heading_Description_3],[Audience_Age_Minimum]
															,[Audience_Age_Maximum],[Audience_Grade_Minimum],[Audience_Grade_Minimum_Desc],[Audience_Grade_Maximum],[Audience_Grade_Maximum_Desc]
															,[Lexile_Reading_Level],[LCCN],[Dewey_Decimal_Classification],[Library_of_Congress_Subject_Heading_1]
															,[Library_of_Congress_Subject_Heading_2],[Number_Pages],[Playing_Time],[Number_Of_Items],[Weight_In_Pounds],[Length_In_Inches]
															,[Width_In_Inches],[Height_In_Inches],[Dump_Display_Flag],[Illustration_Flag],[Spring_Arbor_Division_Flag],[Language]
															,[Spring_Arbor_Product_Type],[Spring_Arbor_Subject_Code_Major],[Spring_Arbor_Subject_Code_Minor],[Publisher_Price]
															,[Publication_Date],[Title_Last_Updated]) 
						SELECT	 srce.[ISBN_10],srce.[Ingram_Product_Type_Code],srce.[Ingram_Product_Type],srce.[Accessory_Code],srce.[Product_Classification_Type],srce.[Product_Form_Code]
								,srce.[Product_Form],srce.[Product_Form_Detail],srce.[Title],srce.[Edition_Description],srce.[Contributor_1_Role],srce.[Contributor_1],srce.[Contributor_2_Role]
								,srce.[Contributor_2],srce.[Contributor_3_Role],srce.[Contributor_3],srce.[Publisher],srce.[BISAC_Binding_Type],srce.[BISAC_Childrens_Book_Type]
								,srce.[Ingram_Subject_Code],srce.[BISAC_Subject_Code_1],srce.[BISAC_Subject_Heading_Description_1],srce.[BISAC_Subject_Code_2]
								,srce.[BISAC_Subject_Heading_Description_2],srce.[BISAC_Subject_Code_3],srce.[BISAC_Subject_Heading_Description_3],srce.[Audience_Age_Minimum]
								,srce.[Audience_Age_Maximum],srce.[Audience_Grade_Minimum],srce.[Audience_Grade_Minimum_Desc],srce.[Audience_Grade_Maximum],srce.[Audience_Grade_Maximum_Desc]
								,srce.[Lexile_Reading_Level],srce.[LCCN],srce.[Dewey_Decimal_Classification],srce.[Library_of_Congress_Subject_Heading_1]
								,srce.[Library_of_Congress_Subject_Heading_2],srce.[Number_Pages],srce.[Playing_Time],srce.[Number_Of_Items],srce.[Weight_In_Pounds],srce.[Length_In_Inches]
								,srce.[Width_In_Inches],srce.[Height_In_Inches],srce.[Dump_Display_Flag],srce.[Illustration_Flag],srce.[Spring_Arbor_Division_Flag],srce.[Language]
								,srce.[Spring_Arbor_Product_Type],srce.[Spring_Arbor_Subject_Code_Major],srce.[Spring_Arbor_Subject_Code_Minor],srce.[Publisher_Price]
								,srce.[Publication_Date],srce.[Title_Last_Updated]
						FROM staging.IngramContentTitlesActive srce
							LEFT JOIN meta.IngramContentTitlesActive trgt
								ON srce.ean = trgt.EAN
						WHERE trgt.EAN IS NULL

					SET @completed = @completed + ';INS_TTL=YES'
			END
		ELSE
			BEGIN
				SET @completed = @completed+ ';UPD_TTL=NRC;INST_TTL=NRC'
			END
			
		IF ((SELECT COUNT(1) FROM staging.CurrentTitleStockInventory ) > 0)
			BEGIN
				UPDATE  trgt
					SET	 [GTIN14]									= srce.[GTIN14]
						,[ISBN13]									= srce.[ISBN13]
						,[UPC]										= srce.[UPC]
						,[ISBN10]									= srce.[ISBN10]
						,[LVTN_On_Hand_Quantity]					= srce.[LVTN_On_Hand_Quantity]
						,[RBOR_On_Hand_Quantity]					= srce.[RBOR_On_Hand_Quantity]
						,[FWIN_On_Hand_Quantity]					= srce.[FWIN_On_Hand_Quantity]
						,[CBPA_On_Hand_Quantity]					= srce.[CBPA_On_Hand_Quantity]
						,[ATPA_On_Hand_Quantity]					= srce.[ATPA_On_Hand_Quantity]
						,[FOCA_On_Hand_Quantity]					= srce.[FOCA_On_Hand_Quantity]
						,[FFOH_On_Hand_Quantity]					= srce.[FFOH_On_Hand_Quantity]
						,[WADC_On_Hand_Quantity]					= srce.[WADC_On_Hand_Quantity]
						,[LVTN_On_Order_Quantity]					= srce.[LVTN_On_Order_Quantity]
						,[RBOR_On_Order_Quantity]					= srce.[RBOR_On_Order_Quantity]
						,[FWIN_On_Order_Quantity]					= srce.[FWIN_On_Order_Quantity]
						,[CBPA_On_Order_Quantity]					= srce.[CBPA_On_Order_Quantity]
						,[ATPA_On_Order_Quantity]					= srce.[ATPA_On_Order_Quantity]
						,[FOCA_On_Order_Quantity]					= srce.[FOCA_On_Order_Quantity]
						,[FFOH_On_Order_Quantity]					= srce.[FFOH_On_Order_Quantity]
						,[WADC_On_Order_Quantity]					= srce.[WADC_On_Order_Quantity]
						,[Total_Quantity_On_Hand]					= srce.[Total_Quantity_On_Hand]
						,[Price]									= srce.[Price]
						,[Discount_Level_Original_Value]			= srce.[Discount_Level_Original_Value]
						,[CDF_Discount_Pct]							= srce.[CDF_Discount_Pct]
						,[Bulk_Discount_Pct]						= srce.[Bulk_Discount_Pct]
						,[Publisher_Status_Code]					= srce.[Publisher_Status_Code]
						,[Publisher_Status_Description]				= srce.[Publisher_Status_Description]
						,[LVTN_Stock_Flag]							= srce.[LVTN_Stock_Flag]
						,[RBOR_Stock_Flag]							= srce.[RBOR_Stock_Flag]
						,[FWIN_Stock_Flag]							= srce.[FWIN_Stock_Flag]
						,[CBPA_Stock_Flag]							= srce.[CBPA_Stock_Flag]
						,[ATPA_Stock_Flag]							= srce.[ATPA_Stock_Flag]
						,[FOCA_Stock_Flag]							= srce.[FOCA_Stock_Flag]
						,[FFOH_Stock_Flag]							= srce.[FFOH_Stock_Flag]
						,[WADC_Stock_Flag]							= srce.[WADC_Stock_Flag]
						,[Publication_Date]							= srce.[Publication_Date]
						,[On_Sale_Date]								= srce.[On_Sale_Date]
						,[Returnable_Indicator]						= srce.[Returnable_Indicator]
						,[Return_Date]								= srce.[Return_Date]
						,[Backorder_Only_Indicator]					= srce.[Backorder_Only_Indicator]
						,[Media_Mail_Indicator]						= srce.[Media_Mail_Indicator]
						,[Ingram_Product_Type]						= srce.[Ingram_Product_Type]
						,[Ingram_Product_Type_Description]			= srce.[Ingram_Product_Type_Description]
						,[Imprintable_Indicator]					= srce.[Imprintable_Indicator]
						,[Indexable_Indicator]						= srce.[Indexable_Indicator]
						,[Weight]									= srce.[Weight]
						,[Ingram_Publisher_Number]					= srce.[Ingram_Publisher_Number]
						,[Ingram_Publisher_Number_Description]		= srce.[Ingram_Publisher_Number_Description]
						,[Restricted_Code]							= srce.[Restricted_Code]
						,[Restricted_Code_Description]				= srce.[Restricted_Code_Description]
						,[Discount_Category_Code]					= srce.[Discount_Category_Code]
						,[Product_Availability_Code]				= srce.[Product_Availability_Code]
						,[Product_Availability_Code_Description]	= srce.[Product_Availability_Code_Description]
						,[Ingram_Title_Code]						= srce.[Ingram_Title_Code]
						,[Product_Classification_Type]				= srce.[Product_Classification_Type]
						,[Last_Modified_Date]						= srce.[Last_Modified_Date]		
						,[NV_Reserved_Quantity]						= srce.[NV_Reserved_Quantity]
						,[NV_Backorder_Quantity] 					= srce.[NV_Backorder_Quantity]
						,[NV_OnHand_Quantity] 						= srce.[NV_OnHand_Quantity]
						,[NV_OnOrder_Quantity] 						= srce.[NV_OnOrder_Quantity] 
						,[NV_Expected_Receive_Date] 				= srce.[NV_Expected_Receive_Date] 
						,[CI_Reserved_Quantity] 					= srce.[CI_Reserved_Quantity]
						,[CI_Backorder_Quantity] 					= srce.[CI_Backorder_Quantity]
						,[CI_OnHand_Quantity] 						= srce.[CI_OnHand_Quantity] 
						,[CI_OnOrder_Quantity] 						= srce.[CI_OnOrder_Quantity] 
						,[CI_Expected_Receive_Date] 				= srce.[CI_Expected_Receive_Date] 
						,[DD_Reserved_Quantity] 					= srce.[DD_Reserved_Quantity] 
						,[DD_Backorder_Quantity] 					= srce.[DD_Backorder_Quantity] 
						,[DD_OnHand_Quantity] 						= srce.[DD_OnHand_Quantity] 
						,[DD_OnOrder_Quantity] 						= srce.[DD_OnOrder_Quantity] 
						,[DD_Expected_Receive_Date] 				= srce.[DD_Expected_Receive_Date] 
						,[EE_Reserved_Quantity] 					= srce.[EE_Reserved_Quantity] 
						,[EE_Backorder_Quantity] 					= srce.[EE_Backorder_Quantity] 
						,[EE_OnHand_Quantity] 						= srce.[EE_OnHand_Quantity] 
						,[EE_OnOrder_Quantity] 						= srce.[EE_OnOrder_Quantity] 
						,[EE_Expected_Receive_Date] 				= srce.[EE_Expected_Receive_Date] 
				FROM staging.CurrentTitleStockInventory srce
					INNER JOIN meta.CurrentTitleStockInventory trgt
						ON srce.EAN = trgt.EAN
							AND srce.Last_Modified_Date <> trgt.Last_Modified_Date

				SET @completed = @completed + ';UPD_INV=YES'

			INSERT INTO meta.CurrentTitleStockInventory ([GTIN14],[EAN],[ISBN13],[UPC],[ISBN10],[LVTN_On_Hand_Quantity],[RBOR_On_Hand_Quantity],[FWIN_On_Hand_Quantity],[CBPA_On_Hand_Quantity]
														,[ATPA_On_Hand_Quantity],[FOCA_On_Hand_Quantity],[FFOH_On_Hand_Quantity],[WADC_On_Hand_Quantity],[LVTN_On_Order_Quantity]
														,[RBOR_On_Order_Quantity],[FWIN_On_Order_Quantity],[CBPA_On_Order_Quantity],[ATPA_On_Order_Quantity],[FOCA_On_Order_Quantity]
														,[FFOH_On_Order_Quantity],[WADC_On_Order_Quantity],[Total_Quantity_On_Hand],[Price],[Discount_Level_Original_Value],[CDF_Discount_Pct]
														,[Bulk_Discount_Pct],[Publisher_Status_Code],[Publisher_Status_Description],[LVTN_Stock_Flag],[RBOR_Stock_Flag],[FWIN_Stock_Flag]
														,[CBPA_Stock_Flag],[ATPA_Stock_Flag],[FOCA_Stock_Flag],[FFOH_Stock_Flag],[WADC_Stock_Flag],[Publication_Date],[On_Sale_Date]
														,[Returnable_Indicator],[Return_Date],[Backorder_Only_Indicator],[Media_Mail_Indicator],[Ingram_Product_Type]
														,[Ingram_Product_Type_Description],[Imprintable_Indicator],[Indexable_Indicator],[Weight],[Ingram_Publisher_Number]
														,[Ingram_Publisher_Number_Description],[Restricted_Code],[Restricted_Code_Description],[Discount_Category_Code],[Product_Availability_Code]
														,[Product_Availability_Code_Description],[Ingram_Title_Code],[Product_Classification_Type],[Last_Modified_Date],[NV_Reserved_Quantity]
														,[NV_Backorder_Quantity],[NV_OnHand_Quantity],[NV_OnOrder_Quantity],[NV_Expected_Receive_Date],[CI_Reserved_Quantity]
														,[CI_Backorder_Quantity],[CI_OnHand_Quantity],[CI_OnOrder_Quantity],[CI_Expected_Receive_Date],[DD_Reserved_Quantity]
														,[DD_Backorder_Quantity],[DD_OnHand_Quantity],[DD_OnOrder_Quantity],[DD_Expected_Receive_Date],[EE_Reserved_Quantity]
														,[EE_Backorder_Quantity],[EE_OnHand_Quantity],[EE_OnOrder_Quantity],[EE_Expected_Receive_Date])
				SELECT	 srce.[GTIN14],srce.[EAN],srce.[ISBN13],srce.[UPC],srce.[ISBN10],srce.[LVTN_On_Hand_Quantity],srce.[RBOR_On_Hand_Quantity],srce.[FWIN_On_Hand_Quantity],srce.[CBPA_On_Hand_Quantity]
						,srce.[ATPA_On_Hand_Quantity],srce.[FOCA_On_Hand_Quantity],srce.[FFOH_On_Hand_Quantity],srce.[WADC_On_Hand_Quantity],srce.[LVTN_On_Order_Quantity]						
						,srce.[RBOR_On_Order_Quantity],srce.[FWIN_On_Order_Quantity],srce.[CBPA_On_Order_Quantity],srce.[ATPA_On_Order_Quantity],srce.[FOCA_On_Order_Quantity]
						,srce.[FFOH_On_Order_Quantity],srce.[WADC_On_Order_Quantity],srce.[Total_Quantity_On_Hand],srce.[Price],srce.[Discount_Level_Original_Value],srce.[CDF_Discount_Pct]
						,srce.[Bulk_Discount_Pct],srce.[Publisher_Status_Code],srce.[Publisher_Status_Description],srce.[LVTN_Stock_Flag],srce.[RBOR_Stock_Flag],srce.[FWIN_Stock_Flag]
						,srce.[CBPA_Stock_Flag],srce.[ATPA_Stock_Flag],srce.[FOCA_Stock_Flag],srce.[FFOH_Stock_Flag],srce.[WADC_Stock_Flag],srce.[Publication_Date],srce.[On_Sale_Date]
						,srce.[Returnable_Indicator],srce.[Return_Date],srce.[Backorder_Only_Indicator],srce.[Media_Mail_Indicator],srce.[Ingram_Product_Type]
						,srce.[Ingram_Product_Type_Description],srce.[Imprintable_Indicator],srce.[Indexable_Indicator],srce.[Weight],srce.[Ingram_Publisher_Number]
						,srce.[Ingram_Publisher_Number_Description],srce.[Restricted_Code],srce.[Restricted_Code_Description],srce.[Discount_Category_Code],srce.[Product_Availability_Code]
						,srce.[Product_Availability_Code_Description],srce.[Ingram_Title_Code],srce.[Product_Classification_Type],srce.[Last_Modified_Date],srce.[NV_Reserved_Quantity] 
						,srce.[NV_Backorder_Quantity],srce.[NV_OnHand_Quantity] ,srce.[NV_OnOrder_Quantity],srce.[NV_Expected_Receive_Date] ,srce.[CI_Reserved_Quantity] 
						,srce.[CI_Backorder_Quantity],srce.[CI_OnHand_Quantity] ,srce.[CI_OnOrder_Quantity] ,srce.[CI_Expected_Receive_Date] ,srce.[DD_Reserved_Quantity] 
						,srce.[DD_Backorder_Quantity] ,srce.[DD_OnHand_Quantity] ,srce.[DD_OnOrder_Quantity] ,srce.[DD_Expected_Receive_Date] ,srce.[EE_Reserved_Quantity] 
						,srce.[EE_Backorder_Quantity] ,srce.[EE_OnHand_Quantity] ,srce.[EE_OnOrder_Quantity] ,srce.[EE_Expected_Receive_Date] 
				FROM staging.CurrentTitleStockInventory srce
					LEFT JOIN meta.CurrentTitleStockInventory trgt
								ON srce.EAN = trgt.EAN
				WHERE trgt.EAN IS NULL

				SET @completed = @completed + ';INS_INV=YES'
			END
		ELSE
			BEGIN
				SET @completed = @completed + ';UPD_INV=NRC;INS_INV=NRC'
			END

		IF @@TRANCOUNT > 0  COMMIT TRANSACTION upsert_records
			SET @return = 1 
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION upsert_records
		SELECT @return = 0, @completed = @completed + ';CATCH_INVOKED=' + CAST(ERROR_NUMBER() AS VARCHAR(20)) + ' ' + ERROR_MESSAGE()
	END CATCH

	SELECT @return AS ReturnValue, @completed AS ItemsCompleted
END
GO
PRINT N'Altering [meta].[uspUpdateInventory]...';
GO
-- =============================================
-- Author:		Andrew B
-- Create date: 2019-08
-- Description:	Update inventory 
-- =============================================
ALTER PROCEDURE [meta].[uspUpdateInventory]
AS
BEGIN
	BEGIN TRANSACTION updateinv
	BEGIN TRY
		TRUNCATE TABLE staging.ISBNList
		TRUNCATE TABLE meta.IngramContentDCQuantities

		INSERT INTO staging.ISBNList(ISBNUPC)
			SELECT LTRIM(RTRIM(isbn)) AS ISBNUPC
			FROM STOC_TeaserData
			WHERE ISNULL(ISBN,'') != '' 
				AND ISNUMERIC(isbn) > 0
				AND (CAST(LastReorderDate AS DATE) > CAST(DATEADD(YEAR, -2, GETDATE()) AS DATE) 	
					 OR CAST(InitialStoreDate AS DATE ) > CAST(DATEADD(MONTH, -1, GETDATE()) AS DATE))
			GROUP BY ISBN
			UNION
			SELECT LTRIM(RTRIM(d.vendoritem)) AS ISBNUPC
			FROM VX_Requisition_Hdr h
				INNER JOIN VX_Requisition_Dtl d
					ON h.RequisitionNo = d.RequisitionNo
			WHERE h.[Status] BETWEEN 30 AND 40
			GROUP BY LTRIM(RTRIM(d.VendorItem))
	
		INSERT INTO meta.IngramContentDCQuantities (ISBNUPC
													,LVTN_OnHand,LVTN_Reserve,LVTN_Flag
													,ATPA_OnHand,ATPA_Reserve,ATPA_Flag
													,CBPA_OnHand,CBPA_Reserve,CBPA_Flag
													,FWIN_OnHand,FWIN_Reserve,FWIN_Flag
													,RBOR_OnHand,RBOR_Reserve,RBOR_Flag
													,FOCA_OnHand,FOCA_Reserve,FOCA_Flag)
			SELECT	 LTRIM(RTRIM(ctsi.ean)) AS ISBNUPC
					,ctsi.LVTN_On_Hand_Quantity,ctsi.NV_Reserved_Quantity,ctsi.LVTN_Stock_Flag
					,ctsi.ATPA_On_Hand_Quantity,0						 ,ctsi.ATPA_Stock_Flag -- Ingram does not provide reserve quantity for ATPA
					,ctsi.CBPA_On_Hand_Quantity,ctsi.CI_Reserved_Quantity,ctsi.CBPA_Stock_Flag
					,ctsi.FWIN_On_Hand_Quantity,ctsi.DD_Reserved_Quantity,ctsi.FWIN_Stock_Flag
					,ctsi.RBOR_On_Hand_Quantity,ctsi.EE_Reserved_Quantity,ctsi.RBOR_Stock_Flag
					,ctsi.FOCA_On_Hand_Quantity,0						 ,ctsi.FOCA_Stock_Flag -- Ingram does not provide reserve quantity for FOCA
			FROM meta.CurrentTitleStockInventory ctsi
				INNER JOIN staging.isbnlist ai
					ON LTRIM(RTRIM(ctsi.EAN)) =ai.ISBNUPC
		--union reserve inventory (not accessible yet)

		IF @@TRANCOUNT > 0 COMMIT TRANSACTION updateinv
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION updateinv
	END CATCH
END
GO
PRINT N'Altering [dbo].[GetVXData]...';
GO
-- =============================================
-- Author:		Joey B
-- Create date: 10/24/2012
-- Description:	Returns reorder data to VX application
-- =============================================
ALTER  PROCEDURE [dbo].[GetVXData] 
(
	 @Vendors NVARCHAR(MAX)
	,@SectionCodes NVARCHAR(MAX)
	,@SectionX BIT
	,@Stores NVARCHAR(MAX)
	,@StoreX BIT
	,@Tags NVARCHAR(MAX)
	,@TagX BIT
)
AS
BEGIN
	IF EXISTS ( SELECT 1 FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[TEASER_WORK_TBL]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1 ) DROP TABLE #TEASER_WORK_TBL
	
	DECLARE @ZERO20 VARCHAR(20) = REPLICATE('0',20)

	CREATE TABLE #TEASER_WORK_TBL 
	(
		 [RowID] INT IDENTITY(1, 1)
		,[LocationNo] CHAR(5) NULL
		,[District] VARCHAR(30) NULL
		,[Title] VARCHAR(250) NULL
		,[ItemCode] VARCHAR(20) NULL
		,[PreviousItemCodes] VARCHAR(100)
		,[ReorderItemCode] VARCHAR(10) NULL
		,[VendorID] VARCHAR(20) NULL
		,[SectionCode] VARCHAR(20) NULL
		,[ItemCodeCount] INT NULL
		,[Cost] MONEY NULL
		,[Price] MONEY NULL
		,[InitialStoreDate] DATETIME NULL
		,[InitialQty] INT NULL
		,[QtyOnHand] INT NULL
		,[TotalRcvd] INT NULL
		,[LastReorderDate] DATETIME NULL
		,[Pending] INT NULL
		,[RO_CNT] INT NULL
		,[LastQty] INT NULL
		,[ShipQty] INT NULL
		,[ISBN] VARCHAR(20) NULL
		,[XRefQty] INT NULL
		,[LocationID] CHAR(10) NOT NULL
		,[SuggestedOrderQty] INT NULL
		,[Markdowns] INT NULL
		,[LastSaleDate] DATETIME NULL
		,[TransferredOut] INT NULL
		,[SoldInPeriod] INT NULL
		,[TotalSold] INT NULL
		,[NextOrderDate] DATETIME NULL
		,[CaseQty] INT NULL
		,[RateOfSale] NUMERIC(9, 4) NULL
		,[PercentSold] NUMERIC(9, 2) NULL
		,[SalesRank] VARCHAR(30) NULL
		,[XRefs] VARCHAR(10) NULL
		,[PendXRef] INT NULL
		,[SoldXRef] INT NULL
		,[ISBNSold] INT NULL
		) ON [PRIMARY]
	CREATE CLUSTERED INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ( [LocationID] ,[ItemCode] ,[ReorderItemCode] )
	CREATE NONCLUSTERED INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ( [LocationNo] ,[ItemCode] ,[ReorderItemCode] )
	CREATE NONCLUSTERED INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ( [VendorID] ,[District] ,[LocationNo] )

	-- CREATE TEMP TABLES TO STORE PARAMETER VALUES
	CREATE TABLE #tmpVendors (VendorID VARCHAR(30))
	CREATE TABLE #tmpSections (Sections VARCHAR(30))
	CREATE TABLE #tmpStores (Stores VARCHAR(30))

	INSERT INTO #tmpVendors (VendorID)
		SELECT sID
		FROM dbo.FN_STOC_ListStringToTable(@Vendors)
		GROUP BY sID

	INSERT INTO #tmpSections (Sections)
		SELECT sID
		FROM dbo.FN_STOC_ListStringToTable(@SectionCodes)
		GROUP BY sID

	INSERT INTO #tmpStores (Stores)
		SELECT sID
		FROM dbo.FN_STOC_ListStringToTable(@Stores)
		GROUP BY sID
	
	-- BUILD QUERY STRING BASED ON PARAMETER INPUTS
	DECLARE	 @QueryString 	NVARCHAR(MAX)
			,@WhereClause 	NVARCHAR(MAX)
			,@SectionClause NVARCHAR(MAX)
			,@StoreClause 	NVARCHAR(MAX)
			,@TagClause 	NVARCHAR(MAX)

	SELECT	 @QueryString = 'INSERT INTO #TEASER_WORK_TBL SELECT r.LocationNo,r.District,r.Title,RIGHT(REPLICATE(''0'',20) + r.ItemCode, 20) AS [ItemCode]' + ',r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty' + ',r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty' + ',r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,' + 'r.SalesRank,(CAST(r.XrefQty as varchar(5))+ '' / '' + CAST(r.SIPSQOH as varchar(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) ' + 'FROM dbo.STOC_TeaserData r WITH (NOLOCK) '
			,@WhereClause = ' WHERE r.vendorid in (SELECT VendorID FROM #tmpVendors) '

	IF @SectionX = 0
		SET @SectionClause = ' AND r.sectioncode IN (SELECT Sections FROM #tmpSections) '
	ELSE
		SET @SectionClause = ' AND r.sectioncode NOT IN (SELECT Sections FROM #tmpSections) '

	IF @StoreX = 0
		SET @StoreClause = ' AND r.locationno IN (SELECT Stores FROM #tmpStores) '
	ELSE
		SET @StoreClause = ' AND r.locationno not IN (SELECT Stores FROM #tmpStores) '

	IF @TagX = 0
		SET @TagClause = ''
	ELSE
		SET @TagClause = ''

	SET @QueryString = @QueryString + @WhereClause + @SectionClause + @StoreClause
	EXECUTE sp_executeSQL @QueryString

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT	 twt.RowID
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,twt.Title
			,twt.Cost
			,twt.Price
			,CASE LEN(CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6)) + ' / ' + CAST(SUM(ISNULL(twt.SoldXref, 0)) AS VARCHAR(6)) AS [Sold-SLO]
			,twt.ISBNSold
			,SUM(ISNULL(twt.QtyOnHand, 0)) AS [QtyOnHand]
			,CASE LEN(LEFT(twt.XRefs, CHARINDEX('/', twt.XRefs) - 1))
				WHEN 1 THEN '  ' + twt.XRefs
				WHEN 2 THEN ' ' + twt.XRefs
				ELSE twt.XRefs
			 END AS [XRefs]
			,CASE LEN(CAST(SUM(twt.Pending) AS VARCHAR(10)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(twt.Pending) AS VARCHAR(10)) + ' / ' + CAST(SUM(twt.PendXRef) AS VARCHAR(10)) AS [EnRoute]
			,CASE WHEN EXISTS ( SELECT VendorID FROM [HPB_Prime].[dbo].[VendorMaster] WHERE VendorID = twt.VendorID AND UserChar30 = 'TTBReorder')
				  THEN CASE WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0)) AND SUM(ISNULL(twt.Pending, 0)) = 0 AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
							THEN CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
									  THEN 0
									  ELSE CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) < SUM(ISNULL(waq.[TotalQty], 0))
												THEN SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))
												ELSE SUM(ISNULL(waq.[TotalQty], 0))
										   END
								END
							WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
							THEN 0
							ELSE CASE WHEN SUM(ISNULL(twt.SoldInPeriod, 0)) > SUM(ISNULL(waq.[TotalQty], 0))
									  THEN SUM(ISNULL(waq.[TotalQty],0))
									  ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
							     END
					  END
				ELSE CASE WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0)) AND SUM(ISNULL(twt.Pending, 0)) = 0 AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
						  THEN CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0 
									THEN 0
									ELSE (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0)))
							   END
						  WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
						  THEN 0
						  ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
					 END
			 END AS [SuggestedQty]
			,SUM(ISNULL(srd.requestedQty, 0)) AS [OnOrderQty]
			,ISNULL(SUM(ISNULL(waq.[TotalQty], 0)) - ISNULL(( SELECT ISNULL(OnOrdQty, 0) FROM dbo.FN_VX_GetOnOrdQty_ByWhse(twt.VendorID, twt.ReorderItemCode, twt.LocationNo) ), 0), 0) AS [AvailableQty]
			,SUM(ISNULL(srd.ConfirmedQty, 0)) AS [ConfirmedQty]
			,SUM(ISNULL(srd.CanceledQty, 0)) AS [CanceledQty]
			,SUM(ISNULL(srd.BackOrderQty, 0)) AS [BackOrderQty]
			--,ISNULL(srd.AllowBackOrder,0) as [BackOrder?]
			,CASE WHEN SUM(ISNULL(srd.requestedQty, 0)) > 0
				  THEN ISNULL(srd.AllowBackOrder, 0)
				  ELSE ISNULL(ev.DftBackOrd, 0)
			 END AS [BackOrder?]
			,twt.VendorID
			,twt.SectionCode
			,ISNULL('', '') AS [ItemTags]
			,CASE WHEN l.Active = 'N'
				  THEN 'NA'
				  ELSE ISNULL(src.PONumber, 'NA')
			 END AS [CurrentPONo]
			,ISNULL(src.RequisitionDueDate, '1900/01/01') AS [RequisitionDueDate]
			,CASE WHEN l.Active = 'N'
				  THEN 'NA'
				  ELSE ISNULL(src.RequisitionNo, 'NA')
			 END AS [CurrentReqNo]
			,CASE WHEN l.Active = 'N'
				  THEN 'NA'
				  ELSE ISNULL(ss.statusname, 'NA')
			 END [ReqStatus]
			,CASE 
				WHEN l.Active = 'N'
					THEN 'NA'
				ELSE ISNULL(ss2.statusname, 'NA')
				END AS [LineStatus]
			,ISNULL(src.Locked, 'N') AS [ReqLock]
			,ISNULL(src.LockedBy, '') AS [ReqLockBy]
			,ISNULL(twt.ISBN, '') AS [VendorItem]
			--,CASE WHEN (select count(distinct isbnupc) from vwVX_BT_AvailQty where ISBNUPC = twt.ISBN)= 0 then 'X' else '' end [ValidItem]
			,CASE twt.VendorID 	WHEN 'IDINGRAMDI' 
								THEN CASE 	WHEN (	SELECT COUNT(ISBNUPC)
														FROM vwVX_IC_ValidItem
														WHERE ISBNUPC = twt.ISBN
														GROUP BY ISBNUPC) = 0
											THEN 'X'
											ELSE ''
									END
								ELSE ''
			END AS [ValidItem]
			--WHEN  'IIDB&TDISTR' THEN CASE WHEN (SELECT COUNT(ISBNUPC) FROM vwVX_BT_ValidItem WHERE ISBNUPC = twt.ISBN GROUP BY ISBNUPC)= 0 THEN 'X' ELSE '' END
	FROM #TEASER_WORK_TBL twt
		LEFT JOIN dbo.VX_Reorder_Control src
			ON twt.VendorID = src.VendorID
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN dbo.VX_Requisition_Dtl srd
			ON src.requisitionno = srd.requisitionno
				AND srd.itemcode = RIGHT(@ZERO20 + twt.ReorderItemCode, 20)
		LEFT JOIN dbo.VX_Status ss
			ON src.[Status] = ss.statuscode
		LEFT JOIN VX_Status ss2
			ON ISNULL(srd.[Status], CASE 
						WHEN ISNULL(src.[Status], 100) > 20
							THEN src.[Status]
						ELSE 10
						END) = ss2.statuscode
		LEFT JOIN dbo.vwVX_IC_AvailQty waq
			ON waq.ISBNUPC = twt.ISBN
				AND waq.Warehouse = src.Warehouse
		LEFT JOIN dbo.VX_Locations l
			ON twt.LocationNo = l.LocationNo
		LEFT JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] ev
			ON twt.VendorID = ev.VendorID
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale
			,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate, '1900/01/01') ,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber, 'NA') END
			,CASE WHEN l.Active = 'N'THEN 'NA' ELSE ISNULL(src.RequisitionNo, 'NA') END,CASE WHEN l.Active = 'N'THEN 'NA' ELSE ISNULL(ss.statusname, 'NA') END
			,CASE WHEN l.Active = 'N'THEN 'NA'ELSE ISNULL(ss2.statusname, 'NA') END,ISNULL(src.Locked, 'N'),ISNULL(src.LockedBy, ''),ISNULL(srd.AllowBackOrder, 0),ISNULL(ev.DftBackOrd, 0)
	ORDER BY twt.title,twt.District,twt.LocationNo

	SELECT	 twt.RowID
			,'' AS [LocationNo]
			,'' AS [District]
			,'' AS [ReorderItemCode]
			,'' AS [PreviousItemCodes]
			,'' AS [PercentSold-PY]
			,'' AS [Markdowns-SLO]
			,'' AS [Transfers-SLO]
			,'' AS [ISBN/UPC]
			,'' AS [LastSaleDate]
			,'' AS [Weekly-ROS]
			,'' AS [InitialStoreDate]
			,'' AS [InitialQty]
			,'' AS [LastReorderDate]
			,'' AS [LastQty]
			,'' AS [CaseQty]
			,'' AS [ShipQty-SLO]
			,'' AS [RequisitionDueDate]
			,'' AS [SalesRank]
	FROM #TEASER_WORK_TBL twt
		LEFT JOIN dbo.VX_Reorder_Control src
			ON twt.VendorID = src.VendorID
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN dbo.VX_Requisition_Dtl srd
			ON src.requisitionno = srd.requisitionno
				AND srd.itemcode = RIGHT(@ZERO20 + twt.ReorderItemCode, 20)
		LEFT JOIN dbo.VX_Status ss
			ON src.[Status] = ss.statuscode
		LEFT JOIN dbo.vwVX_IC_AvailQty waq
			ON waq.ISBNUPC = twt.ISBN
				AND waq.Warehouse = src.Warehouse
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale
			,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate, '1900/01/01'),ISNULL(src.RequisitionNo, 'NA'),ISNULL(ss.statusname, 'NA'),ISNULL(src.Locked, 'N'),ISNULL(src.LockedBy, '')
	ORDER BY twt.title,twt.District,twt.LocationNo

	-- CLEAN UP	
	DROP TABLE #TEASER_WORK_TBL
	DROP TABLE #tmpVendors
	DROP TABLE #tmpSections
	DROP TABLE #tmpStores
END
GO
PRINT N'Altering [dbo].[GetVXPendingApprovals]...';
GO
-- =============================================
-- Author:		Joey B
-- CREATE date: 10/29/2012
-- Description:	Returns pending approval order data to VX application
-- =============================================
ALTER  PROCEDURE [dbo].[GetVXPendingApprovals] 
(
	 @Vendors NVARCHAR(MAX)
	,@SectionCodes NVARCHAR(MAX)
	,@SectionX BIT
	,@Stores NVARCHAR(MAX)
	,@StoreX BIT
	,@Tags NVARCHAR(MAX)
	,@TagX BIT
)
AS
BEGIN
	DECLARE @ZERO20 VARCHAR(20) = REPLICATE('0',20)

	IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[TEASER_WORK_TBL]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) DROP TABLE #TEASER_WORK_TBL

	CREATE TABLE #TEASER_WORK_TBL 
	(
		 [RowID] INT IDENTITY(1, 1)
		,[LocationNo] [char](5) NULL
		,[District] VARCHAR(30) NULL
		,[Title] VARCHAR(250) NULL
		,[ItemCode] VARCHAR(20) NULL
		,[PreviousItemCodes] VARCHAR(100)
		,[ReorderItemCode] VARCHAR(10) NULL
		,[VendorID] VARCHAR(20) NULL
		,[SectionCode] VARCHAR(20) NULL
		,[ItemCodeCount] INT NULL
		,[Cost] MONEY NULL
		,[Price] MONEY NULL
		,[InitialStoreDate] DATETIME NULL
		,[InitialQty] INT NULL
		,[QtyOnHand] INT NULL
		,[TotalRcvd] INT NULL
		,[LastReorderDate] DATETIME NULL
		,[Pending] INT NULL
		,[RO_CNT] INT NULL
		,[LastQty] INT NULL
		,[ShipQty] INT NULL
		,[ISBN] VARCHAR(20) NULL
		,[XRefQty] INT NULL
		,[LocationID] [char](10) NOT NULL
		,[SuggestedOrderQty] INT NULL
		,[Markdowns] INT NULL
		,[LastSaleDate] DATETIME NULL
		,[TransferredOut] INT NULL
		,[SoldInPeriod] INT NULL
		,[TotalSold] INT NULL
		,[NextOrderDate] DATETIME NULL
		,[CaseQty] INT NULL
		,[RateOfSale] [numeric](9, 4) NULL
		,[PercentSold] [numeric](9, 2) NULL
		,[SalesRank] VARCHAR(30) NULL
		,[XRefs] VARCHAR(10) NULL
		,[PendXRef] INT NULL
		,[SoldXRef] INT NULL
		,[ISBNSold] INT NULL
		) ON [PRIMARY]
	CREATE CLUSTERED INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID],[ItemCode],[ReorderItemCode])
	CREATE NONCLUSTERED INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo],[ItemCode],[ReorderItemCode])
	CREATE NONCLUSTERED INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID],[District],[LocationNo])

	-- DECLARE @Vendors NVARCHAR(MAX),@Stores NVARCHAR(MAX)
	-- DECLARE @StoreX int = 0
	-- SET @Vendors =  'IDHARPERDI'--'IDTEXASBOO, IDTXBMARKD, IDTXBKAUDI, IDTXBKSOFT, IDTXBKSTAP' --'IDCROWNPOI, IDCROWNB&C'
	-- SET @Stores = '00001,00002'
	
	-- Create temp tables to store parameter values
	CREATE TABLE #tmpVendors (VendorID VARCHAR(30))
	CREATE TABLE #tmpStores (Stores VARCHAR(30))

	INSERT INTO #tmpVendors (VendorID)
		SELECT DISTINCT sID AS VendorID
		FROM dbo.FN_STOC_ListStringToTable(@Vendors)

	INSERT INTO #tmpStores (Stores)
		SELECT DISTINCT sID AS Stores
		FROM dbo.FN_STOC_ListStringToTable(@Stores)

	
	-- BUILD QUERY STRING BASED ON PARAMETER INPUTS
	DECLARE	 @QueryString NVARCHAR(MAX)
			,@WhereClause NVARCHAR(MAX)
			,@StoreClause NVARCHAR(MAX)

	SET @QueryString = 'INSERT INTO #TEASER_WORK_TBL SELECT r.LocationNo,r.District,r.Title,RIGHT(''00000000000000000000'' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank,(CAST(r.XrefQty AS VARCHAR(5))+ '' / '' + CAST(r.SIPSQOH AS VARCHAR(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) FROM dbo.STOC_TeaserData r with (nolock) '
	SET @WhereClause = ' WHERE r.vendorid IN (SELECT distinct VendorID FROM #tmpVendors) '

	IF @StoreX = 0
		SET @StoreClause = ' AND r.locationno IN (SELECT distinct Stores FROM #tmpStores) '
	ELSE
		SET @StoreClause = ' AND r.locationno NOT IN (SELECT distinct Stores FROM #tmpStores) '

	SET @QueryString = @QueryString + @WhereClause + @StoreClause
	
	-- SELECT @QUERYSTRING 
	EXECUTE sp_executeSQL @QueryString

	-- SELECT * FROM #TEASER_WORK_TBL
	DECLARE @QueryString2 NVARCHAR(MAX)

	SET @QueryString2 = 'INSERT into #TEASER_WORK_TBL ' 
					+   'SELECT sh.LocationNo,l.DistrictCode,pm.Title,pm.ItemCode,'''' AS [PreviousItemCodes],RIGHT(sd.ItemCode,8) AS [ReorderItemCode] ' + ',CASE WHEN ISNULL(pm.PurchaseFromVendorID,'''')='''' THEN pm.VendorID ELSE pm.PurchaseFromVendorID END AS [VendorID],pm.SectionCode ' + ',1 AS [ItemCodeCount],pm.Cost,pm.Price, '''' AS [InitialStoreDate],0 AS [InitialQty],0 AS [QtyOnHand],0 AS [TotalRcvd] ' + ','''' AS [LastReorderDate],0 AS [Pending],0 AS [RO_CNT],0 AS [LastQty],0 AS [ShipQty],pm.ISBN,0 AS [XRefQty],l.LocationID ' + ',0 AS [SuggestedOrderQty], 0 AS [markdowns],'''' AS [LastSaleDate],0 AS [TransferredOut],0 AS [SoldInPeriod],0 AS [TotalSold] ' + ','''' AS [NextOrderDate],pmd.UnitsPerCase AS [CaseQty],0 AS [RateOfSale],0 AS [PercentSold],''NA / NA / NA / NA'' AS [SalesRank] ' + ',''0 / 0'' AS [XRefs],0 AS [PendXRef],0 AS [SoldXRef],0 AS [ISBNSold] ' 
					+   'FROM VX_Reorder_Control src WITH(NOLOCK) ' 
					+   'INNER JOIN VX_Requisition_Dtl sd WITH (NOLOCK) ON src.RequisitionNo=sd.RequisitionNo ' + 'INNER JOIN VX_Requisition_Hdr sh WITH(NOLOCK) ON sd.RequisitionNo=sh.RequisitionNo ' + 'INNER JOIN [HPB_Prime].[dbo].[Locations] l with(nolock) ON l.LocationNo=src.StoreNo ' + 'INNER JOIN [HPB_Prime].[dbo].[ProductMaster] pm with(nolock) ON pm.ItemCode=sd.ItemCode ' + 'INNER JOIN [HPB_Prime].[dbo].[ProductMasterDist] pmd with(nolock) ON pmd.ItemCode=pm.ItemCode ' + 'WHERE sh.Status BETWEEN 20 AND 60 AND sd.requestedqty > 0 ' + 'AND sd.ItemCode NOT IN (SELECT RIGHT(REPLICATE(''0'',20) + ReorderItemCode, 20) FROM #TEASER_WORK_TBL) ' + 'AND sh.VendorID IN (SELECT VendorID FROM #tmpVendors) ' + REPLACE(@StoreClause, 'r.', 'sh.')

	EXECUTE sp_executeSQL @QueryString2

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT	 twt.RowID
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,twt.Title
			,twt.Cost
			,twt.Price
			,CASE LEN(CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6))) 
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6)) + ' / ' + CAST(SUM(ISNULL(twt.SoldXref, 0)) AS VARCHAR(6)) AS [Sold-SLO]
			,twt.ISBNSold
			,SUM(ISNULL(twt.QtyOnHand, 0)) AS [QtyOnHand]
			,CASE LEN(LEFT(twt.XRefs, CHARINDEX('/', twt.XRefs) - 1)) 
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE  ''
			 END + twt.XRefs AS [XRefs]
			,CASE LEN(CAST(SUM(twt.Pending) AS VARCHAR(10)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(twt.Pending) AS VARCHAR(10)) + ' / ' + CAST(SUM(twt.PendXRef) AS VARCHAR(10)) AS [EnRoute]
			,CASE WHEN EXISTS ( SELECT VendorID FROM [HPB_Prime].[dbo].[VendorMaster] WHERE VendorID = twt.VendorID AND UserChar30 = 'TTBReorder' )
				  THEN CASE WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0)) AND SUM(ISNULL(twt.Pending, 0)) = 0 AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
							THEN CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
									  THEN 0
									  ELSE CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) < SUM(ISNULL(waq.[TotalQty], 0))
												THEN SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))
												ELSE SUM(ISNULL(waq.[TotalQty], 0))
										   END
								 END
							WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
							THEN 0
							ELSE CASE WHEN SUM(ISNULL(twt.SoldInPeriod, 0)) > SUM(ISNULL(waq.[TotalQty], 0))
									  THEN SUM(ISNULL(waq.[TotalQty], 0))
									  ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
								  END
					END
				  ELSE CASE WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0)) AND SUM(ISNULL(twt.Pending, 0)) = 0 AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
							THEN CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
									  THEN 0
									  ELSE (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0)))
								  END
							WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
							THEN 0
							ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
						END
				 END AS [SuggestedQty]
				,SUM(ISNULL(srd.requestedQty, 0)) [OnOrderQty]
				,ISNULL(SUM(ISNULL(waq.[TotalQty], 0)) - ISNULL(( SELECT ISNULL(OnOrdQty, 0) FROM dbo.FN_VX_GetOnOrdQty_ByWhse(twt.VendorID, twt.ReorderItemCode, twt.LocationNo) ), 0), 0) AS [AvailableQty]
				,SUM(ISNULL(srd.ConfirmedQty, 0)) [ConfirmedQty]
				,SUM(ISNULL(srd.CanceledQty, 0)) [CanceledQty]
				,SUM(ISNULL(srd.BackOrderQty, 0)) [BackOrderQty]
				--,ISNULL(srd.AllowBackOrder,0) AS [BackOrder?]
				,CASE WHEN SUM(ISNULL(srd.requestedQty, 0)) > 0
					THEN ISNULL(srd.AllowBackOrder, 0)
					ELSE ISNULL(ev.DftBackOrd, 0)
				 END AS [BackOrder?]
				,twt.VendorID
				,twt.SectionCode
				,ISNULL('', '') AS [ItemTags]
				,CASE WHEN l.Active = 'N'
					THEN 'NA'
					ELSE ISNULL(src.PONumber, 'NA')
				 END AS [CurrentPONo]
				,ISNULL(src.RequisitionDueDate, '1900/01/01') [RequisitionDueDate]
				,CASE WHEN l.Active = 'N'
					THEN 'NA'
					ELSE ISNULL(src.RequisitionNo, 'NA')
				 END AS [CurrentReqNo]
				,CASE WHEN l.Active = 'N'
					THEN 'NA'
					ELSE ISNULL(ss.statusname, 'NA')
				 END AS [ReqStatus]
				,CASE 
					WHEN l.Active = 'N'
						THEN 'NA'
						ELSE ISNULL(ss2.statusname, 'NA')
				 END AS [LineStatus]
				,ISNULL(src.Locked, 'N') AS [ReqLock]
				,ISNULL(src.LockedBy, '') AS [ReqLockBy]
				,ISNULL(twt.ISBN, '') AS [VendorItem]
				,'' AS [ValidItem]
	FROM #TEASER_WORK_TBL twt
		INNER JOIN VX_Reorder_Control src
			ON twt.VendorID = src.VendorID
				AND twt.LocationNo = src.StoreNo
		INNER JOIN VX_Requisition_Dtl srd
			ON src.requisitionno = srd.requisitionno
				AND srd.itemcode = RIGHT(@ZERO20 + twt.ReorderItemCode, 20)
		INNER JOIN VX_Status ss
			ON ISNULL(srd.[Status], 10) = ss.statuscode
		LEFT JOIN VX_Status ss2
			ON ISNULL(srd.[Status], CASE WHEN ISNULL(src.STATUS, 100) > 20 THEN src.[Status] ELSE 10 END) = ss2.StatusCode
		LEFT JOIN vwVX_IC_AvailQty waq
			ON waq.[ISBNUPC] = twt.[ISBN]
				AND waq.[Warehouse] = src.[Warehouse]
		LEFT JOIN VX_Locations l
			ON twt.LocationNo = l.LocationNo
		LEFT JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] ev
			ON twt.VendorID = ev.VendorID
	WHERE ss.StatusCode IN (40, 98, 99)
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate
			,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate, '1900/01/01')
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber, 'NA') END,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo, 'NA') END
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname, 'NA') END,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname, 'NA') END
			,ISNULL(src.Locked, 'N'),ISNULL(src.LockedBy, ''),ISNULL(srd.AllowBackOrder, 0),ISNULL(ev.DftBackOrd, 0)
	ORDER BY twt.title,twt.District,twt.LocationNo

	SELECT	 twt.RowID
			,'' AS [LocationNo]
			,'' AS [District]
			,'' AS [ReorderItemCode]
			,'' AS [PreviousItemCodes]
			,'' AS [PercentSold-PY]
			,'' AS [Markdowns-SLO]
			,'' AS [Transfers-SLO]
			,'' AS [ISBN/UPC]
			,'' AS [LastSaleDate]
			,'' AS [Weekly-ROS]
			,'' AS [InitialStoreDate]
			,'' AS [InitialQty]
			,'' AS [LastReorderDate]
			,'' AS [LastQty]
			,'' AS [CaseQty]
			,'' AS [ShipQty-SLO]
			,'' AS [RequisitionDueDate]
			,'' AS [SalesRank]
	FROM #TEASER_WORK_TBL twt
		INNER JOIN VX_Reorder_Control src
			ON twt.VendorID = src.VendorID
				AND twt.LocationNo = src.StoreNo
		INNER JOIN VX_Requisition_Dtl srd
			ON src.RequisitionNo = srd.RequisitionNo
				AND srd.ItemCode = RIGHT(@ZERO20 + twt.ReorderItemCode, 20)
		INNER JOIN VX_Status ss
			ON ISNULL(srd.[Status], 10) = ss.StatusCode
		LEFT JOIN vwVX_IC_AvailQty waq
			ON waq.[ISBNUPC] = twt.[ISBN]
				AND waq.[Warehouse] = src.[Warehouse]
	WHERE ss.StatusCode IN (40, 98, 99)
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate
			,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate, '1900/01/01'),ISNULL(src.RequisitionNo, 'NA'),ISNULL(ss.statusname, 'NA')
			,ISNULL(src.Locked, 'N'),ISNULL(src.LockedBy, '')
	ORDER BY twt.title,twt.District,twt.LocationNo
	
	-- CLEAN UP
	DROP TABLE #TEASER_WORK_TBL
	DROP TABLE #tmpVendors
	DROP TABLE #tmpStores
END
GO
PRINT N'Altering [dbo].[VX_GetVendorItemQty]...';
GO
-- =============================================
-- Author:		Joey B.
-- Create date: 11/2/2012
-- Description:	Get quantities by item/warehouse for vendor
-- =============================================
ALTER PROCEDURE [dbo].[VX_GetVendorItemQty] @vendorID VARCHAR(10)
AS
BEGIN	
	SET NOCOUNT ON; -- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.

	-- TESTING
		--	DECLARE @vendorID varchar(10)
		--	SET @vendorID = 'IDB&TDISTR'
		--------------------------------
		-- GET VENDOR WAREHOUSE QUANTITIES
			-- SELECT * INTO #tmp FROM (SELECT [ISBNUPC],[Warehouse],ISNULL([QtyOnHand],0) AS [QtyOnHand] FROM vwVX_BT_AvailQty WITH(NOLOCK)
			-- WHERE QtyOnHand > 0 AND ISBNUPC IN (SELECT ISBN FROM HPB_Prime..ProductMaster WITH(NOLOCK) WHERE Reorderable = 'Y' AND PurchaseFromVendorID = @vendorID)) s
		-- PIVOT (SUM([QtyOnHand]) FOR Warehouse IN ([COM],[MOM],[SOM],[RNO])) AS Warehouse
		-- ORDER BY [ISBNUPC]

	IF @vendorID = 'IDB&TDISTR'
		BEGIN
			SELECT *
			INTO #tmpbt
			FROM (	SELECT	 ISBNUPC
							,Warehouse
							,ISNULL(QtyOnHand, 0) [QtyOnHand]
					FROM vwVX_BT_AvailQty WITH (NOLOCK)
					WHERE ISBNUPC IN (	SELECT DISTINCT ISBN
										FROM dbo.STOC_TeaserData WITH (NOLOCK)
										WHERE VendorID = @vendorID)
						-- AND QtyOnHand > 0
				) s
			PIVOT(SUM(QtyOnHand) FOR Warehouse IN ([COM], [MOM], [SOM], [REN])) AS Warehouse
			ORDER BY ISBNUPC

			SELECT DISTINCT
				 st.ReorderItemCode [ItemCode]
				,st.Title
				,t.ISBNUPC [ISBN/UPC]
				,ISNULL(t.COM, 0) [COM]
				,ISNULL(t.MOM, 0) [MOM]
				,ISNULL(t.SOM, 0) [SOM]
				,ISNULL(t.REN, 0) [REN]
			FROM #tmpbt t
			INNER JOIN dbo.STOC_TeaserData st WITH (NOLOCK)
				ON t.ISBNUPC = st.ISBN
					AND st.VendorID = @vendorID
			ORDER BY st.Title

			DROP TABLE #tmpbt
		END
	ELSE IF @vendorID IN ('IDINGRAMDI')
		BEGIN
			SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
			SELECT *
			INTO #tmping
			FROM (	SELECT	 icaq.ISBNUPC
							,icaq.Warehouse
							,ISNULL(icaq.[TotalQty], 0) AS [QtyOnHand]
					FROM vwVX_IC_AvailQty icaq
						INNER JOIN dbo.STOC_TeaserData td
							ON icaq.ISBNUPC = td.ISBN
								AND td.VEndorID = @vendorID
					GROUP BY icaq.ISBNUPC, icaq.Warehouse, ISNULL(icaq.[TotalQty],0)
				) s
			PIVOT(SUM(QtyOnHand) FOR Warehouse IN ([N], [B], [C], [D], [E], [J])) AS Warehouse
			ORDER BY ISBNUPC

			SELECT DISTINCT
				 st.ReorderItemCode [ItemCode]
				,st.Title
				,t.ISBNUPC [ISBN/UPC]
				,ISNULL(t.N, 0) AS [LaVerne]
				,ISNULL(t.B, 0) AS [Allentown]
				,ISNULL(t.C, 0) AS [Chambersburg]
				,ISNULL(t.D, 0) AS [FtWayne]
				,ISNULL(t.E, 0) AS [Roseburg]
				,ISNULL(t.J, 0) AS [Fresno]
			FROM #tmping t
			INNER JOIN dbo.STOC_TeaserData st WITH (NOLOCK)
				ON t.ISBNUPC = st.ISBN
					AND st.VendorID = @vendorID
			ORDER BY st.Title

			DROP TABLE #tmping
		END
	ELSE IF @vendorID <> 'IDB&TDISTR'
		BEGIN
			SELECT '' [ItemCode]
				,'' [Title]
				,'' [ISBN/UPC]
				,'' [WHSEQty]
		END
END
GO
PRINT N'Altering [dbo].[GetVXData2019]...';
GO
-- =============================================
-- Author:		Joey B
-- Create date: 10/24/2012
-- Description:	Returns reorder data to VX application
-- =============================================
ALTER  PROCEDURE [dbo].[GetVXData2019] 
(
 	 @Vendors AS dbo.TypeListString25 READONLY
	,@SectionCodes AS dbo.TypeListString250 READONLY
	,@SectionX BIT
	,@Stores AS dbo.TypeListString25 READONLY
	,@StoreX BIT
	,@Tags AS dbo.TypeListString25 READONLY
	,@TagX BIT
)
AS
BEGIN
	DECLARE	 @ZERO20 VARCHAR(20) = REPLICATE('0', 20)
			,@SECCOUNT INT

	IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[TEASER_WORK_TBL]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1 ) DROP TABLE #TEASER_WORK_TBL

	CREATE TABLE #TEASER_WORK_TBL 
	(
		 [RowID] INT IDENTITY(1, 1)
		,[LocationNo] CHAR(5)
		,[District] VARCHAR(30)
		,[Title] VARCHAR(250)
		,[ItemCode] VARCHAR(20)
		,[PreviousItemCodes] VARCHAR(100)
		,[ReorderItemCode] VARCHAR(10)
		,[VendorID] VARCHAR(20)
		,[SectionCode] VARCHAR(20)
		,[ItemCodeCount] INT
		,[Cost] MONEY
		,[Price] MONEY
		,[InitialStoreDate] DATETIME
		,[InitialQty] INT
		,[QtyOnHand] INT
		,[TotalRcvd] INT
		,[LastReorderDate] DATETIME
		,[Pending] INT
		,[RO_CNT] INT
		,[LastQty] INT
		,[ShipQty] INT
		,[ISBN] VARCHAR(20)
		,[XRefQty] INT
		,[LocationID] CHAR(10) NOT NULL
		,[SuggestedOrderQty] INT
		,[Markdowns] INT
		,[LastSaleDate] DATETIME
		,[TransferredOut] INT
		,[SoldInPeriod] INT
		,[TotalSold] INT
		,[NextOrderDate] DATETIME
		,[CaseQty] INT
		,[RateOfSale] NUMERIC(9, 4)
		,[PercentSold] NUMERIC(9, 2) NULL
		,[SalesRank] VARCHAR(30) NULL
		,[XRefs] VARCHAR(10) NULL
		,[PendXRef] INT
		,[SoldXRef] INT
		,[ISBNSold] INT
	)
	CREATE CLUSTERED INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID],[ItemCode],[ReorderItemCode])
	CREATE NONCLUSTERED INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo],[ItemCode],[ReorderItemCode])
	CREATE NONCLUSTERED INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID],[District],[LocationNo])

	SELECT @SECCOUNT = COUNT(1) FROM @SectionCodes

	IF @SECCOUNT > 0
		BEGIN
			IF @StoreX = 0
				BEGIN
					INSERT INTO #TEASER_WORK_TBL (	 LocationNo,District,Title,ItemCode,PreviousItemCodes,ReorderItemCode,VendorID,SectionCode,ItemCodeCount
													,cost,Price,InitialStoreDate,InitialQty,QtyOnHand,TotalRcvd,LastReorderDate,Pending,RO_CNT,LastQty,ShipQty,ISBN,XRefQty,LocationID
													,SuggestedOrderQty,Markdowns,LastSaleDate,TransferredOut,SoldInPeriod,TotalSold,NextOrderDate,CaseQty,RateOfSale,PercentSold,SalesRank
													,xrefs,PendXRef,SoldXRef
													,ISBNSold)
						SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@ZERO20 + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount
								,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID
								,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
								,(CAST(r.XrefQty AS VARCHAR(5)) + ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))) as xrefs,ISNULL(r.PendXref, 0) as PendXref,ISNULL(r.SoldXref, 0) aS SoldXref
								,ISNULL(r.ISBNSold, 0) AS ISBNSold
						FROM dbo.STOC_TeaserData r
							INNER JOIN @Vendors v
								ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
							INNER JOIN @Stores s
								ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
						WHERE CASE 	WHEN @StoreX = 0 AND r.locationNo IN (	SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									WHEN @StoreX = 1 AND r.LocationNo NOT IN ( SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									ELSE 0
							  END = 1
				END
			ELSE IF @StoreX = 1
				BEGIN
					INSERT INTO #TEASER_WORK_TBL (	 LocationNo,District,Title,ItemCode,PreviousItemCodes,ReorderItemCode,VendorID,SectionCode,ItemCodeCount
													,cost,Price,InitialStoreDate,InitialQty,QtyOnHand,TotalRcvd,LastReorderDate,Pending,RO_CNT,LastQty,ShipQty,ISBN,XRefQty,LocationID
													,SuggestedOrderQty,Markdowns,LastSaleDate,TransferredOut,SoldInPeriod,TotalSold,NextOrderDate,CaseQty,RateOfSale,PercentSold,SalesRank
													,xrefs,PendXRef,SoldXRef
													,ISBNSold)
						SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@ZERO20 + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount
								,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID
								,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
								,(CAST(r.XrefQty AS VARCHAR(5)) + ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))) AS Xrefs,ISNULL(r.PendXref, 0) AS PendXref,ISNULL(r.SoldXref, 0) AS SoldXref
								,ISNULL(r.ISBNSold, 0) AS ISBNSold
						FROM dbo.STOC_TeaserData r
							INNER JOIN @Vendors v
								ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
							LEFT JOIN @Stores s
								ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
						WHERE s.Strings IS NULL
							AND CASE  WHEN @StoreX = 0 AND r.locationNo IN ( SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									  WHEN @StoreX = 1 AND r.LocationNo NOT IN ( SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									  ELSE 0
								END = 1
				END
		END
	ELSE IF @SECCOUNT = 0
		IF @StoreX = 0
			BEGIN
				INSERT INTO #TEASER_WORK_TBL (	 LocationNo,District,Title,ItemCode,PreviousItemCodes,ReorderItemCode,VendorID,SectionCode,ItemCodeCount
												,cost,Price,InitialStoreDate,InitialQty,QtyOnHand,TotalRcvd,LastReorderDate,Pending,RO_CNT,LastQty,ShipQty,ISBN,XRefQty,LocationID
												,SuggestedOrderQty,Markdowns,LastSaleDate,TransferredOut,SoldInPeriod,TotalSold,NextOrderDate,CaseQty,RateOfSale,PercentSold,SalesRank
												,xrefs,PendXRef,SoldXRef
												,ISBNSold)
					SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@ZERO20 + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount
							,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID
							,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
							,(CAST(r.XrefQty AS VARCHAR(5)) + ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))) AS xrefs,ISNULL(r.PendXref, 0) AS PendXRef,ISNULL(r.SoldXref, 0) AS SoldXRef
							,ISNULL(r.ISBNSold, 0) AS ISBNSold
					FROM dbo.STOC_TeaserData r
						INNER JOIN @Vendors v
							ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
						INNER JOIN @Stores s
							ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
			END
		ELSE IF @StoreX = 1
			BEGIN
				INSERT INTO #TEASER_WORK_TBL (	 LocationNo,District,Title,ItemCode,PreviousItemCodes,ReorderItemCode,VendorID,SectionCode,ItemCodeCount
												,cost,Price,InitialStoreDate,InitialQty,QtyOnHand,TotalRcvd,LastReorderDate,Pending,RO_CNT,LastQty,ShipQty,ISBN,XRefQty,LocationID
												,SuggestedOrderQty,Markdowns,LastSaleDate,TransferredOut,SoldInPeriod,TotalSold,NextOrderDate,CaseQty,RateOfSale,PercentSold,SalesRank
												,xrefs,PendXRef,SoldXRef
												,ISBNSold)
				SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@ZERO20 + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount
						,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID
						,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
						,(CAST(r.XrefQty AS VARCHAR(5)) + ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))) AS xrefs,ISNULL(r.PendXref, 0) AS PendXRef,ISNULL(r.SoldXref, 0) AS SoldXref
						,ISNULL(r.ISBNSold, 0) AS ISBNSold
				FROM dbo.STOC_TeaserData r
					INNER JOIN @Vendors v
						ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
					LEFT JOIN @Stores s
						ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
				WHERE s.Strings IS NULL
			END 	

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT	 twt.RowID
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,twt.Title
			,twt.Cost
			,twt.Price
			,CASE LEN(CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6))) 
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6)) + ' / ' + CAST(SUM(ISNULL(twt.SoldXref, 0)) AS VARCHAR(6)) AS [Sold-SLO]
			,twt.ISBNSold
			,SUM(ISNULL(twt.QtyOnHand, 0)) AS [QtyOnHand]
			,CASE LEN(LEFT(twt.XRefs, CHARINDEX('/', twt.XRefs) - 1))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + twt.XRefs AS [XRefs]
			,CASE LEN(CAST(SUM(twt.Pending) AS VARCHAR(10)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(twt.Pending) AS VARCHAR(10)) + ' / ' + CAST(SUM(twt.PendXRef) AS VARCHAR(10)) AS [EnRoute]
			,CASE WHEN EXISTS ( SELECT VendorID FROM [HPB_Prime].[dbo].[VendorMaster] WHERE VendorID = twt.VendorID AND UserChar30 = 'TTBReorder' )
				  THEN CASE WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0)) AND SUM(ISNULL(twt.Pending, 0)) = 0 AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
							THEN CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
									  THEN 0
									  ELSE CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) < SUM(ISNULL(waq.[TotalQty], 0))
												THEN SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))
												ELSE SUM(ISNULL(waq.[TotalQty], 0))
										   END
							    END
							WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
							THEN 0
							ELSE CASE WHEN SUM(ISNULL(twt.SoldInPeriod, 0)) > SUM(ISNULL(waq.[TotalQty], 0))
									  THEN SUM(ISNULL(waq.[TotalQty], 0))
								      ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
								 END
				 	  END
				  ELSE CASE WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0)) AND SUM(ISNULL(twt.Pending, 0)) = 0 AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
							THEN CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
									  THEN 0
									  ELSE (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0)))
								 END
							WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
							THEN 0
							ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
						END
			 END AS [SuggestedQty]
			,SUM(ISNULL(srd.requestedQty, 0)) AS [OnOrderQty]
			,ISNULL(SUM(ISNULL(waq.[TotalQty], 0)) - ISNULL((SELECT ISNULL(OnOrdQty,0) FROM dbo.FN_VX_GetOnOrdQty_ByWhse(twt.VendorID,twt.ReorderItemCode,twt.LocationNo) ),0),0) AS [AvailableQty]
			,SUM(ISNULL(srd.ConfirmedQty, 0)) AS [ConfirmedQty]
			,SUM(ISNULL(srd.CanceledQty, 0)) AS [CanceledQty]
			,SUM(ISNULL(srd.BackOrderQty, 0)) AS [BackOrderQty]
			--ISNULL(srd.AllowBackOrder,0) as [BackOrder?]
			,CASE WHEN SUM(ISNULL(srd.requestedQty, 0)) > 0 
				  THEN ISNULL(srd.AllowBackOrder, 0)
				  ELSE ISNULL(ev.DftBackOrd, 0)
			 END AS [BackOrder?]
			,twt.VendorID
			,twt.SectionCode
			,ISNULL('', '') AS [ItemTags]
			,CASE WHEN l.Active = 'N' 
			      THEN 'NA'
				  ELSE ISNULL(src.PONumber, 'NA')
			 END AS [CurrentPONo]
			,ISNULL(src.RequisitionDueDate, '1900/01/01') AS [RequisitionDueDate]
			,CASE WHEN l.Active = 'N' 
				  THEN 'NA'
				  ELSE ISNULL(src.RequisitionNo, 'NA')
			 END AS [CurrentReqNo]
			,CASE WHEN l.Active = 'N'
				  THEN 'NA'
				  ELSE ISNULL(ss.statusname, 'NA')
			 END AS [ReqStatus]
			,CASE WHEN l.Active = 'N'
				  THEN 'NA'
				  ELSE ISNULL(ss2.statusname, 'NA')
			 END AS [LineStatus]
			,ISNULL(src.Locked, 'N') AS [ReqLock]
			,ISNULL(src.LockedBy, '') AS [ReqLockBy]
			,ISNULL(twt.ISBN, '') AS [VendorItem]
			--Case when (select count(distinct isbnupc) from vwVX_BT_AvailQty where ISBNUPC = twt.ISBN)= 0 then 'X' else '' end [ValidItem]
			,CASE WHEN twt.VendorID != 'IDB&TDISTR'
				  THEN ''
				  ELSE CASE WHEN ( SELECT COUNT(DISTINCT isbnupc) FROM vwVX_BT_ValidItem WHERE ISBNUPC = twt.ISBN ) = 0
							THEN 'X'
							ELSE ''
						END
			 END AS [ValidItem]
		FROM #TEASER_WORK_TBL twt
			LEFT JOIN VX_Reorder_Control src
				ON twt.VendorID = src.VendorID
					AND twt.LocationNo = src.StoreNo
			LEFT JOIN VX_Requisition_Dtl srd
				ON src.requisitionno = srd.requisitionno
					AND srd.itemcode = RIGHT(@ZERO20 + twt.ReorderItemCode, 20)
			LEFT JOIN VX_Status ss
				ON src.STATUS = ss.statuscode
			LEFT JOIN VX_Status ss2
				ON ISNULL(srd.STATUS, CASE 
							WHEN ISNULL(src.STATUS, 100) > 20
								THEN src.STATUS
							ELSE 10
							END) = ss2.statuscode
			LEFT JOIN vwVX_IC_AvailQty waq
				ON waq.[ISBNUPC] = twt.[ISBN]
					AND waq.[Warehouse] = src.[Warehouse]	
			LEFT JOIN VX_Locations l
				ON twt.LocationNo = l.LocationNo
			LEFT JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] ev
				ON twt.VendorID = ev.VendorID
		GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale
				,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate, '1900/01/01'),CASE WHEN l.Active = 'N' THEN 'NA'ELSE ISNULL(src.PONumber, 'NA')END
				,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo, 'NA') END,CASE WHEN l.Active = 'N'THEN 'NA'ELSE ISNULL(ss.statusname, 'NA') END 
				,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname, 'NA') END ,ISNULL(src.Locked, 'N'),ISNULL(src.LockedBy, ''),ISNULL(srd.AllowBackOrder, 0),ISNULL(ev.DftBackOrd, 0)
		ORDER BY twt.title,twt.District,twt.LocationNo

	SELECT	 twt.RowID
			,'' AS [LocationNo]
			,'' AS [District]
			,'' AS [ReorderItemCode]
			,'' AS [PreviousItemCodes]
			,'' AS [PercentSold-PY]
			,'' AS [Markdowns-SLO]
			,'' AS [Transfers-SLO]
			,'' AS [ISBN/UPC]
			,'' AS [LastSaleDate]
			,'' AS [Weekly-ROS]
			,'' AS [InitialStoreDate]
			,'' AS [InitialQty]
			,'' AS [LastReorderDate]
			,'' AS [LastQty]
			,'' AS [CaseQty]
			,'' AS [ShipQty-SLO]
			,'' AS [RequisitionDueDate]
			,'' AS [SalesRank]
	FROM #TEASER_WORK_TBL twt 
		LEFT JOIN VX_Reorder_Control src 
			ON twt.VendorID = src.VendorID
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN VX_Requisition_Dtl srd 
			ON src.requisitionno = srd.requisitionno
				AND srd.itemcode = RIGHT(@ZERO20 + twt.ReorderItemCode, 20)
		LEFT JOIN VX_Status ss 
			ON src.STATUS = ss.statuscode
		LEFT JOIN vwVX_IC_AvailQty waq 
			ON waq.[ISBNUPC] = twt.[ISBN]
				AND waq.[Warehouse] = src.[Warehouse]
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate
			,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate, '1900/01/01'),ISNULL(src.RequisitionNo, 'NA'),ISNULL(ss.statusname, 'NA')
			,ISNULL(src.Locked, 'N'),ISNULL(src.LockedBy, '')
	ORDER BY twt.title,twt.District,twt.LocationNo
	
	-- CLEAN UP
	DROP TABLE #TEASER_WORK_TBL
END
GO
PRINT N'Creating Permission...';
GO
GRANT DELETE ON OBJECT::[meta].[IngramContentDCQuantities] TO [AppDXUser] AS [dbo];
GO
PRINT N'Creating Permission...';
GO
GRANT INSERT ON OBJECT::[meta].[IngramContentDCQuantities] TO [AppDXUser] AS [dbo];
GO
PRINT N'Creating Permission...';
GO
GRANT SELECT ON OBJECT::[meta].[IngramContentDCQuantities] TO [AppDXUser] AS [dbo];
GO
PRINT N'Creating Permission...';
GO
GRANT UPDATE ON OBJECT::[meta].[IngramContentDCQuantities] TO [AppDXUser] AS [dbo];
GO
PRINT N'Refreshing [staging].[uspTempInventoryCounts]...';
GO
EXECUTE sp_refreshsqlmodule N'[staging].[uspTempInventoryCounts]';
GO
PRINT N'Refreshing [dbo].[VX_GetItemDetailsGrid]...';
GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VX_GetItemDetailsGrid]';
GO
PRINT N'Refreshing [meta].[uspLastRunModify]...';
GO
EXECUTE sp_refreshsqlmodule N'[meta].[uspLastRunModify]';
GO
PRINT N'Refreshing [meta].[uspTitleAndInventoryTruncate]...';
GO
EXECUTE sp_refreshsqlmodule N'[meta].[uspTitleAndInventoryTruncate]';
GO
PRINT N'Update complete.';
GO