/*
Deployment script for HPB_EDI_STG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar HPB_Logistics "HPB_Logistics"
:setvar HPB_Prime "HPB_Prime"
:setvar DatabaseName "HPB_EDI_STG"
:setvar DefaultFilePrefix "HPB_EDI"
:setvar DefaultDataPath "F:\MSSQL\Data\"
:setvar DefaultLogPath "e:\SQLLogs\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [archiv]...';


GO
CREATE SCHEMA [archiv]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [BLK]...';


GO
CREATE SCHEMA [BLK]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CDF]...';


GO
CREATE SCHEMA [CDF]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [EDI]...';


GO
CREATE SCHEMA [EDI]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [ImportBBV3]...';


GO
CREATE SCHEMA [ImportBBV3]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [importCDFL]...';


GO
CREATE SCHEMA [importCDFL]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Logging]...';


GO
CREATE SCHEMA [Logging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [MetaData]...';


GO
CREATE SCHEMA [MetaData]
    AUTHORIZATION [dbo];


GO

print N'Move Tables from one schema to another'
print N'dbo to archiv'

ALTER SCHEMA archiv TRANSFER dbo.[810_Inv_Dtl]
ALTER SCHEMA archiv TRANSFER dbo.[810_INv_Hdr]
ALTER SCHEMA archiv TRANSFER dbo.[850_PO_Dtl]
ALTER SCHEMA archiv TRANSFER dbo.[850_PO_Hdr]
ALTER SCHEMA archiv TRANSFER dbo.[855_Ack_Dtl]
ALTER SCHEMA archiv TRANSFER dbo.[855_Ack_Hdr]
ALTER SCHEMA archiv TRANSFER dbo.[856_Asn_Dtl]
ALTER SCHEMA archiv TRANSFER dbo.[856_Asn_Hdr]
ALTER SCHEMA archiv TRANSFER dbo.[Vendor_SAN_Codes]
GO


PRINT N'Creating [BLK].[TypeInvoiceHeader]...';


GO
CREATE TYPE [BLK].[TypeInvoiceHeader] AS TABLE (
    [PONumber]          VARCHAR (22)  NULL,
    [InvoiceNo]         VARCHAR (20)  NULL,
    [IssueDate]         DATETIME      NULL,
    [VendorId]          VARCHAR (20)  NULL,
    [ReferenceNo]       VARCHAR (20)  NULL,
    [ShipToLoc]         VARCHAR (5)   NULL,
    [ShipToSAN]         VARCHAR (12)  NULL,
    [BillToLoc]         VARCHAR (5)   NULL,
    [BillToSAN]         VARCHAR (12)  NULL,
    [ShipFromLoc]       VARCHAR (5)   NULL,
    [ShipFromSAN]       VARCHAR (12)  NULL,
    [TotalLines]        INT           NULL,
    [TotalQuantity]     INT           NULL,
    [TotalPayable]      MONEY         NULL,
    [CurrencyCode]      VARCHAR (5)   NULL,
    [InsertDateTime]    DATETIME      NULL,
    [Processed]         BIT           NULL,
    [ProcessedDateTime] DATETIME2 (7) NULL,
    [InvoiceACKSent]    BIT           NULL,
    [InvoiceAckNo]      VARCHAR (10)  NULL,
    [GSNo]              VARCHAR (10)  NULL);


GO
PRINT N'Creating [BLK].[TypePurchaseOrderDetail]...';


GO
CREATE TYPE [BLK].[TypePurchaseOrderDetail] AS TABLE (
    [LineNo]         VARCHAR (10) NULL,
    [Quantity]       INT          NULL,
    [UnitOfMeasure]  CHAR (3)     NULL,
    [UnitPrice]      MONEY        NULL,
    [PriceCode]      VARCHAR (10) NULL,
    [ItemIdCode]     VARCHAR (5)  NULL,
    [ItemIdentifier] VARCHAR (20) NULL,
    [ItemFillTerms]  VARCHAR (30) NULL,
    [XActionCode]    VARCHAR (10) NULL,
    [FillAmount]     VARCHAR (10) NULL,
    [ponumber]       VARCHAR (10) NULL);


GO
PRINT N'Creating [BLK].[TypePurchaseOrderHeader]...';


GO
CREATE TYPE [BLK].[TypePurchaseOrderHeader] AS TABLE (
    [PONumber]          VARCHAR (10) NULL,
    [IssueDate]         DATETIME     NULL,
    [VendorID]          VARCHAR (20) NULL,
    [ShipToLoc]         VARCHAR (5)  NULL,
    [ShipToSAN]         VARCHAR (12) NULL,
    [BillToLoc]         VARCHAR (5)  NULL,
    [BillToSAN]         VARCHAR (12) NULL,
    [ShipFromLoc]       VARCHAR (5)  NULL,
    [ShipFromSAN]       VARCHAR (12) NULL,
    [TotalLines]        INT          NULL,
    [TotalQuantity]     INT          NULL,
    [InsertDateTime]    DATETIME     NULL,
    [Processed]         BIT          NULL,
    [ProcessedDateTime] DATETIME     NULL);


GO
PRINT N'Creating [BLK].[TypeShipmentDetail]...';


GO
CREATE TYPE [BLK].[TypeShipmentDetail] AS TABLE (
    [LineNo]                   VARCHAR (10)   NULL,
    [ItemIdCode]               VARCHAR (5)    NULL,
    [ItemIdentifier]           VARCHAR (20)   NULL,
    [ItemDesc]                 VARCHAR (250)  NULL,
    [QuantityShipped]          INT            NULL,
    [PackageNo]                VARCHAR (30)   NULL,
    [TrackingNo]               VARCHAR (30)   NULL,
    [ReferenceNumber]          VARCHAR (50)   NULL,
    [QuantityPredicted]        SMALLINT       NULL,
    [VendorPriceList]          DECIMAL (7, 2) NULL,
    [VendorPriceNetDiscounted] DECIMAL (7, 2) NULL,
    [ponumber]                 VARCHAR (22)   NULL);


GO
PRINT N'Creating [BLK].[TypeShipmentHeader]...';


GO
CREATE TYPE [BLK].[TypeShipmentHeader] AS TABLE (
    [PONumber]          VARCHAR (22)   NULL,
    [ASNNo]             VARCHAR (20)   NULL,
    [IssueDate]         DATETIME       NULL,
    [VendorID]          VARCHAR (20)   NULL,
    [ReferenceNo]       VARCHAR (20)   NULL,
    [ShipToLoc]         VARCHAR (5)    NULL,
    [ShipToSAN]         VARCHAR (12)   NULL,
    [BillToLoc]         VARCHAR (5)    NULL,
    [BillToSAN]         VARCHAR (12)   NULL,
    [ShipFromLoc]       VARCHAR (5)    NULL,
    [ShipFromSAN]       VARCHAR (12)   NULL,
    [Carrier]           VARCHAR (20)   NULL,
    [TotalLines]        INT            NULL,
    [TotalQuantity]     INT            NULL,
    [CurrencyCode]      CHAR (3)       NULL,
    [InsertDateTime]    DATETIME       NULL,
    [Processed]         BIT            NULL,
    [ProcessedDateTime] DATETIME2 (7)  NULL,
    [ASNACKSent]        BIT            NULL,
    [ASNAckNo]          VARCHAR (10)   NULL,
    [GSNo]              VARCHAR (10)   NULL,
    [PackageWeight]     DECIMAL (9, 2) NULL,
    [NumberOfUnits]     SMALLINT       NULL,
    [ShipmentDate]      DATE           NULL);


GO
PRINT N'Creating [BLK].[TypeAcknowledgeHeader]...';


GO
CREATE TYPE [BLK].[TypeAcknowledgeHeader] AS TABLE (
    [PONumber]          VARCHAR (22)  NULL,
    [IssueDate]         DATETIME      NULL,
    [VendorId]          VARCHAR (20)  NULL,
    [ReferenceNo]       VARCHAR (20)  NULL,
    [ShipToLoc]         VARCHAR (5)   NULL,
    [ShipToSAN]         VARCHAR (12)  NULL,
    [BillToLoc]         VARCHAR (5)   NULL,
    [BillToSAN]         VARCHAR (12)  NULL,
    [ShipFromLoc]       VARCHAR (5)   NULL,
    [ShipFromSAN]       VARCHAR (12)  NULL,
    [TotalLines]        INT           NULL,
    [TotalQuantity]     INT           NULL,
    [CurrencyCode]      VARCHAR (5)   NULL,
    [InsertDateTime]    DATETIME      NULL,
    [Processed]         BIT           NULL,
    [ProcessedDateTime] DATETIME2 (7) NULL,
    [ResponseACKSent]   BIT           NULL,
    [ResponseAckNo]     VARCHAR (10)  NULL,
    [GSNo]              VARCHAR (10)  NULL,
    [VendorMessage]     VARCHAR (500) NULL);


GO
PRINT N'Creating [BLK].[TypeAcknowledgeDetail]...';


GO
CREATE TYPE [BLK].[TypeAcknowledgeDetail] AS TABLE (
    [LineNo]              VARCHAR (10)  NULL,
    [LineStatusCode]      VARCHAR (10)  NULL,
    [ItemStatusCode]      VARCHAR (10)  NULL,
    [UnitOfMeasure]       VARCHAR (10)  NULL,
    [QuantityOrdered]     INT           NULL,
    [QuantityShipped]     INT           NULL,
    [QuantityCancelled]   INT           NULL,
    [QuantityBackordered] INT           NULL,
    [UnitPrice]           MONEY         NULL,
    [PriceCode]           VARCHAR (10)  NULL,
    [CurrencyCode]        VARCHAR (5)   NULL,
    [ItemIdCode]          VARCHAR (5)   NULL,
    [ItemIdentifier]      VARCHAR (20)  NULL,
    [ItemDesc]            VARCHAR (250) NULL,
    [EDIFileID]           INT           NULL,
    [EDILineNumber]       INT           NULL,
    [ReferencNnumber]     VARCHAR (20)  NULL,
    [VendorStatus]        VARCHAR (500) NULL,
    [ponumber]            VARCHAR (22)  NULL);


GO
PRINT N'Creating [BLK].[TypeInvoiceDetail]...';


GO
CREATE TYPE [BLK].[TypeInvoiceDetail] AS TABLE (
    [LineNo]          VARCHAR (10)   NULL,
    [ItemIdCode]      VARCHAR (5)    NULL,
    [ItemIdentifier]  VARCHAR (20)   NULL,
    [ItemDesc]        VARCHAR (250)  NULL,
    [InvoiceQty]      INT            NULL,
    [UnitPrice]       MONEY          NULL,
    [DiscountPrice]   MONEY          NULL,
    [DiscountCode]    VARCHAR (10)   NULL,
    [DiscountPct]     DECIMAL (4, 2) NULL,
    [RetailPrice]     MONEY          NULL,
    [ReferenceNumber] VARCHAR (50)   NULL,
    [ponumber]        VARCHAR (22)   NULL);


GO
PRINT N'Creating [CDF].[TypeShipments]...';


GO
CREATE TYPE [CDF].[TypeShipments] AS TABLE (
    [Id]                       BIGINT         NULL,
    [FulfillmentId]            BIGINT         NULL,
    [DateTimeShipmentRecorded] DATETIME2 (7)  NULL,
    [ShipmentNumber]           VARCHAR (30)   NULL,
    [ShipmentSubtotal]         MONEY          NULL,
    [ShipmentDiscount]         MONEY          NULL,
    [ShipmentTaxSales]         MONEY          NULL,
    [ShipmentFees]             MONEY          NULL,
    [ShipmentFreight]          MONEY          NULL,
    [ShipmentTotal]            MONEY          NULL,
    [DateOrderShipped]         VARCHAR (20)   NULL,
    [CustomerOrderReference]   VARCHAR (30)   NULL,
    [CarrierType]              VARCHAR (30)   NULL,
    [CarrierName]              VARCHAR (50)   NULL,
    [PackageNumberTracking]    VARCHAR (25)   NULL,
    [PackageNumberSecondary]   VARCHAR (25)   NULL,
    [ShipmentPriceList]        MONEY          NULL,
    [ShipmentPriceNet]         MONEY          NULL,
    [PackageWeight]            DECIMAL (9, 2) NULL,
    [ReasonCode]               VARCHAR (10)   NULL,
    [ShipmentISBNorEAN]        VARCHAR (15)   NULL,
    [DateTimeInsertedUTC]      DATETIME2 (7)  NULL,
    [WarehouseCode]            VARCHAR (10)   NULL,
    [OrderNumber]              VARCHAR (50)   NULL,
    [QuantityPredicted]        INT            NULL,
    [QuantitySlashed]          INT            NULL,
    [QuantityShipped]          INT            NULL,
    [QuantityCancelled]        INT            NULL);


GO
PRINT N'Creating [CDF].[TypeOrderFulfillment]...';


GO
CREATE TYPE [CDF].[TypeOrderFulfillment] AS TABLE (
    [Id]                          BIGINT         NULL,
    [OrderId]                     BIGINT         NULL,
    [LastTransactionId]           TINYINT        NULL,
    [VendorId]                    VARCHAR (20)   NOT NULL,
    [SourceApplication]           VARCHAR (20)   NOT NULL,
    [OrderNumber]                 VARCHAR (22)   NOT NULL,
    [QuanityOrdered]              INT            NOT NULL,
    [DateOrderRecorded]           DATETIME2 (7)  NOT NULL,
    [OrderStatusId]               TINYINT        NULL,
    [AllowBackorder]              BIT            DEFAULT ((0)) NULL,
    [AllowDistriubtionSplits]     BIT            DEFAULT ((0)) NULL,
    [OrderProductType]            VARCHAR (5)    NOT NULL,
    [OrderProduct]                VARCHAR (20)   NOT NULL,
    [OrderProductDescription]     VARCHAR (100)  NULL,
    [PromotionCode]               VARCHAR (30)   NULL,
    [GreenLight]                  BIT            DEFAULT ((0)) NOT NULL,
    [VendorOrderType]             VARCHAR (2)    NULL,
    [OrderTaxSales]               DECIMAL (7, 4) NULL,
    [OrderTaxFreight]             DECIMAL (7, 4) NULL,
    [BillToName]                  VARCHAR (35)   NOT NULL,
    [BillToPhone]                 VARCHAR (25)   NOT NULL,
    [BillToAddress]               VARCHAR (105)  NOT NULL,
    [BillToCity]                  VARCHAR (25)   NOT NULL,
    [BillToState]                 VARCHAR (3)    NOT NULL,
    [BillToZip]                   VARCHAR (11)   NOT NULL,
    [BillToCountryCode]           VARCHAR (3)    DEFAULT ('US') NULL,
    [ShipToName]                  VARCHAR (35)   NOT NULL,
    [ShipToPhone]                 VARCHAR (25)   NOT NULL,
    [ShipToAddress]               VARCHAR (105)  NOT NULL,
    [ShipToCity]                  VARCHAR (25)   NOT NULL,
    [ShipToState]                 VARCHAR (25)   NOT NULL,
    [ShipToZip]                   VARCHAR (11)   NOT NULL,
    [ShipToCountryCode]           VARCHAR (3)    DEFAULT ('US') NULL,
    [GiftWrap]                    BIT            DEFAULT ((0)) NULL,
    [GiftWrapFee]                 MONEY          NULL,
    [GiftMessage]                 VARCHAR (255)  NULL,
    [SuppressPrice]               BIT            DEFAULT ((0)) NULL,
    [SpecialDeliveryInstructions] VARCHAR (10)   NULL,
    [MarketingMessage]            VARCHAR (255)  NULL,
    [ImprintBook]                 BIT            DEFAULT ((0)) NULL,
    [ImprintIndexCode]            CHAR (1)       NULL,
    [ImprintText]                 VARCHAR (30)   NULL,
    [ImprintFont]                 CHAR (1)       NULL,
    [ImprintColor]                CHAR (1)       NULL,
    [ImprintPosition]             CHAR (1)       NULL,
    [OrderUnitPrice]              MONEY          NULL,
    [OrderItemTotal]              MONEY          NULL,
    [LineNumber]                  TINYINT        NULL,
    [TransportMethod]             VARCHAR (5)    NULL,
    [DistributionCenterOverride]  CHAR (1)       NULL,
    [ReferenceNumber]             VARCHAR (20)   NULL);


GO
PRINT N'Creating [CDF].[TypeAcknowledgements]...';


GO
CREATE TYPE [CDF].[TypeAcknowledgements] AS TABLE (
    [Id]                                BIGINT        NULL,
    [FulfillmentId]                     BIGINT        NULL,
    [DateAcknowledgementRecorded]       DATE          NULL,
    [AcknowledgementNumber]             VARCHAR (30)  NULL,
    [DatePurchaseOrder]                 DATE          NULL,
    [DateOrderCancellation]             DATE          NULL,
    [AcknowledgementId]                 VARCHAR (30)  NULL,
    [VendorReferenceNumberType]         VARCHAR (10)  NULL,
    [VendorReferenceNumber]             VARCHAR (20)  NULL,
    [TerminalOrderControl]              VARCHAR (20)  NULL,
    [POStatus]                          VARCHAR (10)  NULL,
    [VendorAcknowledgeMessage]          VARCHAR (255) NULL,
    [ModifiedShipToName]                VARCHAR (35)  NULL,
    [ModifiedShipToAddress]             VARCHAR (105) NULL,
    [ModifiedShipToCity]                VARCHAR (25)  NULL,
    [ModifiedShipToState]               VARCHAR (3)   NULL,
    [ModifiedShipToZip]                 VARCHAR (11)  NULL,
    [ModdifiedShipToCountry]            VARCHAR (3)   NULL,
    [AcknowledgementStatusCode]         VARCHAR (2)   NULL,
    [AcknowledgementDistributionCenter] VARCHAR (10)  NULL,
    [DateAvailable]                     VARCHAR (10)  NULL,
    [DistrbutionInventory]              VARCHAR (40)  NULL,
    [Publisher]                         VARCHAR (255) NULL,
    [Title]                             VARCHAR (255) NULL,
    [Author]                            VARCHAR (255) NULL,
    [BindingCode]                       VARCHAR (10)  NULL,
    [QuantityPredicted]                 INT           NULL,
    [PriceNet]                          MONEY         NULL,
    [PriceDiscountedList]               MONEY         NULL,
    [DateTimeInsertedUTC]               DATETIME2 (7) NULL,
    [OrderNumber]                       VARCHAR (50)  NULL);


GO
PRINT N'Creating [CDF].[TypeFulfillment]...';


GO
CREATE TYPE [CDF].[TypeFulfillment] AS TABLE (
    [Id]                    BIGINT        NULL,
    [LastTransactionId]     TINYINT       NULL,
    [VendorId]              VARCHAR (20)  NULL,
    [SourceApplication]     VARCHAR (20)  NULL,
    [OrderNumber]           VARCHAR (22)  NULL,
    [QuantityOrdered]       INT           NULL,
    [QuantityConfirmed]     INT           NULL,
    [QuantityBackordered]   INT           NULL,
    [QuantityCancelled]     INT           NULL,
    [QuantitySlashed]       INT           NULL,
    [QuantityShipped]       INT           NULL,
    [QuantityInvoiced]      INT           NULL,
    [LastModifiedDateUTC]   DATETIME2 (7) NULL,
    [LastModifiedUTCOffset] INT           NULL,
    [RequestedShipMethod]   CHAR (3)      NULL);


GO
PRINT N'Creating [CDF].[TypeInvoices]...';


GO
CREATE TYPE [CDF].[TypeInvoices] AS TABLE (
    [Id]                       BIGINT        NULL,
    [FulfillmentId]            BIGINT        NULL,
    [DateTimeInvoiceRecorded]  DATETIME2 (7) NULL,
    [InvoiceNumber]            VARCHAR (30)  NULL,
    [CurrencyCode]             VARCHAR (3)   NULL,
    [CountryCode]              VARCHAR (2)   NULL,
    [InvoicePriceList]         MONEY         NULL,
    [InvoiceDiscount]          MONEY         NULL,
    [InvoicePriceNet]          MONEY         NULL,
    [InvoicePriceShipping]     MONEY         NULL,
    [InvoicePriceHAndling]     MONEY         NULL,
    [InvoicePriceGiftWrapFee]  MONEY         NULL,
    [InvoiceAmountDue]         MONEY         NULL,
    [DateMetered]              DATE          NULL,
    [InvoiceTitle]             VARCHAR (16)  NULL,
    [InvoiceClientOrderNumber] VARCHAR (22)  NULL,
    [LineItemNumber]           VARCHAR (10)  NULL,
    [BillOfLadingNumber]       VARCHAR (10)  NULL,
    [DateTimeInsertedUTC]      DATETIME2 (7) NULL,
    [OrderNumber]              VARCHAR (25)  NULL);


GO
PRINT N'Creating [EDI].[TypeUpdateTransactionLog]...';


GO
CREATE TYPE [EDI].[TypeUpdateTransactionLog] AS TABLE (
    [Id]     INT          NULL,
    [LinkId] BIGINT       NULL,
    [RefId]  VARCHAR (50) NULL);


GO
PRINT N'Creating [dbo].[TypeKeyValue1024]...';


GO
CREATE TYPE [dbo].[TypeKeyValue1024] AS TABLE (
    [KeyName]  VARCHAR (200)  NULL,
    [KeyValue] VARCHAR (1024) NULL);


GO
PRINT N'Creating [dbo].[TypeListInt]...';


GO
CREATE TYPE [dbo].[TypeListInt] AS TABLE (
    [Ints] INT NULL);


GO
PRINT N'Creating [dbo].[TypeListString25]...';


GO
CREATE TYPE [dbo].[TypeListString25] AS TABLE (
    [Strings] VARCHAR (25) NULL);


GO
PRINT N'Creating [dbo].[TypeListString250]...';


GO
CREATE TYPE [dbo].[TypeListString250] AS TABLE (
    [Strings] VARCHAR (250) NULL);


GO
PRINT N'Creating [dbo].[TypeListString500]...';


GO
CREATE TYPE [dbo].[TypeListString500] AS TABLE (
    [Strings] VARCHAR (500) NULL);


GO
PRINT N'Creating [BLK].[PurchaseOrderDetail]...';


GO
CREATE TABLE [BLK].[PurchaseOrderDetail] (
    [OrderItemId]    BIGINT       IDENTITY (1, 1) NOT NULL,
    [OrderId]        INT          NOT NULL,
    [LineNo]         VARCHAR (10) NULL,
    [Quantity]       SMALLINT     NULL,
    [UnitOfMeasure]  CHAR (3)     NULL,
    [UnitPrice]      MONEY        NULL,
    [PriceCode]      VARCHAR (10) NULL,
    [ItemIdCode]     VARCHAR (5)  NULL,
    [ItemIdentifier] VARCHAR (20) NULL,
    [ItemFillTerms]  VARCHAR (30) NULL,
    [XActionCode]    VARCHAR (10) NULL,
    [FillAmount]     VARCHAR (10) NULL,
    [HPBItemCode]    VARCHAR (50) NULL,
    CONSTRAINT [PK_PurchaseOrderDetail] PRIMARY KEY CLUSTERED ([OrderItemId] ASC)
);


GO
PRINT N'Creating [BLK].[PurchaseOrderDetail].[IX_PurchaseOrderDetail_ItemIdentifier]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrderDetail_ItemIdentifier]
    ON [BLK].[PurchaseOrderDetail]([ItemIdentifier] ASC);


GO
PRINT N'Creating [BLK].[PurchaseOrderDetail].[IXN_PurchaseOrderDetail_OrderId]...';


GO
CREATE NONCLUSTERED INDEX [IXN_PurchaseOrderDetail_OrderId]
    ON [BLK].[PurchaseOrderDetail]([OrderId] ASC)
    INCLUDE([OrderItemId], [LineNo], [Quantity], [UnitOfMeasure], [UnitPrice], [PriceCode], [ItemIdCode], [ItemIdentifier], [ItemFillTerms], [XActionCode], [FillAmount]);


GO
PRINT N'Creating [BLK].[InvoiceHeader]...';


GO
CREATE TABLE [BLK].[InvoiceHeader] (
    [InvoiceId]         INT           IDENTITY (1, 1) NOT NULL,
    [PONumber]          VARCHAR (22)  NULL,
    [InvoiceNo]         VARCHAR (20)  NULL,
    [IssueDate]         DATETIME      NULL,
    [VendorId]          VARCHAR (20)  NULL,
    [ReferenceNo]       VARCHAR (20)  NULL,
    [ShipToLoc]         VARCHAR (5)   NULL,
    [ShipToSAN]         VARCHAR (12)  NULL,
    [BillToLoc]         VARCHAR (5)   NULL,
    [BillToSAN]         VARCHAR (12)  NULL,
    [ShipFromLoc]       VARCHAR (5)   NULL,
    [ShipFromSAN]       VARCHAR (12)  NULL,
    [TotalLines]        SMALLINT      NULL,
    [TotalQuantity]     INT           NULL,
    [TotalPayable]      MONEY         NULL,
    [CurrencyCode]      VARCHAR (5)   NULL,
    [InsertDateTime]    DATETIME      NULL,
    [Processed]         BIT           NOT NULL,
    [ProcessedDateTime] DATETIME2 (7) NULL,
    [InvoiceACKSent]    BIT           NULL,
    [InvoiceAckNo]      VARCHAR (10)  NULL,
    [GSNo]              VARCHAR (10)  NULL,
    [EDISourceTypeId]   TINYINT       NULL,
    CONSTRAINT [PK_InvoiceHeader] PRIMARY KEY CLUSTERED ([InvoiceId] ASC)
);


GO
PRINT N'Creating [BLK].[InvoiceHeader].[IX_InvoiceHeader_PONumber]...';


GO
CREATE NONCLUSTERED INDEX [IX_InvoiceHeader_PONumber]
    ON [BLK].[InvoiceHeader]([PONumber] ASC);


GO
PRINT N'Creating [BLK].[InvoiceDetail]...';


GO
CREATE TABLE [BLK].[InvoiceDetail] (
    [InvoiceItemId]   BIGINT         IDENTITY (1, 1) NOT NULL,
    [InvoiceId]       INT            NOT NULL,
    [LineNo]          VARCHAR (10)   NULL,
    [ItemIdCode]      VARCHAR (5)    NULL,
    [ItemIdentifier]  VARCHAR (20)   NULL,
    [ItemDesc]        VARCHAR (250)  NULL,
    [InvoiceQty]      INT            NULL,
    [UnitPrice]       MONEY          NULL,
    [DiscountPrice]   MONEY          NULL,
    [DiscountCode]    VARCHAR (10)   NULL,
    [DiscountPct]     DECIMAL (4, 2) NULL,
    [RetailPrice]     MONEY          NULL,
    [ReferenceNumber] VARCHAR (50)   NULL,
    CONSTRAINT [PK_InvoiceDetail] PRIMARY KEY CLUSTERED ([InvoiceItemId] ASC)
);


GO
PRINT N'Creating [BLK].[InvoiceDetail].[IX_InvoiceDetail_ItemIdentifier]...';


GO
CREATE NONCLUSTERED INDEX [IX_InvoiceDetail_ItemIdentifier]
    ON [BLK].[InvoiceDetail]([ItemIdentifier] ASC);


GO
PRINT N'Creating [BLK].[PurchaseOrderHeader]...';


GO
CREATE TABLE [BLK].[PurchaseOrderHeader] (
    [OrderId]           INT           IDENTITY (1, 1) NOT NULL,
    [PONumber]          VARCHAR (22)  NOT NULL,
    [IssueDate]         DATETIME      NULL,
    [VendorID]          VARCHAR (20)  NOT NULL,
    [ShipToLoc]         VARCHAR (5)   NULL,
    [ShipToSAN]         VARCHAR (12)  NULL,
    [BillToLoc]         VARCHAR (5)   NULL,
    [BillToSAN]         VARCHAR (12)  NULL,
    [ShipFromLoc]       VARCHAR (5)   NULL,
    [ShipFromSAN]       VARCHAR (12)  NULL,
    [TotalLines]        INT           NULL,
    [TotalQuantity]     INT           NULL,
    [InsertDateTime]    DATETIME      NULL,
    [Processed]         BIT           NOT NULL,
    [ProcessedDateTime] DATETIME2 (7) NULL,
    [ShippingMethod]    VARCHAR (20)  NULL,
    [RequestedBy]       VARCHAR (50)  NULL,
    [ApprovedBy]        VARCHAR (50)  NULL,
    [DateApproved]      DATETIME2 (7) NULL,
    CONSTRAINT [PK_PurchaseOrderHeader] PRIMARY KEY CLUSTERED ([OrderId] ASC)
);


GO
PRINT N'Creating [BLK].[PurchaseOrderHeader].[IX_PurchaseOrderHeader_PONumber]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrderHeader_PONumber]
    ON [BLK].[PurchaseOrderHeader]([PONumber] ASC);


GO
PRINT N'Creating [BLK].[AcknowledgeHeader]...';


GO
CREATE TABLE [BLK].[AcknowledgeHeader] (
    [AckId]             INT           IDENTITY (1, 1) NOT NULL,
    [PONumber]          VARCHAR (22)  NULL,
    [IssueDate]         DATETIME      NULL,
    [VendorId]          VARCHAR (20)  NOT NULL,
    [ReferenceNo]       VARCHAR (20)  NULL,
    [ShipToLoc]         VARCHAR (5)   NULL,
    [ShipToSAN]         VARCHAR (12)  NULL,
    [BillToLoc]         VARCHAR (5)   NULL,
    [BillToSAN]         VARCHAR (12)  NULL,
    [ShipFromLoc]       VARCHAR (5)   NULL,
    [ShipFromSAN]       VARCHAR (12)  NULL,
    [TotalLines]        INT           NULL,
    [TotalQuantity]     INT           NULL,
    [CurrencyCode]      VARCHAR (5)   NULL,
    [InsertDateTime]    DATETIME      NULL,
    [Processed]         BIT           NOT NULL,
    [ProcessedDateTime] DATETIME2 (7) NULL,
    [ResponseACKSent]   BIT           NULL,
    [ResponseAckNo]     VARCHAR (10)  NULL,
    [GSNo]              VARCHAR (10)  NULL,
    [EDISourceTypeId]   TINYINT       NULL,
    [VendorMessage]     VARCHAR (500) NULL,
    CONSTRAINT [PK_AcknowledgeHeader] PRIMARY KEY CLUSTERED ([AckId] ASC)
);


GO
PRINT N'Creating [BLK].[AcknowledgeHeader].[IX_AcknowledgeHeader_PONumber]...';


GO
CREATE NONCLUSTERED INDEX [IX_AcknowledgeHeader_PONumber]
    ON [BLK].[AcknowledgeHeader]([PONumber] ASC);


GO
PRINT N'Creating [BLK].[AcknowledgeDetail]...';


GO
CREATE TABLE [BLK].[AcknowledgeDetail] (
    [AckItemId]           BIGINT        IDENTITY (1, 1) NOT NULL,
    [AckId]               INT           NOT NULL,
    [LineNo]              VARCHAR (10)  NULL,
    [LineStatusCode]      VARCHAR (10)  NULL,
    [ItemStatusCode]      VARCHAR (10)  NULL,
    [UnitOfMeasure]       VARCHAR (10)  NULL,
    [QuantityOrdered]     INT           NULL,
    [QuantityShipped]     INT           NULL,
    [QuantityCancelled]   INT           NULL,
    [QuantityBackordered] INT           NULL,
    [UnitPrice]           MONEY         NULL,
    [PriceCode]           VARCHAR (10)  NULL,
    [CurrencyCode]        VARCHAR (5)   NULL,
    [ItemIdCode]          VARCHAR (5)   NULL,
    [ItemIdentifier]      VARCHAR (20)  NULL,
    [ItemDesc]            VARCHAR (250) NULL,
    [EDIFileID]           INT           NULL,
    [EDILineNumber]       INT           NULL,
    [ReferenceNumber]     VARCHAR (20)  NULL,
    [VendorStatus]        VARCHAR (500) NULL,
    CONSTRAINT [PK_AcknowledgeDetail] PRIMARY KEY CLUSTERED ([AckItemId] ASC)
);


GO
PRINT N'Creating [BLK].[AcknowledgeDetail].[IX_AcknowledgeDetail_ItemIdentifier]...';


GO
CREATE NONCLUSTERED INDEX [IX_AcknowledgeDetail_ItemIdentifier]
    ON [BLK].[AcknowledgeDetail]([ItemIdentifier] ASC);


GO
PRINT N'Creating [BLK].[ShipmentHeader]...';


GO
CREATE TABLE [BLK].[ShipmentHeader] (
    [ShipmentID]        INT            IDENTITY (1, 1) NOT NULL,
    [PONumber]          VARCHAR (22)   NOT NULL,
    [ASNNo]             VARCHAR (20)   NULL,
    [IssueDate]         DATETIME       NULL,
    [VendorID]          VARCHAR (20)   NULL,
    [ReferenceNo]       VARCHAR (20)   NULL,
    [ShipToLoc]         VARCHAR (5)    NULL,
    [ShipToSAN]         VARCHAR (12)   NULL,
    [BillToLoc]         VARCHAR (5)    NULL,
    [BillToSAN]         VARCHAR (12)   NULL,
    [ShipFromLoc]       VARCHAR (5)    NULL,
    [ShipFromSAN]       VARCHAR (12)   NULL,
    [Carrier]           VARCHAR (20)   NULL,
    [TotalLines]        INT            NULL,
    [TotalQuantity]     INT            NULL,
    [CurrencyCode]      CHAR (3)       NULL,
    [InsertDateTime]    DATETIME       NULL,
    [Processed]         BIT            NOT NULL,
    [ProcessedDateTime] DATETIME2 (7)  NULL,
    [ASNACKSent]        BIT            NULL,
    [ASNAckNo]          VARCHAR (10)   NULL,
    [GSNo]              VARCHAR (10)   NULL,
    [EDISourceTypeId]   TINYINT        NULL,
    [PackageWeight]     DECIMAL (9, 2) NULL,
    [NumberOfUnits]     SMALLINT       NULL,
    [ShipmentDate]      DATE           NULL,
    CONSTRAINT [PK_ShipmentHeader] PRIMARY KEY CLUSTERED ([ShipmentID] ASC)
);


GO
PRINT N'Creating [BLK].[ShipmentHeader].[IX_ShipmentHeader_PONUmber]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShipmentHeader_PONUmber]
    ON [BLK].[ShipmentHeader]([PONumber] ASC);


GO
PRINT N'Creating [BLK].[ShipmentDetail]...';


GO
CREATE TABLE [BLK].[ShipmentDetail] (
    [ShipmentItemID]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [ShipmentID]               INT            NOT NULL,
    [LineNo]                   VARCHAR (10)   NULL,
    [ItemIdCode]               VARCHAR (5)    NULL,
    [ItemIdentifier]           VARCHAR (20)   NULL,
    [ItemDesc]                 VARCHAR (250)  NULL,
    [QuantityShipped]          INT            NULL,
    [PackageNo]                VARCHAR (30)   NULL,
    [TrackingNo]               VARCHAR (30)   NULL,
    [ReferenceNumber]          VARCHAR (20)   NULL,
    [QuantityPredicted]        SMALLINT       NULL,
    [VendorPriceList]          DECIMAL (7, 2) NULL,
    [VendorPriceNetDiscounted] DECIMAL (7, 2) NULL,
    CONSTRAINT [PK_ShipmentDetail] PRIMARY KEY CLUSTERED ([ShipmentItemID] ASC)
);


GO
PRINT N'Creating [BLK].[ShipmentDetail].[IX_ShipmentDetail_ItemIdentifier]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShipmentDetail_ItemIdentifier]
    ON [BLK].[ShipmentDetail]([ItemIdentifier] ASC);


GO
PRINT N'Creating [CDF].[Acknowledgements]...';


GO
CREATE TABLE [CDF].[Acknowledgements] (
    [Id]                                BIGINT        IDENTITY (1, 1) NOT NULL,
    [FulfillmentId]                     BIGINT        NULL,
    [DateAcknowledgementRecorded]       DATE          NULL,
    [AcknowledgementNumber]             VARCHAR (30)  NULL,
    [DatePurchaseOrder]                 DATE          NULL,
    [DateOrderCancellation]             DATE          NULL,
    [AcknowledgementId]                 VARCHAR (30)  NULL,
    [VendorReferenceNumberType]         VARCHAR (10)  NULL,
    [VendorReferenceNumber]             VARCHAR (20)  NULL,
    [TerminalOrderControl]              VARCHAR (20)  NULL,
    [POStatus]                          CHAR (1)      NULL,
    [VendorAcknowledgeMessage]          VARCHAR (255) NULL,
    [ModifiedShipToName]                VARCHAR (35)  NULL,
    [ModifiedShipToAddress]             VARCHAR (105) NULL,
    [ModifiedShipToCity]                VARCHAR (25)  NULL,
    [ModifiedShipToState]               VARCHAR (3)   NULL,
    [ModifiedShipToZip]                 VARCHAR (11)  NULL,
    [ModdifiedShipToCountry]            VARCHAR (3)   NULL,
    [AcknowledgementStatusCode]         VARCHAR (2)   NULL,
    [AcknowledgementDistributionCenter] CHAR (1)      NULL,
    [DateAvailable]                     VARCHAR (10)  NULL,
    [DistrbutionInventory]              VARCHAR (40)  NULL,
    [Publisher]                         VARCHAR (255) NULL,
    [Title]                             VARCHAR (255) NULL,
    [Author]                            VARCHAR (255) NULL,
    [BindingCode]                       CHAR (1)      NULL,
    [QuantityPredicted]                 INT           NULL,
    [PriceNet]                          MONEY         NULL,
    [PriceDiscountedList]               MONEY         NULL,
    [DateTimeInsertedUTC]               DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_Acknowledgements] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [CDF].[CarrierCode]...';


GO
CREATE TABLE [CDF].[CarrierCode] (
    [Code]        CHAR (3)     NULL,
    [Description] VARCHAR (50) NULL,
    [MediaType]   VARCHAR (20) NULL,
    [CarrierType] VARCHAR (20) NULL
);


GO
PRINT N'Creating [CDF].[Fulfillment]...';


GO
CREATE TABLE [CDF].[Fulfillment] (
    [Id]                    BIGINT        IDENTITY (1, 1) NOT NULL,
    [LastTransactionId]     TINYINT       NULL,
    [VendorId]              VARCHAR (20)  NOT NULL,
    [SourceApplication]     VARCHAR (20)  NOT NULL,
    [OrderNumber]           VARCHAR (22)  NOT NULL,
    [QuantityOrdered]       INT           NULL,
    [QuantityConfirmed]     INT           NULL,
    [QuantityBackordered]   INT           NULL,
    [QuantityCancelled]     INT           NULL,
    [QuantitySlashed]       INT           NULL,
    [QuantityShipped]       INT           NULL,
    [QuantityInvoiced]      INT           NULL,
    [LastModifiedDateUTC]   DATETIME2 (7) NULL,
    [LastModifiedUTCOffset] INT           NULL,
    [RequestedShipMethod]   CHAR (3)      NULL,
    [ReferenceNumber]       VARCHAR (20)  NULL,
    CONSTRAINT [PK_Fulfillment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [CDF].[Invoices]...';


GO
CREATE TABLE [CDF].[Invoices] (
    [Id]                       BIGINT        IDENTITY (1, 1) NOT NULL,
    [FulfillmentId]            BIGINT        NULL,
    [DateTimeInvoiceRecorded]  DATETIME2 (7) NULL,
    [InvoiceNumber]            VARCHAR (30)  NULL,
    [CurrencyCode]             VARCHAR (3)   NULL,
    [CountryCode]              VARCHAR (2)   NULL,
    [InvoicePriceList]         MONEY         NULL,
    [InvoiceDiscount]          MONEY         NULL,
    [InvoicePriceNet]          MONEY         NULL,
    [InvoicePriceShipping]     MONEY         NULL,
    [InvoicePriceHAndling]     MONEY         NULL,
    [InvoicePriceGiftWrapFee]  MONEY         NULL,
    [InvoiceAmountDue]         MONEY         NULL,
    [DateMetered]              DATE          NULL,
    [InvoiceTitle]             VARCHAR (16)  NULL,
    [InvoiceClientOrderNumber] VARCHAR (22)  NULL,
    [LineItemNumber]           VARCHAR (10)  NULL,
    [BillOfLadingNumber]       VARCHAR (10)  NULL,
    [DateTimeInsertedUTC]      DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_Invoices] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [CDF].[Orders]...';


GO
CREATE TABLE [CDF].[Orders] (
    [Id]                          BIGINT         IDENTITY (1, 1) NOT NULL,
    [FulfillmentId]               BIGINT         NULL,
    [DateOrderRecorded]           DATETIME2 (7)  NOT NULL,
    [OrderStatusId]               TINYINT        NOT NULL,
    [AllowBackorder]              BIT            NOT NULL,
    [AllowDistributionSplits]     BIT            NOT NULL,
    [OrderProductTypeId]          VARCHAR (5)    NULL,
    [OrderProductId]              VARCHAR (20)   NULL,
    [OrderProductDescription]     VARCHAR (100)  NULL,
    [PromotionCode]               VARCHAR (30)   NULL,
    [VendorOrderType]             VARCHAR (2)    NULL,
    [OrderTaxSales]               DECIMAL (7, 4) NULL,
    [OrderTaxFreight]             DECIMAL (7, 4) NULL,
    [BillToName]                  VARCHAR (35)   NOT NULL,
    [BillToPhone]                 VARCHAR (25)   NOT NULL,
    [BillToAddress]               VARCHAR (105)  NOT NULL,
    [BillToCity]                  VARCHAR (25)   NULL,
    [BillToState]                 VARCHAR (3)    NULL,
    [BillToZip]                   VARCHAR (11)   NULL,
    [BillToCountryCode]           VARCHAR (3)    NULL,
    [ShipToName]                  VARCHAR (35)   NOT NULL,
    [ShipToPhone]                 VARCHAR (25)   NOT NULL,
    [ShipToAddress]               VARCHAR (105)  NOT NULL,
    [ShipToCity]                  VARCHAR (25)   NULL,
    [ShipToState]                 VARCHAR (3)    NULL,
    [ShipToZip]                   VARCHAR (11)   NULL,
    [ShipToCountryCode]           VARCHAR (3)    NULL,
    [GiftWrap]                    BIT            NOT NULL,
    [GiftWrapFee]                 MONEY          NULL,
    [SuppressPrice]               BIT            NOT NULL,
    [GiftMessage]                 VARCHAR (255)  NULL,
    [SpecialDeliveryInstructions] VARCHAR (100)  NULL,
    [MarketingMessage]            VARCHAR (255)  NULL,
    [ImprintBook]                 BIT            NOT NULL,
    [ImprintIndexCode]            CHAR (1)       NULL,
    [ImprintText]                 VARCHAR (30)   NULL,
    [ImprintFont]                 CHAR (1)       NULL,
    [ImprintColor]                CHAR (1)       NULL,
    [ImprintPosition]             CHAR (1)       NULL,
    [OrderUnitPrice]              MONEY          NULL,
    [DateTimeInsertedUTC]         DATETIME2 (7)  NOT NULL,
    [GreenLight]                  BIT            NULL,
    [DistributionCenterOverride]  CHAR (1)       NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [CDF].[OrderStatus]...';


GO
CREATE TABLE [CDF].[OrderStatus] (
    [Id]         TINYINT      IDENTITY (0, 1) NOT NULL,
    [StatusName] VARCHAR (30) NOT NULL,
    [Active]     BIT          NOT NULL,
    CONSTRAINT [PK_OrderStatus] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_OrderStatus_StatusName] UNIQUE NONCLUSTERED ([StatusName] ASC)
);


GO
PRINT N'Creating [CDF].[Shipments]...';


GO
CREATE TABLE [CDF].[Shipments] (
    [Id]                       BIGINT         IDENTITY (1, 1) NOT NULL,
    [FulfillmentId]            BIGINT         NULL,
    [DateTimeShipmentRecorded] DATETIME2 (7)  NULL,
    [ShipmentNumber]           VARCHAR (30)   NULL,
    [ShipmentSubtotal]         MONEY          NULL,
    [ShipmentDiscount]         MONEY          NULL,
    [ShipmentTaxSales]         MONEY          NULL,
    [ShipmentFees]             MONEY          NULL,
    [ShipmentFreight]          MONEY          NULL,
    [ShipmentTotal]            MONEY          NULL,
    [DateOrderShipped]         VARCHAR (20)   NULL,
    [CustomerOrderReference]   VARCHAR (30)   NULL,
    [CarrierType]              VARCHAR (30)   NULL,
    [CarrierName]              VARCHAR (50)   NULL,
    [PackageNumberTracking]    VARCHAR (25)   NULL,
    [PackageNumberSecondary]   VARCHAR (25)   NULL,
    [ShipmentPriceList]        MONEY          NULL,
    [ShipmentPriceNet]         MONEY          NULL,
    [PackageWeight]            DECIMAL (9, 2) NULL,
    [ReasonCode]               VARCHAR (10)   NULL,
    [ShipmentISBNorEAN]        VARCHAR (15)   NULL,
    [DateTimeInsertedUTC]      DATETIME2 (7)  NOT NULL,
    [WarehouseCode]            VARCHAR (50)   NULL,
    [QuantityPredicted]        INT            NULL,
    [QuantitySlashed]          INT            NULL,
    [QuantityShipped]          INT            NULL,
    [QuantityCancelled]        INT            NULL,
    CONSTRAINT [PK_Shipments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [CDF].[TransactionType]...';


GO
CREATE TABLE [CDF].[TransactionType] (
    [Id]                     TINYINT      IDENTITY (0, 1) NOT NULL,
    [TransactionOrder]       TINYINT      NULL,
    [TransactionCode]        CHAR (3)     NOT NULL,
    [TransactionDescription] VARCHAR (50) NULL,
    [Active]                 BIT          NOT NULL,
    [Closed]                 BIT          NOT NULL,
    [Processing]             BIT          NULL,
    CONSTRAINT [PK_TransactionType] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_TransactionType_TransactionName] UNIQUE NONCLUSTERED ([TransactionCode] ASC)
);


GO
PRINT N'Creating [EDI].[SourceLocation]...';


GO
CREATE TABLE [EDI].[SourceLocation] (
    [Id]        TINYINT       IDENTITY (1, 1) NOT NULL,
    [SourceApp] VARCHAR (250) NULL,
    CONSTRAINT [PK_SourceLocation] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [EDI].[SourceType]...';


GO
CREATE TABLE [EDI].[SourceType] (
    [Id]         TINYINT       IDENTITY (1, 1) NOT NULL,
    [SourceType] VARCHAR (250) NULL,
    CONSTRAINT [PK_SourceType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [EDI].[TransactionLog]...';


GO
CREATE TABLE [EDI].[TransactionLog] (
    [Id]                    INT              IDENTITY (1, 1) NOT NULL,
    [LinkId]                BIGINT           NULL,
    [SourceTypeId]          TINYINT          NULL,
    [TransactionTypeId]     TINYINT          NOT NULL,
    [DateRecordInsertedUTC] DATETIME2 (7)    NOT NULL,
    [DateTransmittedUTC]    DATETIME2 (7)    NULL,
    [Method]                VARCHAR (3)      NULL,
    [Direction]             CHAR (1)         NOT NULL,
    [Filename]              VARCHAR (255)    NULL,
    [VendorId]              VARCHAR (20)     NULL,
    [VendorMesage]          VARCHAR (255)    NULL,
    [uid]                   UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_TransactionLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [EDI].[TransactionLogMessages]...';


GO
CREATE TABLE [EDI].[TransactionLogMessages] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [TransLogID]      INT            NOT NULL,
    [KeyName]         VARCHAR (200)  NULL,
    [KeyValue]        VARCHAR (1024) NULL,
    [DateInsertedUTC] DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_TransactionLogMessages] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [EDI].[TransactionType]...';


GO
CREATE TABLE [EDI].[TransactionType] (
    [Id]                     TINYINT      IDENTITY (0, 1) NOT NULL,
    [SourceTypeID]           TINYINT      NOT NULL,
    [TransactionOrder]       TINYINT      NULL,
    [TransactionCode]        CHAR (3)     NOT NULL,
    [TransactionDescription] VARCHAR (50) NULL,
    [Active]                 BIT          NOT NULL,
    [Closed]                 BIT          NOT NULL,
    [Processing]             BIT          NULL,
    CONSTRAINT [PK_TransactionType] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_TransactionType_TransactionName] UNIQUE NONCLUSTERED ([TransactionCode] ASC)
);


GO
PRINT N'Creating [EDI].[ApplicationMaster]...';


GO
CREATE TABLE [EDI].[ApplicationMaster] (
    [Id]               SMALLINT      IDENTITY (1, 1) NOT NULL,
    [VendorId]         VARCHAR (50)  NOT NULL,
    [VendorName]       VARCHAR (100) NULL,
    [SANcode]          VARCHAR (12)  NULL,
    [PO__BULK]         VARCHAR (50)  NULL,
    [PO__CDF]          VARCHAR (50)  NULL,
    [POA_BULK]         VARCHAR (50)  NULL,
    [POA_CDF]          VARCHAR (50)  NULL,
    [ASN_BULK]         VARCHAR (50)  NULL,
    [ASN_CDF]          VARCHAR (50)  NULL,
    [INV_BULK]         VARCHAR (50)  NULL,
    [INV_CDF]          VARCHAR (50)  NULL,
    [FA__BULK]         VARCHAR (50)  NULL,
    [FA__CDF]          VARCHAR (50)  NULL,
    [Community]        VARCHAR (50)  NULL,
    [Processor]        VARCHAR (50)  NULL,
    [ParentFolder]     VARCHAR (50)  NULL,
    [DftBackOrd]       BIT           NULL,
    [InHouseOnly]      BIT           NULL,
    [INV_FA]           VARCHAR (50)  NULL,
    [ACK_FA]           VARCHAR (50)  NULL,
    [ASN_FA]           VARCHAR (50)  NULL,
    [Binary]           BIT           NULL,
    [ISAControlNumber] BIGINT        NULL,
    [Notes]            VARCHAR (100) NULL,
    [EDIVersion]       VARCHAR (10)  NULL,
    CONSTRAINT [PK_Vendors] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [EDI].[TransactionLogOrderNumbers]...';


GO
CREATE TABLE [EDI].[TransactionLogOrderNumbers] (
    [Id]               BIGINT       IDENTITY (1, 1) NOT NULL,
    [TransactionLogId] INT          NOT NULL,
    [OrderNumber]      VARCHAR (22) NULL,
    CONSTRAINT [PK_TransactionLogOrderNumbers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R16_InvoiceVendorDetail]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R16_InvoiceVendorDetail] (
    [Id]                     INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT         NULL,
    [RecordType]             VARCHAR (2) NULL,
    [Sequence]               SMALLINT    NULL,
    [InvoiceNumber]          INT         NULL,
    [DCCode]                 CHAR (1)    NULL,
    [IngramOrderEntryNumber] VARCHAR (5) NULL,
    CONSTRAINT [PK_Invoice_R16_InvoiceVendorDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R15_InvoiceHeader]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R15_InvoiceHeader] (
    [Id]                        INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                   INT          NULL,
    [InvoiceHeader]             VARCHAR (2)  NULL,
    [Sequence]                  SMALLINT     NULL,
    [InvoiceNumber]             INT          NULL,
    [PurchaseOrderNumber]       VARCHAR (22) NULL,
    [IngramShipToAccountNumber] VARCHAR (7)  NULL,
    [StoreNumber]               VARCHAR (5)  NULL,
    [DCSAN]                     VARCHAR (7)  NULL,
    [InvoiceDate]               DATE         NULL,
    CONSTRAINT [PK_Invoice_R15_InvoiceHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R01_InvoiceFileHeader]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R01_InvoiceFileHeader] (
    [Id]                INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]           INT          NULL,
    [InvoiceFileHeader] VARCHAR (2)  NULL,
    [Sequence]          SMALLINT     NULL,
    [IngramSAN]         VARCHAR (12) NULL,
    [FileSource]        VARCHAR (13) NULL,
    [CreationDate]      DATE         NULL,
    [FileName]          VARCHAR (22) NULL,
    CONSTRAINT [PK_Invoice_R01_InvoiceFileHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[ShipNotice_OD_ASNShipmentDetail]...';


GO
CREATE TABLE [ImportBBV3].[ShipNotice_OD_ASNShipmentDetail] (
    [Id]                      INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]                 INT            NULL,
    [DetailRecordIdentifier]  VARCHAR (2)    NULL,
    [LineItemIdNumber]        VARCHAR (22)   NULL,
    [ISBN13OrEAN]             VARCHAR (13)   NULL,
    [QuantityPredictedtoShip] SMALLINT       NULL,
    [QuantityShipped]         SMALLINT       NULL,
    [IngramItemListPrice]     NUMERIC (7, 2) NULL,
    [NetOrDiscountedPrice]    NUMERIC (7, 2) NULL,
    CONSTRAINT [PK_ShipNotice_OD_ASNShipmentDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[ShipNotice_OR_ASNShipment]...';


GO
CREATE TABLE [ImportBBV3].[ShipNotice_OR_ASNShipment] (
    [Id]                       INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                  INT          NULL,
    [ShipmentRecordIdentifier] VARCHAR (2)  NULL,
    [PONumber]                 VARCHAR (22) NULL,
    [IngramOrderEntryNumber]   VARCHAR (5)  NULL,
    CONSTRAINT [PK_ShipNotice_OR_ASNShipment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[ShipNotice_OP_ASNPack]...';


GO
CREATE TABLE [ImportBBV3].[ShipNotice_OP_ASNPack] (
    [Id]                   INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT            NULL,
    [PackRecordIdentifier] VARCHAR (2)    NULL,
    [ShippingDCCode]       VARCHAR (2)    NULL,
    [SSL]                  VARCHAR (20)   NULL,
    [TrackingNumber]       VARCHAR (25)   NULL,
    [SCAC]                 VARCHAR (5)    NULL,
    [CarrierActualNumber]  VARCHAR (5)    NULL,
    [Weight]               NUMERIC (9, 4) NULL,
    [NumberofUnitsinBox]   SMALLINT       NULL,
    [ShipmentDate]         DATE           NOT NULL,
    CONSTRAINT [PK_ShipNotice_OP_ASNPack] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[ShipNotice_CR_ASNCompany]...';


GO
CREATE TABLE [ImportBBV3].[ShipNotice_CR_ASNCompany] (
    [Id]                        INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]                   INT         NULL,
    [CompanyRecordIdentifier]   VARCHAR (2) NULL,
    [IngramShipToAccountNumber] VARCHAR (7) NULL,
    CONSTRAINT [PK_ShipNotice_CR_ASNCompany] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[BatchItem]...';


GO
CREATE TABLE [ImportBBV3].[BatchItem] (
    [Id]        TINYINT      IDENTITY (1, 1) NOT NULL,
    [BatchItem] VARCHAR (50) NULL,
    [Active]    BIT          NULL,
    CONSTRAINT [PK_BatchItem] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_BatchItem.BatchItem] UNIQUE NONCLUSTERED ([BatchItem] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R95_InvoiceFileTrailer]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R95_InvoiceFileTrailer] (
    [Id]                 INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]            INT         NULL,
    [InvoiceFileTrailer] VARCHAR (2) NULL,
    [Sequence]           SMALLINT    NULL,
    [TotalItems]         SMALLINT    NULL,
    [TotalInvoices]      SMALLINT    NULL,
    [TotalUnits]         SMALLINT    NULL,
    CONSTRAINT [PK_Invoice_R95_InvoiceFileTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R57_InvoiceTrailer]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R57_InvoiceTrailer] (
    [Id]                 INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]            INT            NULL,
    [InvoiceTrailer]     VARCHAR (2)    NULL,
    [Sequence]           SMALLINT       NULL,
    [InvoiceNumber]      INT            NULL,
    [TotalNetPrice]      NUMERIC (9, 2) NULL,
    [TotalTaxes]         NUMERIC (7, 2) NULL,
    [TotalShipping]      NUMERIC (6, 2) NULL,
    [TotalVAT]           NUMERIC (7, 2) NULL,
    [TotalDuty]          NUMERIC (7, 2) NULL,
    [TotalInvoiceAmount] NUMERIC (9, 2) NULL,
    CONSTRAINT [PK_Invoice_R57_InvoiceTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R55_InvoiceTotals]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R55_InvoiceTotals] (
    [Id]                 INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]            INT         NULL,
    [InvoiceTotal]       VARCHAR (2) NULL,
    [Sequence]           SMALLINT    NULL,
    [InvoiceNumber]      INT         NULL,
    [InvoiceRecordCount] SMALLINT    NULL,
    [NumberofItems]      SMALLINT    NULL,
    [TotalNumberofUnits] SMALLINT    NULL,
    CONSTRAINT [PK_Invoice_R55_InvoiceTotals] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R48_DetailTotal]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R48_DetailTotal] (
    [Id]               INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]          INT          NULL,
    [DetailTotal]      VARCHAR (2)  NULL,
    [Sequence]         SMALLINT     NULL,
    [InvoiceNumber]    INT          NULL,
    [Title]            VARCHAR (25) NULL,
    [CustomerPONumber] VARCHAR (22) NULL,
    CONSTRAINT [PK_Invoice_R48_DetailTotal] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R46_DetailISBN13EAN]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R46_DetailISBN13EAN] (
    [Id]                      INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                 INT          NULL,
    [DetailISBN13OrEANRecord] VARCHAR (2)  NULL,
    [Sequence]                SMALLINT     NULL,
    [InvoiceNumber]           INT          NULL,
    [LineItemIDNumber]        VARCHAR (22) NULL,
    [ISBN13OrEANShipped]      VARCHAR (13) NULL,
    CONSTRAINT [PK_Invoice_R46_DetailISBN13EAN] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Invoice_R45_InvoiceDetail]...';


GO
CREATE TABLE [ImportBBV3].[Invoice_R45_InvoiceDetail] (
    [Id]                  INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]             INT            NULL,
    [InvoiceDetail]       VARCHAR (2)    NULL,
    [Sequence]            SMALLINT       NULL,
    [InvoiceNumber]       INT            NULL,
    [PONumber]            VARCHAR (22)   NULL,
    [QuantityShipped]     SMALLINT       NULL,
    [IngramItemListPrice] SMALLINT       NULL,
    [DiscountPercent]     NUMERIC (4, 2) NULL,
    [NetPriceOrCost]      NUMERIC (8, 2) NULL,
    CONSTRAINT [PK_Invoice_R45_InvoiceDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[Batch]...';


GO
CREATE TABLE [ImportBBV3].[Batch] (
    [Id]                     INT           IDENTITY (1, 1) NOT NULL,
    [BatchItemId]            TINYINT       NULL,
    [VendorID]               VARCHAR (20)  NULL,
    [DateCreatedUTC]         DATETIME      NOT NULL,
    [DateCreatedServerLocal] AS            (dateadd(minute, datediff(minute, getutcdate(), getdate()), [DateCreatedUTC])),
    [DateProcessedUTC]       DATETIME      NULL,
    [Filename]               VARCHAR (255) NULL,
    CONSTRAINT [PK_Batch] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R46_StickerTextLines]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R46_StickerTextLines] (
    [Id]              INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]         INT          NULL,
    [RecordCode]      VARCHAR (2)  NULL,
    [Sequence]        SMALLINT     NULL,
    [PONumber]        VARCHAR (22) NULL,
    [StickerTextLine] VARCHAR (30) NULL,
    CONSTRAINT [PK_PurchaseOrder_R46_StickerTextLines] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R45_Imprint]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R45_Imprint] (
    [Id]                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]               INT          NULL,
    [RecordCode]            VARCHAR (2)  NOT NULL,
    [Sequence]              SMALLINT     NOT NULL,
    [PONumber]              VARCHAR (22) NOT NULL,
    [ImprintCode]           CHAR (1)     NOT NULL,
    [ImprintTextandSymbols] VARCHAR (30) NOT NULL,
    [ImprintFontCode]       CHAR (1)     NULL,
    [ImprintColorCode]      CHAR (1)     NULL,
    [ImprintPositionCode]   CHAR (1)     NULL,
    [ImprintAppendCode]     CHAR (1)     NULL,
    CONSTRAINT [PK_PurchaseOrder_R45_Imprint] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R41_AdditionalLineItemDetail]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R41_AdditionalLineItemDetail] (
    [Id]                                  INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]                             INT          NULL,
    [RecordCode]                          VARCHAR (2)  NOT NULL,
    [Sequence]                            SMALLINT     NOT NULL,
    [PONumber]                            VARCHAR (22) NOT NULL,
    [BackorderCancellationDate_LineLevel] DATE         NULL,
    [OrderQuantity]                       SMALLINT     NOT NULL,
    [ClientItemNumber]                    VARCHAR (20) NULL,
    CONSTRAINT [PK_PurchaseOrder_R41_AdditionalLineItemDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R40_LineItemDetail]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R40_LineItemDetail] (
    [Id]                                         INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]                                    INT          NULL,
    [RecordCode]                                 VARCHAR (2)  NOT NULL,
    [Sequence]                                   SMALLINT     NOT NULL,
    [PONumber]                                   VARCHAR (22) NOT NULL,
    [LineItemPONumber]                           VARCHAR (22) NULL,
    [ItemNumber]                                 VARCHAR (20) NOT NULL,
    [BackorderCodeLinelevel]                     CHAR (1)     NOT NULL,
    [SpecialActionCode]                          VARCHAR (2)  NULL,
    [DDCFulfillmentorSplitLineOrderingLinelevel] CHAR (1)     NOT NULL,
    [ItemNumberType]                             VARCHAR (2)  NULL,
    CONSTRAINT [PK_PurchaseOrder_R40_LineItemDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R21_PurchaseOrderOptions]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R21_PurchaseOrderOptions] (
    [Id]                               INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]                          INT          NULL,
    [RecordCode]                       VARCHAR (2)  NOT NULL,
    [Sequence]                         SMALLINT     NOT NULL,
    [PONumber]                         VARCHAR (22) NOT NULL,
    [IngramShipToAccountNumber]        VARCHAR (7)  NOT NULL,
    [POType]                           CHAR (1)     NOT NULL,
    [OrderTypeCode]                    VARCHAR (2)  NOT NULL,
    [DCCode]                           CHAR (1)     NULL,
    [BackorderHoldAndReleaseIndicator] CHAR (1)     NOT NULL,
    [ExtendedPOAStatusCodes]           CHAR (1)     NOT NULL,
    [DCPairs]                          CHAR (1)     NOT NULL,
    [POATypeCode]                      CHAR (1)     NOT NULL,
    [IngramShipToAccountPassword]      VARCHAR (8)  NOT NULL,
    [CarrierOrShippingMethod]          VARCHAR (25) NOT NULL,
    [SplitLineIndicatorOrderLevel]     CHAR (1)     NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R21_PurchaseOrderOptions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R20_FixedSpecialHandlingInstructions]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R20_FixedSpecialHandlingInstructions] (
    [Id]                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]               INT          NULL,
    [RecordCode]            VARCHAR (2)  NOT NULL,
    [Sequence]              SMALLINT     NOT NULL,
    [PONumber]              VARCHAR (22) NOT NULL,
    [SpecialHandlingPrefix] CHAR (1)     NOT NULL,
    [SpecialHandlingCodes]  VARCHAR (4)  NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R20_FixedSpecialHandlingInstructions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R10_ClientHeader]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R10_ClientHeader] (
    [Id]                                            INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]                                       INT          NULL,
    [RecordCode]                                    VARCHAR (2)  NOT NULL,
    [Sequence]                                      SMALLINT     NOT NULL,
    [PONumber]                                      VARCHAR (22) NOT NULL,
    [IngramBillToAccountNumber]                     VARCHAR (7)  NOT NULL,
    [VendorSAN]                                     VARCHAR (7)  NOT NULL,
    [OrderDate]                                     DATE         NOT NULL,
    [BackorderCancellationDate]                     DATE         NULL,
    [BackorderCode]                                 VARCHAR (2)  NOT NULL,
    [DDCFulfillmentorSplitLineOrderingOrderlevel]   CHAR (1)     NOT NULL,
    [RecipientOrShiptoAddressIndicator]             CHAR (1)     NOT NULL,
    [PurchasingConsumerOrOrderedByAddressIndicator] CHAR (1)     NOT NULL,
    [DoNotShipbeforedate]                           DATE         NULL,
    CONSTRAINT [PK_PurchaseOrder_R10_ClientHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R00_ClientFileHeader]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R00_ClientFileHeader] (
    [Id]                 INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]            INT          NULL,
    [RecordCode]         VARCHAR (2)  NOT NULL,
    [Sequence]           SMALLINT     NOT NULL,
    [FileSourceSAN]      VARCHAR (7)  NOT NULL,
    [FileSourceName]     VARCHAR (13) NOT NULL,
    [CreationDate]       DATE         NOT NULL,
    [Filename]           VARCHAR (22) NOT NULL,
    [FormatVersion]      VARCHAR (3)  NOT NULL,
    [IngramSAN]          VARCHAR (7)  NOT NULL,
    [VendorNameFlag]     CHAR (1)     NOT NULL,
    [ProductDescription] VARCHAR (4)  NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R00_ClientFileHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R43_AdditionalLineItem]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R43_AdditionalLineItem] (
    [Id]                                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                               INT          NULL,
    [RecordCode]                            VARCHAR (2)  NULL,
    [Sequence]                              SMALLINT     NULL,
    [PONumber]                              VARCHAR (22) NULL,
    [PublisherAlphaCode]                    VARCHAR (20) NULL,
    [PublicationOrReleaseDate]              VARCHAR (10) NULL,
    [OriginalSequenceNumber]                SMALLINT     NULL,
    [TotalQuantityPredictedtoShipPrimary]   VARCHAR (7)  NULL,
    [TotalQuantityPredictedtoShipSecondary] VARCHAR (7)  NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R43_AdditionalLineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R42_AdditionalLineItem]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R42_AdditionalLineItem] (
    [Id]          INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]     INT          NULL,
    [RecordCode]  VARCHAR (2)  NULL,
    [Sequence]    SMALLINT     NULL,
    [PONumber]    VARCHAR (22) NULL,
    [Title]       VARCHAR (30) NULL,
    [Author]      VARCHAR (20) NULL,
    [BindingCode] CHAR (1)     NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R42_AdditionalLineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R41_AdditionalDetail]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R41_AdditionalDetail] (
    [Id]                     INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT          NULL,
    [RecordCode]             VARCHAR (2)  NULL,
    [Sequence]               SMALLINT     NULL,
    [PONumber]               VARCHAR (22) NULL,
    [DCCodeOrSecondaryDC]    CHAR (1)     NULL,
    [AvailabilityDate]       VARCHAR (10) NULL,
    [DCInventoryInformation] VARCHAR (40) NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R41_AdditionalDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R40_LineItem]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R40_LineItem] (
    [Id]                INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]           INT          NULL,
    [RecordCode]        VARCHAR (2)  NULL,
    [Sequence]          SMALLINT     NULL,
    [PONumber]          VARCHAR (22) NULL,
    [LineItemPONumber]  VARCHAR (22) NULL,
    [ItemNumber]        VARCHAR (20) NULL,
    [POAStatusCode]     VARCHAR (2)  NULL,
    [DCCodeOrPrimaryDC] CHAR (1)     NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R40_LineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R21_FreeFormVendor]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R21_FreeFormVendor] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]       INT          NULL,
    [RecordCode]    VARCHAR (2)  NULL,
    [Sequence]      SMALLINT     NULL,
    [PONumber]      VARCHAR (22) NULL,
    [VendorMessage] VARCHAR (50) NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R21_FreeFormVendor] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R11_PurchaseOrderHeader]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R11_PurchaseOrderHeader] (
    [Id]                         INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                    INT          NULL,
    [RecordCode]                 VARCHAR (2)  NULL,
    [Sequence]                   SMALLINT     NULL,
    [TerminalOrderControlNumber] VARCHAR (13) NULL,
    [PONumber]                   VARCHAR (22) NULL,
    [IngramShipToAccountNumber]  VARCHAR (7)  NULL,
    [IngramSAN]                  VARCHAR (7)  NULL,
    [POStatus]                   CHAR (1)     NULL,
    [AcknowledgmentDate]         DATE         NULL,
    [PODate]                     DATE         NULL,
    [POCancellationDate]         DATE         NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R11_PurchaseOrderHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R02_FileHeader]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R02_FileHeader] (
    [Id]                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]               INT          NULL,
    [RecordCode]            VARCHAR (2)  NULL,
    [Sequence]              SMALLINT     NULL,
    [FileSourceSAN]         VARCHAR (7)  NULL,
    [FileSourceName]        VARCHAR (13) NULL,
    [POACreationDate]       DATE         NULL,
    [ElectronicControlUnit] VARCHAR (5)  NULL,
    [Filename]              VARCHAR (17) NULL,
    [FormatVersion]         VARCHAR (3)  NULL,
    [DestinationSAN]        VARCHAR (7)  NULL,
    [POATypeCode]           CHAR (1)     NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R02_FileHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R91_FileTrailer]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R91_FileTrailer] (
    [Id]         INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]    INT         NULL,
    [RecordCode] VARCHAR (2) NULL,
    [Sequence]   SMALLINT    NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R91_FileTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals] (
    [Id]         INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]    INT          NULL,
    [RecordCode] VARCHAR (2)  NULL,
    [Sequence]   SMALLINT     NULL,
    [PONumber]   VARCHAR (22) NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R59_PurchaseOrderControlTotals] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R45_AdditionalLineItem]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R45_AdditionalLineItem] (
    [Id]                          INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                     INT          NULL,
    [RecordCode]                  VARCHAR (2)  NULL,
    [Sequence]                    SMALLINT     NULL,
    [PONumber]                    VARCHAR (22) NULL,
    [ClientPropiertaryItemNumber] VARCHAR (20) NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R45_AdditionalLineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseAcknowledgement_R44_ItemNumberOrPrice]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseAcknowledgement_R44_ItemNumberOrPrice] (
    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT            NULL,
    [RecordCode]             VARCHAR (2)    NULL,
    [Sequence]               SMALLINT       NULL,
    [PONumber]               VARCHAR (22)   NULL,
    [ForwardedItemNumber]    VARCHAR (20)   NULL,
    [NetOrDiscountPrice]     NUMERIC (8, 2) NULL,
    [ItemNumberType]         VARCHAR (2)    NULL,
    [TotalLineOrderQuantity] SMALLINT       NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R44_ItemNumberOrPrice] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R46_StickerBarcode]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R46_StickerBarcode] (
    [Id]               INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]          INT          NULL,
    [RecordCode]       VARCHAR (2)  NULL,
    [Sequence]         SMALLINT     NULL,
    [PONumber]         VARCHAR (22) NULL,
    [BarcodeTypeCode]  CHAR (2)     NULL,
    [StringforBarcode] VARCHAR (18) NULL,
    CONSTRAINT [PK_PurchaesOrder_R46_StickerBarcode] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R50_PurchaseOrderTrailer]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R50_PurchaseOrderTrailer] (
    [Id]                        INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]                   INT          NULL,
    [RecordCode]                VARCHAR (2)  NULL,
    [Sequence]                  SMALLINT     NULL,
    [PONumber]                  VARCHAR (22) NULL,
    [TotalPurchaseOrderRecords] SMALLINT     NULL,
    [TotalLineItemsinfile]      SMALLINT     NULL,
    [TotalUnitsOrdered]         SMALLINT     NULL,
    CONSTRAINT [PK_PurchaesOrder_R50PurchaseOrderTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [ImportBBV3].[PurchaseOrder_R90_FileTrailer]...';


GO
CREATE TABLE [ImportBBV3].[PurchaseOrder_R90_FileTrailer] (
    [Id]                        INT         IDENTITY (1, 1) NOT NULL,
    [BatchID]                   INT         NULL,
    [RecordCode]                VARCHAR (2) NULL,
    [Sequence]                  SMALLINT    NULL,
    [TotalLineItemsinfile]      SMALLINT    NULL,
    [TotalPurchaseOrderRecords] SMALLINT    NULL,
    [TotalUnitsOrdered]         SMALLINT    NULL,
    [RecordCount00_09]          SMALLINT    NULL,
    [RecordCount10_19]          SMALLINT    NULL,
    [RecordCount20_29]          SMALLINT    NULL,
    [RecordCount30_39]          SMALLINT    NULL,
    [RecordCount40_49]          SMALLINT    NULL,
    [RecordCount50_59]          SMALLINT    NULL,
    [RecordCount60_69]          SMALLINT    NULL,
    [RecordCount70_79]          SMALLINT    NULL,
    [RecordCount80_99]          SMALLINT    NULL,
    CONSTRAINT [PK_PurchaeOrder_R90_FileTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R25_CustomerBillToName]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R25_CustomerBillToName] (
    [Id]                     INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT          NULL,
    [RecordCode]             TINYINT      NOT NULL,
    [Sequence]               SMALLINT     NOT NULL,
    [PONumber]               VARCHAR (22) NOT NULL,
    [PurchasingConsumerName] VARCHAR (35) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R25_CustomerBillToName] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R25_CustomerBillToName].[IX_PurchaseOrder_R25_CustomerBillToName.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R25_CustomerBillToName.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R25_CustomerBillToName]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R25_CustomerBillToName].[IX_PurchaseOrder_R25_CustomerBillToName.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R25_CustomerBillToName.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R25_CustomerBillToName]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R24_CustomerCost]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R24_CustomerCost] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]           INT            NULL,
    [RecordCode]        TINYINT        NOT NULL,
    [Sequence]          SMALLINT       NOT NULL,
    [PONumber]          VARCHAR (22)   NOT NULL,
    [SalesTaxPercent]   DECIMAL (7, 4) NULL,
    [FreightTaxPercent] DECIMAL (6, 3) NULL,
    [FreightAmount]     DECIMAL (7, 2) NULL,
    CONSTRAINT [PK_PurchaseOrder_R24_CustomerCost] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R24_CustomerCost].[IX_PurchaseOrder_R24_CustomerCost.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R24_CustomerCost.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R24_CustomerCost]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R24_CustomerCost].[IX_PurchaseOrder_R24_CustomerCost.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R24_CustomerCost.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R24_CustomerCost]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R21_PurchaseOrderOptions]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R21_PurchaseOrderOptions] (
    [Id]                         INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                    INT          NULL,
    [RecordCode]                 TINYINT      NOT NULL,
    [Sequence]                   SMALLINT     NOT NULL,
    [PONumber]                   VARCHAR (22) NOT NULL,
    [IngramShipToAccountNumber]  VARCHAR (7)  NOT NULL,
    [POType]                     CHAR (1)     NOT NULL,
    [OrderType]                  VARCHAR (2)  NOT NULL,
    [DCCode]                     CHAR (1)     NULL,
    [Greenlight]                 CHAR (1)     NOT NULL,
    [POAType]                    CHAR (1)     NOT NULL,
    [ShipToPassword]             VARCHAR (8)  NOT NULL,
    [CarrierOrShippingMethod]    VARCHAR (25) NULL,
    [SplitOrderAcrossDCsAllowed] BIT          NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R21_PurchaseOrderOptions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R21_PurchaseOrderOptions].[IX_PurchaseOrder_R21_PurchaseOrderOptions.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R21_PurchaseOrderOptions.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R21_PurchaseOrderOptions]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R21_PurchaseOrderOptions].[IX_PurchaseOrder_R21_PurchaseOrderOptions.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R21_PurchaseOrderOptions.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R21_PurchaseOrderOptions]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R20_FixedSpecialHandlingInstructions]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R20_FixedSpecialHandlingInstructions] (
    [Id]                   INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT          NULL,
    [RecordCode]           TINYINT      NOT NULL,
    [Sequence]             SMALLINT     NOT NULL,
    [PONumber]             VARCHAR (22) NOT NULL,
    [SpecialHandlingCodes] VARCHAR (30) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R20_FixedSpecialHandlingInstructions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R20_FixedSpecialHandlingInstructions].[IX_PurchaseOrder_R20_FixedSpecialHandlingInstructions.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R20_FixedSpecialHandlingInstructions.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R20_FixedSpecialHandlingInstructions]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R20_FixedSpecialHandlingInstructions].[IX_PurchaseOrder_R20_FixedSpecialHandlingInstructions.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R20_FixedSpecialHandlingInstructions.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R20_FixedSpecialHandlingInstructions]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R10_ClientHeader]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R10_ClientHeader] (
    [Id]                                INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                           INT          NULL,
    [RecordCode]                        TINYINT      NOT NULL,
    [Sequence]                          SMALLINT     NOT NULL,
    [PONumber]                          VARCHAR (22) NOT NULL,
    [IngramBillToAccountNumber]         VARCHAR (7)  NOT NULL,
    [VendorSAN]                         VARCHAR (7)  NOT NULL,
    [OrderDate]                         DATE         NOT NULL,
    [BackorderCancelDate]               DATE         NOT NULL,
    [BackorderCode]                     CHAR (1)     NOT NULL,
    [DDCFulfillmentOrSplitLineOrdering] CHAR (1)     NOT NULL,
    [ShipToIndicator]                   BIT          NOT NULL,
    [BillToIndicator]                   BIT          NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R10_ClientHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R10_ClientHeader].[IX_PurchaseOrder_R10_ClientHeader.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R10_ClientHeader.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R10_ClientHeader]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R10_ClientHeader].[IX_PurchaseOrder_R10_ClientHEader.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R10_ClientHEader.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R10_ClientHeader]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R32_ShippingRecordRecipientAddressLine]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R32_ShippingRecordRecipientAddressLine] (
    [Id]                   INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT          NULL,
    [RecordCode]           TINYINT      NOT NULL,
    [Sequence]             SMALLINT     NOT NULL,
    [PONumber]             VARCHAR (22) NOT NULL,
    [RecipientAddressLine] VARCHAR (35) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R32_ShippingRecordRecipientAddressLine] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R32_ShippingRecordRecipientAddressLine].[IX_PurchaseOrder_R32_ShippingRecordRecipientAddressLine.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R32_ShippingRecordRecipientAddressLine.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R32_ShippingRecordRecipientAddressLine]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R32_ShippingRecordRecipientAddressLine].[IX_PurchaseOrder_R32_ShippingRecordRecipientAddressLine.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R32_ShippingRecordRecipientAddressLine.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R32_ShippingRecordRecipientAddressLine]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R31_RecipientShipToPhone]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R31_RecipientShipToPhone] (
    [Id]              INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]         INT          NULL,
    [RecordCode]      TINYINT      NOT NULL,
    [Sequence]        SMALLINT     NOT NULL,
    [PONumber]        VARCHAR (22) NOT NULL,
    [RecipientPhone#] VARCHAR (25) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R31_RecipientShipToPhone] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R31_RecipientShipToPhone].[IX_PurchaseOrder_R31_RecipientShipToPhone.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R31_RecipientShipToPhone.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R31_RecipientShipToPhone]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R31_RecipientShipToPhone].[IX_PurchaseOrder_R31_RecipientShipToPhone.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R31_RecipientShipToPhone.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R31_RecipientShipToPhone]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R30_RecipientShipToName]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R30_RecipientShipToName] (
    [Id]                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]               INT          NULL,
    [RecordCode]            TINYINT      NOT NULL,
    [Sequence]              SMALLINT     NOT NULL,
    [PONumber]              VARCHAR (22) NOT NULL,
    [RecipientConsumerName] VARCHAR (35) NOT NULL,
    [AddressValidation]     CHAR (1)     NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R30_RecipientShipToName] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R30_RecipientShipToName].[IX_PurchaseOrder_R30_RecipientShipToName.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R30_RecipientShipToName.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R30_RecipientShipToName]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R30_RecipientShipToName].[IX_PurchaseOrder_R30_RecipientShipToName.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R30_RecipientShipToName.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R30_RecipientShipToName]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R29_CustomerBillToCityStateZip]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R29_CustomerBillToCityStateZip] (
    [Id]                       INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                  INT          NULL,
    [RecordCode]               TINYINT      NOT NULL,
    [Sequence]                 SMALLINT     NOT NULL,
    [PONumber]                 VARCHAR (22) NOT NULL,
    [PurchaserCity]            VARCHAR (25) NOT NULL,
    [PurchaserStateOrProvince] VARCHAR (3)  NOT NULL,
    [PurchaserPostalCode]      VARCHAR (11) NOT NULL,
    [PurchaserCountry]         VARCHAR (3)  NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R29_CustomerBillToCityStateZip] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R29_CustomerBillToCityStateZip].[IX_PurchaseOrder_R29_CustomerBillToCityStateZip.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R29_CustomerBillToCityStateZip.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R29_CustomerBillToCityStateZip]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R29_CustomerBillToCityStateZip].[IX_PurchaseOrder_R29_CustomerBillToCityStateZip.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R29_CustomerBillToCityStateZip.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R29_CustomerBillToCityStateZip]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R27_CustomerBillToAddressLine]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R27_CustomerBillToAddressLine] (
    [Id]                   INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT          NULL,
    [RecordCode]           TINYINT      NOT NULL,
    [Sequence]             SMALLINT     NOT NULL,
    [PONumber]             VARCHAR (22) NOT NULL,
    [PurchaserAddressLine] VARCHAR (35) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R27_CustomerBillToAddressLine] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R27_CustomerBillToAddressLine].[IX_PurchaseOrder_R27_CustomerBillToAddressLine.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R27_CustomerBillToAddressLine.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R27_CustomerBillToAddressLine]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R27_CustomerBillToAddressLine].[IX_PurchaseOrder_R27_CustomerBillToAddressLine.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R27_CustomerBillToAddressLine.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R27_CustomerBillToAddressLine]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R26_CustomerBillToPhoneNumber]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R26_CustomerBillToPhoneNumber] (
    [Id]                   INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT          NULL,
    [RecordCode]           TINYINT      NOT NULL,
    [Sequence]             SMALLINT     NOT NULL,
    [PONumber]             VARCHAR (22) NOT NULL,
    [PurchaserPhonenumber] VARCHAR (25) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R26_CustomerBillToPhoneNumber] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R26_CustomerBillToPhoneNumber].[IX_PurchaseOrder_R26_CustomerBillToPhoneNumber.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R26_CustomerBillToPhoneNumber.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R26_CustomerBillToPhoneNumber]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R26_CustomerBillToPhoneNumber].[IX_PurchaseOrder_R26_CustomerBillToPhoneNumber.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R26_CustomerBillToPhoneNumber.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R26_CustomerBillToPhoneNumber]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R42_LineItemGiftMessage]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R42_LineItemGiftMessage] (
    [Id]                   INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT          NULL,
    [RecordCode]           TINYINT      NOT NULL,
    [Sequence]             SMALLINT     NOT NULL,
    [PONumber]             VARCHAR (22) NOT NULL,
    [LineLevelGiftMessage] VARCHAR (51) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R42_LineItemGiftMessage] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R42_LineItemGiftMessage].[IX_PurchaseOrder_R42_LineItemGiftMessage.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R42_LineItemGiftMessage.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R42_LineItemGiftMessage]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R42_LineItemGiftMessage].[IX_PurchaseOrder_R42_LineItemGiftMessage.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R42_LineItemGiftMessage.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R42_LineItemGiftMessage]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R41_AdditionalLineItem]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R41_AdditionalLineItem] (
    [Id]                           INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]                      INT            NULL,
    [RecordCode]                   TINYINT        NOT NULL,
    [Sequence]                     SMALLINT       NOT NULL,
    [PONumber]                     VARCHAR (22)   NOT NULL,
    [ClientItemListPrice]          DECIMAL (7, 2) NULL,
    [LineLevelBackorderCancelDate] DATE           NULL,
    [LineLevelGiftWrapCode]        VARCHAR (3)    NULL,
    [OrderQuantity]                SMALLINT       NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R41_AdditionalLineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R41_AdditionalLineItem].[IX_PurchaseOrder_R41_AdditionalLineItem.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R41_AdditionalLineItem.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R41_AdditionalLineItem]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R41_AdditionalLineItem].[IX_PurchaseOrder_R41_AdditionalLineItem.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R41_AdditionalLineItem.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R41_AdditionalLineItem]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R40_LineItem]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R40_LineItem] (
    [Id]                     INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT          NULL,
    [RecordCode]             TINYINT      NOT NULL,
    [Sequence]               SMALLINT     NOT NULL,
    [PONumber]               VARCHAR (22) NOT NULL,
    [LineItemPONumber]       VARCHAR (10) NOT NULL,
    [ItemNumber]             VARCHAR (20) NOT NULL,
    [LineLevelBackorderCode] CHAR (1)     NULL,
    [SpecialActionCode]      VARCHAR (2)  NULL,
    [ItemNumberType]         VARCHAR (2)  NULL,
    CONSTRAINT [PK_PurchaseOrder_R40_LineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R40_LineItem].[IX_PurchaseOrder_R40_LineItem.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R40_LineItem.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R40_LineItem]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R40_LineItem].[IX_PurchaseOrder_R40_LineItem.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R40_LineItem.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R40_LineItem]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R38_GiftMessage]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R38_GiftMessage] (
    [Id]          INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]     INT          NULL,
    [RecordCode]  TINYINT      NOT NULL,
    [Sequence]    SMALLINT     NOT NULL,
    [PONumber]    VARCHAR (22) NOT NULL,
    [GiftMessage] VARCHAR (51) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R38_GiftMessage] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R38_GiftMessage].[IX_PurchaseOrder_R38_GiftMessage.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R38_GiftMessage.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R38_GiftMessage]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R38_GiftMessage].[IX_PurchaseOrder_R38_GiftMessage.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R38_GiftMessage.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R38_GiftMessage]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R37_MArketingMessage]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R37_MArketingMessage] (
    [Id]               INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]          INT          NULL,
    [RecordCode]       TINYINT      NOT NULL,
    [Sequence]         SMALLINT     NOT NULL,
    [PONumber]         VARCHAR (22) NOT NULL,
    [MarketingMessage] VARCHAR (51) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R37_MArketingMessage] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R37_MArketingMessage].[IX_PurchaseOrder_R37_MArketingMessage.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R37_MArketingMessage.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R37_MArketingMessage]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R37_MArketingMessage].[IX_PurchaseOrder_R37_MArketingMessage.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R37_MArketingMessage.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R37_MArketingMessage]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R36_SpecialDeliveryInstructions]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R36_SpecialDeliveryInstructions] (
    [Id]                          INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                     INT          NULL,
    [RecordCode]                  TINYINT      NOT NULL,
    [Sequence]                    SMALLINT     NOT NULL,
    [PONumber]                    VARCHAR (22) NOT NULL,
    [SpecialDeliveryInstructions] VARCHAR (51) NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R36_SpecialDeliveryInstructions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R36_SpecialDeliveryInstructions].[IX_PurchaseOrder_R36_SpecialDeliveryInstructions.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R36_SpecialDeliveryInstructions.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R36_SpecialDeliveryInstructions]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R36_SpecialDeliveryInstructions].[IX_PurchaseOrder_R36_SpecialDeliveryInstructions.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R36_SpecialDeliveryInstructions.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R36_SpecialDeliveryInstructions]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R35_DropShipDetail]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R35_DropShipDetail] (
    [Id]                      INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]                 INT            NULL,
    [RecordCode]              TINYINT        NOT NULL,
    [Sequence]                SMALLINT       NOT NULL,
    [PONumber]                VARCHAR (22)   NOT NULL,
    [GiftWrapFeeAmount]       DECIMAL (6, 2) NULL,
    [SendConsumerEmail]       BIT            NOT NULL,
    [OrderLevelGiftIndicator] BIT            NOT NULL,
    [SuppressPriceIndicator]  BIT            NOT NULL,
    [OrderLevelGiftWrapCode]  VARCHAR (3)    NULL,
    CONSTRAINT [PK_PurchaseOrder_R35_DropShipDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R35_DropShipDetail].[IX_PurchaseOrder_R35_DropShipDetail.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R35_DropShipDetail.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R35_DropShipDetail]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R35_DropShipDetail].[IX_PurchaseOrder_R35_DropShipDetail.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R35_DropShipDetail.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R35_DropShipDetail]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R34_RecipientShippingRecordCityStateZip]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R34_RecipientShippingRecordCityStateZip] (
    [Id]                       INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                  INT          NULL,
    [RecordCode]               TINYINT      NOT NULL,
    [Sequence]                 SMALLINT     NOT NULL,
    [PONumber]                 VARCHAR (22) NOT NULL,
    [RecipientCity]            VARCHAR (25) NOT NULL,
    [RecipientStateOrProvince] VARCHAR (3)  NOT NULL,
    [RecipientPostalCode]      VARCHAR (11) NOT NULL,
    [Country]                  VARCHAR (3)  NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R34_RecipientShippingRecordCityStateZip] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R34_RecipientShippingRecordCityStateZip].[IX_PurchaseOrder_R34_RecipientShippingRecordCityStateZip.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R34_RecipientShippingRecordCityStateZip.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R34_RecipientShippingRecordCityStateZip]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R34_RecipientShippingRecordCityStateZip].[IX_PurchaseOrder_R34_RecipientShippingRecordCityStateZip.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R34_RecipientShippingRecordCityStateZip.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R34_RecipientShippingRecordCityStateZip]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip] (
    [Id]                       INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                  INT          NULL,
    [RecordCode]               TINYINT      NOT NULL,
    [Sequence]                 SMALLINT     NOT NULL,
    [PONumber]                 VARCHAR (22) NOT NULL,
    [RecipientCity]            VARCHAR (25) NOT NULL,
    [RecipientStateOrProvince] VARCHAR (3)  NOT NULL,
    [ZipOrPostalCode]          VARCHAR (11) NOT NULL,
    [Country]                  VARCHAR (3)  NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip].[IX_PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip].[IX_PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation] (
    [Id]                   INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]              INT          NULL,
    [RecordCode]           TINYINT      NOT NULL,
    [Sequence]             SMALLINT     NOT NULL,
    [PONumber]             VARCHAR (22) NOT NULL,
    [RecipientAddressLine] VARCHAR (35) NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation].[IX_PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation].[IX_PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]       INT          NULL,
    [RecordCode]    TINYINT      NOT NULL,
    [Sequence]      SMALLINT     NOT NULL,
    [PONumber]      VARCHAR (22) NOT NULL,
    [RecipientName] VARCHAR (35) NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress].[IX_PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress].[IX_PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R21_FreeFormVendor]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R21_FreeFormVendor] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]       INT          NULL,
    [RecordCode]    TINYINT      NOT NULL,
    [Sequence]      SMALLINT     NOT NULL,
    [PONumber]      VARCHAR (22) NOT NULL,
    [VendorMessage] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R21_FreeFormVendor] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R21_FreeFormVendor].[IX_PurchaseAcknowledgement_R21_FreeFormVendor.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R21_FreeFormVendor.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R21_FreeFormVendor]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R21_FreeFormVendor].[IX_PurchaseAcknowledgement_R21_FreeFormVendor.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R21_FreeFormVendor.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R21_FreeFormVendor]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R11_PurchaseOrderHeader]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R11_PurchaseOrderHeader] (
    [Id]                     INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT          NULL,
    [RecordCode]             TINYINT      NOT NULL,
    [Sequence]               SMALLINT     NOT NULL,
    [TOC]                    VARCHAR (13) NOT NULL,
    [PONumber]               VARCHAR (22) NOT NULL,
    [ICGShipToAccountNumber] VARCHAR (7)  NOT NULL,
    [ICGSAN]                 VARCHAR (7)  NOT NULL,
    [POStatus]               CHAR (1)     NOT NULL,
    [AcknowledgmentDate]     DATE         NOT NULL,
    [PODate]                 DATE         NOT NULL,
    [POCancellationDate]     DATE         NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R11_PurchaseOrderHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R11_PurchaseOrderHeader].[IX_PurchaseAcknowledgement_R11_PurchaseOrderHeader.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R11_PurchaseOrderHeader.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R11_PurchaseOrderHeader]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R11_PurchaseOrderHeader].[IX_PurchaseAcknowledgement_R11_PurchaseOrderHeader.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R11_PurchaseOrderHeader.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R11_PurchaseOrderHeader]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R90_FileTrailer]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R90_FileTrailer] (
    [Id]                        INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                   INT          NULL,
    [RecordCode]                TINYINT      NOT NULL,
    [Sequence]                  SMALLINT     NOT NULL,
    [TotalLineItemsinfile]      VARCHAR (22) NOT NULL,
    [TotalPurchaseOrderRecords] SMALLINT     NOT NULL,
    [TotalUnitsOrdered]         SMALLINT     NOT NULL,
    [RecordCount00To09]         SMALLINT     NOT NULL,
    [RecordCount10To19]         SMALLINT     NOT NULL,
    [RecordCount20To29]         SMALLINT     NOT NULL,
    [RecordCount30To39]         SMALLINT     NOT NULL,
    [RecordCount40To49]         SMALLINT     NOT NULL,
    [RecordCount50To59]         SMALLINT     NOT NULL,
    [RecordCount60To69]         SMALLINT     NOT NULL,
    [RecordCount70To79]         SMALLINT     NOT NULL,
    [RecordCount80To99]         SMALLINT     NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R90_FileTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R90_FileTrailer].[IX_PurchaseOrder_R90_FileTrailer.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R90_FileTrailer.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R90_FileTrailer]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R50_PurchaseOrderControl]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R50_PurchaseOrderControl] (
    [Id]                        INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                   INT          NULL,
    [RecordCode]                TINYINT      NOT NULL,
    [Sequence]                  SMALLINT     NOT NULL,
    [PONumber]                  VARCHAR (22) NOT NULL,
    [TotalPurchaseOrderRecords] SMALLINT     NOT NULL,
    [TotalLineItemsinfile]      SMALLINT     NOT NULL,
    [TotalUnitsOrdered]         SMALLINT     NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R50_PurchaseOrderControl] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R50_PurchaseOrderControl].[IX_PurchaseOrder_R50_PurchaseOrderControl.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R50_PurchaseOrderControl.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R50_PurchaseOrderControl]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R50_PurchaseOrderControl].[IX_PurchaseOrder_R50_PurchaseOrderControl.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R50_PurchaseOrderControl.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R50_PurchaseOrderControl]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R45_Imprint]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R45_Imprint] (
    [Id]                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]               INT          NULL,
    [RecordCode]            TINYINT      NOT NULL,
    [Sequence]              SMALLINT     NOT NULL,
    [PONumber]              VARCHAR (22) NOT NULL,
    [ImprintOrIndexCode]    CHAR (1)     NOT NULL,
    [ImprintTextandSymbols] VARCHAR (30) NULL,
    [ImprintFontCode]       CHAR (1)     NULL,
    [ImprintColorCode]      CHAR (1)     NULL,
    [ImprintPositionCode]   CHAR (1)     NULL,
    [ImprintAppendCode]     CHAR (1)     NULL,
    CONSTRAINT [PK_PurchaseOrder_R45_Imprint] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R45_Imprint].[IX_PurchaseOrder_R45_Imprint.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R45_Imprint.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R45_Imprint]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R45_Imprint].[IX_PurchaseOrder_R45_Imprint.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R45_Imprint.RecordSequencePO]
    ON [importCDFL].[PurchaseOrder_R45_Imprint]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R91_FileTrailer]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R91_FileTrailer] (
    [Id]                     INT      IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT      NULL,
    [RecordCode]             TINYINT  NOT NULL,
    [Sequence]               SMALLINT NOT NULL,
    [TotalLineItemsinFile]   SMALLINT NOT NULL,
    [TotalPOsAcknowledged]   SMALLINT NOT NULL,
    [TotalUnitsAcknowledged] SMALLINT NOT NULL,
    [RecordCount01To09]      SMALLINT NOT NULL,
    [RecordCount10To19]      SMALLINT NOT NULL,
    [RecordCount20To29]      SMALLINT NOT NULL,
    [RecordCount30To39]      SMALLINT NOT NULL,
    [RecordCount40To49]      SMALLINT NOT NULL,
    [RecordCount50To59]      SMALLINT NOT NULL,
    [RecordCount60To99]      SMALLINT NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R91_FileTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R91_FileTrailer].[IX_PurchaseAcknowledgement_R91_FileTrailer.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R91_FileTrailer.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R91_FileTrailer]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals] (
    [Id]                     INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT          NULL,
    [RecordCode]             TINYINT      NOT NULL,
    [Sequence]               SMALLINT     NOT NULL,
    [PONumber]               VARCHAR (22) NOT NULL,
    [RecordCount]            SMALLINT     NOT NULL,
    [TotalLineItemsinFile]   SMALLINT     NOT NULL,
    [TotalUnitsAcknowledged] SMALLINT     NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R59_PurchaseOrderControlTotals] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals].[IX_PurchaseAcknowledgement_R59_PurchaseOrderControlTotals.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R59_PurchaseOrderControlTotals.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals].[IX_PurchaseAcknowledgement_R59_PurchaseOrderControlTotals.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R59_PurchaseOrderControlTotals.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R59_PurchaseOrderControlTotals]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R44_ItemNumberOrPrice]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R44_ItemNumberOrPrice] (
    [Id]                  INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]             INT            NULL,
    [RecordCode]          TINYINT        NOT NULL,
    [Sequence]            SMALLINT       NOT NULL,
    [PONumber]            VARCHAR (22)   NOT NULL,
    [NetPrice]            DECIMAL (7, 2) NOT NULL,
    [ItemNumberType]      VARCHAR (10)   NULL,
    [DiscountedListPrice] DECIMAL (7, 2) NOT NULL,
    [TotalLineOrderQty]   SMALLINT       NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R44_ItemNumberOrPrice] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R44_ItemNumberOrPrice].[IX_PurchaseAcknowledgement_R44_ItemNumberOrPrice.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R44_ItemNumberOrPrice.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R44_ItemNumberOrPrice]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R44_ItemNumberOrPrice].[IX_PurchaseAcknowledgement_R44_ItemNumberOrPrice.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R44_ItemNumberOrPrice.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R44_ItemNumberOrPrice]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R43_AdditionalLineItem]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R43_AdditionalLineItem] (
    [Id]                             INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                        INT          NULL,
    [RecordCode]                     TINYINT      NOT NULL,
    [Sequence]                       SMALLINT     NOT NULL,
    [PONumber]                       VARCHAR (22) NOT NULL,
    [PublisherName]                  VARCHAR (20) NULL,
    [PublicationOrReleaseDate]       VARCHAR (10) NULL,
    [OriginalSeqNumber]              VARCHAR (5)  NOT NULL,
    [TotalQtyPredictedtoShipPrimary] VARCHAR (7)  NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R43_AdditionalLineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R43_AdditionalLineItem].[IX_PurchaseAcknowledgement_R43_AdditionalLineItem.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R43_AdditionalLineItem.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R43_AdditionalLineItem]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R43_AdditionalLineItem].[IX_PurchaseAcknowledgement_R43_AdditionalLineItem.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R43_AdditionalLineItem.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R43_AdditionalLineItem]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[BatchItem]...';


GO
CREATE TABLE [importCDFL].[BatchItem] (
    [Id]        TINYINT      IDENTITY (1, 1) NOT NULL,
    [BatchItem] VARCHAR (50) NULL,
    [Active]    BIT          NULL,
    CONSTRAINT [PK_BatchItem] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_BatchItem.BatchItem] UNIQUE NONCLUSTERED ([BatchItem] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R42_AdditionalLineItem]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R42_AdditionalLineItem] (
    [Id]          INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]     INT          NULL,
    [RecordCode]  TINYINT      NOT NULL,
    [Sequence]    SMALLINT     NOT NULL,
    [PONumber]    VARCHAR (22) NOT NULL,
    [Title]       VARCHAR (30) NOT NULL,
    [Author]      VARCHAR (20) NOT NULL,
    [BindingCode] CHAR (1)     NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R42_AdditionalLineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R42_AdditionalLineItem].[IX_PurchaseAcknowledgement_R42_AdditionalLineItem.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R42_AdditionalLineItem.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R42_AdditionalLineItem]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R42_AdditionalLineItem].[IX_PurchaseAcknowledgement_R42_AdditionalLineItem.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R42_AdditionalLineItem.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R42_AdditionalLineItem]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R41_AdditionalDetail]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R41_AdditionalDetail] (
    [Id]                     INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT          NULL,
    [RecordCode]             TINYINT      NOT NULL,
    [Sequence]               SMALLINT     NOT NULL,
    [PONumber]               VARCHAR (22) NOT NULL,
    [AvailabilityDate]       VARCHAR (10) NULL,
    [DCInventoryInformation] VARCHAR (40) NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R41_AdditionalDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R41_AdditionalDetail].[IX_PurchaseAcknowledgement_R41_AdditionalDetail.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R41_AdditionalDetail.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R41_AdditionalDetail]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R41_AdditionalDetail].[IX_PurchaseAcknowledgement_R41_AdditionalDetail.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R41_AdditionalDetail.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R41_AdditionalDetail]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R40_LineItem]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R40_LineItem] (
    [Id]               INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]          INT          NULL,
    [RecordCode]       TINYINT      NOT NULL,
    [Sequence]         SMALLINT     NOT NULL,
    [PONumber]         VARCHAR (22) NOT NULL,
    [LineItemPONumber] VARCHAR (10) NULL,
    [ItemNumber]       VARCHAR (20) NOT NULL,
    [POAStatusCode]    VARCHAR (2)  NOT NULL,
    [DCCode]           CHAR (1)     NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R40_LineItem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R40_LineItem].[IX_PurchaseAcknowledgement_R40_LineItem.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R40_LineItem.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R40_LineItem]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R40_LineItem].[IX_PurchaseAcknowledgement_R40_LineItem.RecordSequencePO]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R40_LineItem.RecordSequencePO]
    ON [importCDFL].[PurchaseAcknowledgement_R40_LineItem]([RecordCode] ASC, [Sequence] ASC, [PONumber] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R48_DetailTotal]...';


GO
CREATE TABLE [importCDFL].[Invoice_R48_DetailTotal] (
    [Id]                  INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]             INT          NULL,
    [DetailTotalRecord_1] VARCHAR (2)  NOT NULL,
    [Sequence]            SMALLINT     NOT NULL,
    [InvoiceNumber]       VARCHAR (8)  NOT NULL,
    [Title]               VARCHAR (16) NOT NULL,
    [ClientOrderID]       VARCHAR (22) NOT NULL,
    [LineItemIDNumber]    VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_Invoice_R48_DetailTotal] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R48_DetailTotal].[IX_Invoice_R48_DetailTotal.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R48_DetailTotal.RecordSequence]
    ON [importCDFL].[Invoice_R48_DetailTotal]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R46_InvoiceDetail]...';


GO
CREATE TABLE [importCDFL].[Invoice_R46_InvoiceDetail] (
    [Id]                 INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]            INT          NULL,
    [TitleRecord]        VARCHAR (2)  NOT NULL,
    [Sequence]           SMALLINT     NOT NULL,
    [InvoiceNumber]      VARCHAR (8)  NOT NULL,
    [ISBN13OrEANShipped] VARCHAR (14) NOT NULL,
    CONSTRAINT [PK_Invoice_R46_InvoiceDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R46_InvoiceDetail].[IX_Invoice_R46_InvoiceDetail.Sequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R46_InvoiceDetail.Sequence]
    ON [importCDFL].[Invoice_R46_InvoiceDetail]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R45_InvoiceDetail]...';


GO
CREATE TABLE [importCDFL].[Invoice_R45_InvoiceDetail] (
    [Id]                  INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]             INT            NULL,
    [DetailRecord]        VARCHAR (2)    NOT NULL,
    [Sequence]            SMALLINT       NOT NULL,
    [InvoiceNumber]       VARCHAR (8)    NOT NULL,
    [ISBN10Shipped]       VARCHAR (10)   NOT NULL,
    [QuantityShipped]     SMALLINT       NOT NULL,
    [IngramItemListPrice] DECIMAL (7, 2) NOT NULL,
    [Discount]            DECIMAL (4, 2) NOT NULL,
    [NetPriceOrCost]      DECIMAL (8, 2) NOT NULL,
    [MeteredDate]         DATE           NOT NULL,
    CONSTRAINT [PK_Invoice_R45_InvoiceDetail] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R45_InvoiceDetail].[IX_Invoice_R45_InvoiceDetail.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R45_InvoiceDetail.RecordSequence]
    ON [importCDFL].[Invoice_R45_InvoiceDetail]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[ShipNotice_CR_CompanyRecord]...';


GO
CREATE TABLE [importCDFL].[ShipNotice_CR_CompanyRecord] (
    [Id]                      INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]                 INT          NOT NULL,
    [CompanyRecordIdentifier] VARCHAR (2)  NOT NULL,
    [CompanyAccountIDNumber]  VARCHAR (10) NOT NULL,
    [TotalOrderCount]         SMALLINT     NOT NULL,
    [FileVersionNumber]       VARCHAR (10) NOT NULL,
    CONSTRAINT [PK_ShipNotice_CR_CompanyRecord] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[ShipNotice_CR_CompanyRecord].[IX_ShipNotice_CR_CompanyRecord.CompanyRecIDAcctID]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShipNotice_CR_CompanyRecord.CompanyRecIDAcctID]
    ON [importCDFL].[ShipNotice_CR_CompanyRecord]([CompanyRecordIdentifier] ASC, [CompanyAccountIDNumber] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R15_InvoiceHeader]...';


GO
CREATE TABLE [importCDFL].[Invoice_R15_InvoiceHeader] (
    [Id]                     INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]                INT         NULL,
    [InvoiceHeader]          VARCHAR (2) NOT NULL,
    [Sequence]               SMALLINT    NULL,
    [InvoiceNumber]          VARCHAR (8) NOT NULL,
    [CompanyAccountIDNumber] VARCHAR (7) NOT NULL,
    [WarehouseSAN]           VARCHAR (7) NOT NULL,
    [InvoiceDate]            DATE        NOT NULL,
    CONSTRAINT [PK_Invoice_R15_InvoiceHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R15_InvoiceHeader].[IX_Invoice_R15_InvoiceHeader.InvHeaderInvNumber]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R15_InvoiceHeader.InvHeaderInvNumber]
    ON [importCDFL].[Invoice_R15_InvoiceHeader]([InvoiceHeader] ASC, [InvoiceNumber] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R00_FileHeader]...';


GO
CREATE TABLE [importCDFL].[PurchaseOrder_R00_FileHeader] (
    [Id]                 INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]            INT          NOT NULL,
    [RecordCode]         TINYINT      NOT NULL,
    [Sequence]           SMALLINT     NOT NULL,
    [FileSourceSAN]      VARCHAR (7)  NOT NULL,
    [FileSourceName]     VARCHAR (13) NOT NULL,
    [CreationDate]       DATE         NOT NULL,
    [FIleName]           VARCHAR (22) NOT NULL,
    [FormatVersion]      VARCHAR (3)  NOT NULL,
    [IngramSAN]          VARCHAR (7)  NOT NULL,
    [VendorNameFlag]     CHAR (1)     NOT NULL,
    [ProductDescription] VARCHAR (4)  NOT NULL,
    CONSTRAINT [PK_PurchaseOrder_R00_FileHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseOrder_R00_FileHeader].[IX_PurchaseOrder_R00_FileHeader.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseOrder_R00_FileHeader.RecordSequence]
    ON [importCDFL].[PurchaseOrder_R00_FileHeader]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R02_FileHeader]...';


GO
CREATE TABLE [importCDFL].[PurchaseAcknowledgement_R02_FileHeader] (
    [Id]                    INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]               INT          NOT NULL,
    [RecordCode]            TINYINT      NOT NULL,
    [Sequence]              SMALLINT     NOT NULL,
    [FileSourceSAN]         VARCHAR (7)  NOT NULL,
    [FileSourceName]        VARCHAR (13) NOT NULL,
    [POACreationDate]       DATE         NOT NULL,
    [ElectronicControlUnit] VARCHAR (5)  NOT NULL,
    [Filename]              VARCHAR (17) NOT NULL,
    [FormatVersion]         VARCHAR (3)  NOT NULL,
    [DestinationSAN]        VARCHAR (7)  NOT NULL,
    [POAType]               CHAR (1)     NOT NULL,
    CONSTRAINT [PK_PurchaseAcknowledgement_R02_FileHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[PurchaseAcknowledgement_R02_FileHeader].[IX_PurchaseAcknowledgement_R02_FileHeader.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_PurchaseAcknowledgement_R02_FileHeader.RecordSequence]
    ON [importCDFL].[PurchaseAcknowledgement_R02_FileHeader]([RecordCode] ASC, [Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[ShipNotice_OD_OrderDetailRecord]...';


GO
CREATE TABLE [importCDFL].[ShipNotice_OD_OrderDetailRecord] (
    [Id]                                          INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]                                     INT            NULL,
    [OrderRecordIdentifier]                       VARCHAR (2)    NOT NULL,
    [ClientOrderID]                               VARCHAR (22)   NOT NULL,
    [ShippingWarehouseCode]                       VARCHAR (2)    NOT NULL,
    [IngramOrderEntryNumber]                      VARCHAR (10)   NOT NULL,
    [QuantityCancelled]                           SMALLINT       NULL,
    [ISBN10Ordered]                               VARCHAR (10)   NOT NULL,
    [ISBN10Shipped]                               VARCHAR (10)   NOT NULL,
    [QuantityPredicted]                           SMALLINT       NOT NULL,
    [QuantitySlashed]                             SMALLINT       NULL,
    [QuantityShipped]                             SMALLINT       NOT NULL,
    [ItemDetailStatusCode]                        VARCHAR (2)    NOT NULL,
    [TrackingNumber]                              VARCHAR (25)   NOT NULL,
    [SCAC]                                        VARCHAR (5)    NOT NULL,
    [IngramItemListPrice]                         NUMERIC (7, 2) NOT NULL,
    [NetOrDiscountedPrice]                        NUMERIC (7, 2) NOT NULL,
    [LineItemIDNumber]                            VARCHAR (10)   NOT NULL,
    [SSL]                                         VARCHAR (20)   NOT NULL,
    [Weight]                                      DECIMAL (9, 2) NOT NULL,
    [ShippingMethodCodeorSlashOrCancelReasonCode] VARCHAR (2)    NOT NULL,
    [ISBN13OrEAN]                                 VARCHAR (15)   NOT NULL,
    CONSTRAINT [PK_ShipNotice_OD_OrderDetailRecord ] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[ShipNotice_OD_OrderDetailRecord].[IX_ShipNotice_OD_OrderDetailRecord.OrderRecIDClientOrd]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShipNotice_OD_OrderDetailRecord.OrderRecIDClientOrd]
    ON [importCDFL].[ShipNotice_OD_OrderDetailRecord]([OrderRecordIdentifier] ASC, [ClientOrderID] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R01_InvoiceFileHeader]...';


GO
CREATE TABLE [importCDFL].[Invoice_R01_InvoiceFileHeader] (
    [Id]           INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]      INT          NOT NULL,
    [FileHeader]   VARCHAR (2)  NOT NULL,
    [Sequence]     SMALLINT     NOT NULL,
    [IngramSAN]    VARCHAR (12) NOT NULL,
    [FileSource]   VARCHAR (13) NOT NULL,
    [CreationDate] DATE         NOT NULL,
    [FileName]     VARCHAR (22) NOT NULL,
    CONSTRAINT [PK_Invoice_R01_InvoiceFileHeader] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R01_InvoiceFileHeader].[IX_Invoice_R01_InvoiceFileHeader.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R01_InvoiceFileHeader.RecordSequence]
    ON [importCDFL].[Invoice_R01_InvoiceFileHeader]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[ShipNotice_OR_OrderRecord]...';


GO
CREATE TABLE [importCDFL].[ShipNotice_OR_OrderRecord] (
    [Id]                    INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]               INT            NULL,
    [OrderRecordIdentifier] VARCHAR (2)    NOT NULL,
    [ClientOrderID]         VARCHAR (22)   NOT NULL,
    [OrderStatusCode]       VARCHAR (2)    NOT NULL,
    [OrderSubtotal]         DECIMAL (7, 2) NOT NULL,
    [OrderDiscountAmount]   DECIMAL (7, 2) NOT NULL,
    [SalesTax]              DECIMAL (7, 2) NOT NULL,
    [ShippingandHandling]   DECIMAL (7, 2) NOT NULL,
    [OrderTotal]            DECIMAL (7, 2) NOT NULL,
    [FreightCharge]         DECIMAL (7, 2) NOT NULL,
    [TotalItemDetailCount]  SMALLINT       NOT NULL,
    [ShipmentDate]          DATETIME       NOT NULL,
    [ConsumerPONumber]      VARCHAR (22)   NOT NULL,
    CONSTRAINT [PK_ShipNotice_OR_OrderRecord] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[ShipNotice_OR_OrderRecord].[IX_ShipNotice_OR_OrderRecord.OrderRecordID]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShipNotice_OR_OrderRecord.OrderRecordID]
    ON [importCDFL].[ShipNotice_OR_OrderRecord]([OrderRecordIdentifier] ASC);


GO
PRINT N'Creating [importCDFL].[Batch]...';


GO
CREATE TABLE [importCDFL].[Batch] (
    [Id]               INT           IDENTITY (1, 1) NOT NULL,
    [BatchItemId]      TINYINT       NULL,
    [VendorID]         VARCHAR (10)  NULL,
    [DateCreatedUTC]   DATETIME      NOT NULL,
    [DateProcessedUTC] DATETIME      NULL,
    [Filename]         VARCHAR (255) NULL,
    CONSTRAINT [PK_Batch] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R95_InvoiceFileTrailer]...';


GO
CREATE TABLE [importCDFL].[Invoice_R95_InvoiceFileTrailer] (
    [Id]                 INT         IDENTITY (1, 1) NOT NULL,
    [BatchId]            INT         NULL,
    [InvoiceFileTrailer] VARCHAR (2) NOT NULL,
    [Sequence]           SMALLINT    NOT NULL,
    [TotalTitles]        SMALLINT    NOT NULL,
    [TotalInvoices]      SMALLINT    NOT NULL,
    [TotalUnits]         SMALLINT    NOT NULL,
    CONSTRAINT [PK_Invoice_R95_InvoiceFileTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R95_InvoiceFileTrailer].[IX_Invoice_R95_InvoiceFileTrailer.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R95_InvoiceFileTrailer.RecordSequence]
    ON [importCDFL].[Invoice_R95_InvoiceFileTrailer]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R57_InvoiceTrailer]...';


GO
CREATE TABLE [importCDFL].[Invoice_R57_InvoiceTrailer] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]        INT            NULL,
    [InvoiceTrailer] VARCHAR (2)    NOT NULL,
    [Sequence]       SMALLINT       NOT NULL,
    [InvoiceNumber]  VARCHAR (8)    NOT NULL,
    [TotalNetPrice]  DECIMAL (9, 2) NOT NULL,
    [TotalShipping]  DECIMAL (7, 2) NOT NULL,
    [TotalHandling]  DECIMAL (7, 2) NOT NULL,
    [TotalGiftWrap]  DECIMAL (6, 2) NOT NULL,
    [TotalInvoice]   DECIMAL (9, 2) NOT NULL,
    CONSTRAINT [PK_Invoice_R57_InvoiceTrailer] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R57_InvoiceTrailer].[IX_Invoice_R57_InvoiceTrailer.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R57_InvoiceTrailer.RecordSequence]
    ON [importCDFL].[Invoice_R57_InvoiceTrailer]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R55_InvoiceTotals]...';


GO
CREATE TABLE [importCDFL].[Invoice_R55_InvoiceTotals] (
    [Id]                           INT          IDENTITY (1, 1) NOT NULL,
    [BatchId]                      INT          NULL,
    [InvoiceControlShippingRecord] VARCHAR (2)  NOT NULL,
    [Sequence]                     SMALLINT     NOT NULL,
    [InvoiceNumber]                VARCHAR (8)  NOT NULL,
    [InvoiceRecordCount]           SMALLINT     NOT NULL,
    [NumberofTitles]               SMALLINT     NOT NULL,
    [TotalNumberofUnits]           SMALLINT     NOT NULL,
    [BillofLadingNumber]           VARCHAR (10) NOT NULL,
    [TotalInvoiceWeight]           SMALLINT     NOT NULL,
    CONSTRAINT [PK_Invoice_R55_InvoiceTotals] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R55_InvoiceTotals].[IX_Invoice_R55_InvoiceTotals.Sequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R55_InvoiceTotals.Sequence]
    ON [importCDFL].[Invoice_R55_InvoiceTotals]([Sequence] ASC);


GO
PRINT N'Creating [importCDFL].[Invoice_R49_DetailTotalOrFreightAndFees]...';


GO
CREATE TABLE [importCDFL].[Invoice_R49_DetailTotalOrFreightAndFees] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [BatchId]           INT            NULL,
    [DetailTotalRecord] VARCHAR (2)    NOT NULL,
    [Sequence]          SMALLINT       NOT NULL,
    [InvoiceNumber]     VARCHAR (8)    NOT NULL,
    [TrackingNumber]    VARCHAR (25)   NOT NULL,
    [NetPrice]          DECIMAL (8, 2) NOT NULL,
    [Shipping]          DECIMAL (6, 2) NOT NULL,
    [Handling]          DECIMAL (7, 2) NOT NULL,
    [GiftWrap]          DECIMAL (6, 2) NOT NULL,
    [AmountDue]         DECIMAL (7, 2) NOT NULL,
    CONSTRAINT [PK_Invoice_R49_DetailTotalOrFreightAndFees] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [importCDFL].[Invoice_R49_DetailTotalOrFreightAndFees].[IX_Invoice_R49_DetailTotalOrFreightAndFees.RecordSequence]...';


GO
CREATE NONCLUSTERED INDEX [IX_Invoice_R49_DetailTotalOrFreightAndFees.RecordSequence]
    ON [importCDFL].[Invoice_R49_DetailTotalOrFreightAndFees]([Sequence] ASC);


GO
PRINT N'Creating [Logging].[SQLMessages]...';


GO
CREATE TABLE [Logging].[SQLMessages] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [DateTimeStamp] DATETIME       NULL,
    [ErrorMessage]  VARCHAR (2500) NULL,
    [ProcedureName] VARCHAR (200)  NULL,
    CONSTRAINT [PK_SQLMessages] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [MetaData].[IdentificationQualifer]...';


GO
CREATE TABLE [MetaData].[IdentificationQualifer] (
    [IqId]       INT            IDENTITY (1, 1) NOT NULL,
    [EDIId]      CHAR (4)       NOT NULL,
    [EDIVersion] CHAR (4)       NULL,
    [IDName]     VARCHAR (5)    NULL,
    [IDDescript] VARCHAR (4000) NULL,
    CONSTRAINT [PK_MetaData.IdentificationQualifer] PRIMARY KEY CLUSTERED ([IqId] ASC),
    CONSTRAINT [UQ_MetaData.IdentificationQualifier_EDIId] UNIQUE NONCLUSTERED ([EDIId] ASC, [EDIVersion] ASC, [IDName] ASC)
);


GO
PRINT N'Creating [MetaData].[CodeTypes]...';


GO
CREATE TABLE [MetaData].[CodeTypes] (
    [Id]               SMALLINT      IDENTITY (1, 1) NOT NULL,
    [VendorID]         VARCHAR (10)  NULL,
    [FileFormatID]     TINYINT       NULL,
    [CodeType]         VARCHAR (500) NULL,
    [AssociatedColumn] VARCHAR (100) NULL,
    [MaxChars]         TINYINT       NULL
);


GO
PRINT N'Creating [MetaData].[Codes]...';


GO
CREATE TABLE [MetaData].[Codes] (
    [Id]              SMALLINT       IDENTITY (1, 1) NOT NULL,
    [CodeTypeId]      SMALLINT       NOT NULL,
    [Code]            VARCHAR (100)  NULL,
    [CodeName]        VARCHAR (100)  NULL,
    [CodeDescription] VARCHAR (1000) NULL,
    CONSTRAINT [PK_Codes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [MetaData].[FileFormats]...';


GO
CREATE TABLE [MetaData].[FileFormats] (
    [Id]         TINYINT      IDENTITY (1, 1) NOT NULL,
    [FileFormat] VARCHAR (50) NOT NULL,
    [Vers]       VARCHAR (10) NULL,
    [Active]     BIT          NOT NULL,
    CONSTRAINT [PK_FIleFormat] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_FileFormat_FileFormat] UNIQUE NONCLUSTERED ([FileFormat] ASC, [Vers] ASC)
);


GO
PRINT N'Creating [MetaData].[VendorLocations]...';


GO
CREATE TABLE [MetaData].[VendorLocations] (
    [Id]                  INT           IDENTITY (1, 1) NOT NULL,
    [VendorId]            VARCHAR (20)  NULL,
    [LocationId]          VARCHAR (10)  NULL,
    [LocationNumber]      VARCHAR (5)   NULL,
    [VendorBillTo]        VARCHAR (12)  NULL,
    [VendorShipTo]        VARCHAR (12)  NULL,
    [SanAccount]          VARCHAR (12)  NULL,
    [LocationDescription] VARCHAR (250) NULL,
    [Active]              BIT           NOT NULL,
    [ShipToPassword]      VARCHAR (50)  NULL,
    [Program]             VARCHAR (10)  NULL,
    CONSTRAINT [PK_VendorLocationCodes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [MetaData].[CarrierCodesFromHPBcom]...';


GO
CREATE TABLE [MetaData].[CarrierCodesFromHPBcom] (
    [Id]              TINYINT       IDENTITY (1, 1) NOT NULL,
    [Code]            CHAR (3)      NULL,
    [CodeDescription] VARCHAR (100) NULL,
    [MediaType]       CHAR (1)      NULL,
    [CarrierScope]    CHAR (1)      NULL,
    CONSTRAINT [PK_CarrierCodesFromHPBcom] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [MetaData].[ContentErrors]...';


GO
CREATE TABLE [MetaData].[ContentErrors] (
    [Id]                 SMALLINT      IDENTITY (1, 1) NOT NULL,
    [VendorId]           VARCHAR (20)  NULL,
    [SourceTypeId]       TINYINT       NULL,
    [ErrorMessage]       VARCHAR (100) NULL,
    [ErrorDescription]   VARCHAR (255) NULL,
    [ErrorAction]        VARCHAR (255) NULL,
    [ErrorProtocol]      CHAR (3)      NULL,
    [Resendable]         CHAR (1)      NULL,
    [ModifyBeforeResend] CHAR (1)      NULL,
    CONSTRAINT [PK_IngramContentErrors] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [MetaData].[VendorCarrierTransformation]...';


GO
CREATE TABLE [MetaData].[VendorCarrierTransformation] (
    [Id]              INT          IDENTITY (1, 1) NOT NULL,
    [VendorId]        VARCHAR (20) NULL,
    [MetaDataCodeId]  SMALLINT     NOT NULL,
    [HPBcomCarrierId] TINYINT      NOT NULL,
    CONSTRAINT [PK_VendorCarrierTransformation] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [MetaData].[InvoiceTypes]...';


GO
CREATE TABLE [MetaData].[InvoiceTypes] (
    [Id]          TINYINT      IDENTITY (1, 1) NOT NULL,
    [InvoiceType] VARCHAR (20) NULL,
    CONSTRAINT [PK_InvoiceTypes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [BLK].[DF_InvoiceHeader_InsertDateTime]...';


GO
ALTER TABLE [BLK].[InvoiceHeader]
    ADD CONSTRAINT [DF_InvoiceHeader_InsertDateTime] DEFAULT (getutcdate()) FOR [InsertDateTime];


GO
PRINT N'Creating [BLK].[DF_InvoiceHeader_Processed]...';


GO
ALTER TABLE [BLK].[InvoiceHeader]
    ADD CONSTRAINT [DF_InvoiceHeader_Processed] DEFAULT ((0)) FOR [Processed];


GO
PRINT N'Creating [BLK].[DF_PurchaseOrderHeader_InsertDateTime]...';


GO
ALTER TABLE [BLK].[PurchaseOrderHeader]
    ADD CONSTRAINT [DF_PurchaseOrderHeader_InsertDateTime] DEFAULT (getutcdate()) FOR [InsertDateTime];


GO
PRINT N'Creating [BLK].[DF_PurchaseOrderHeader_Processed]...';


GO
ALTER TABLE [BLK].[PurchaseOrderHeader]
    ADD CONSTRAINT [DF_PurchaseOrderHeader_Processed] DEFAULT ((0)) FOR [Processed];


GO
PRINT N'Creating [BLK].[DF_AcknowledgeHeader_InsertDateTime]...';


GO
ALTER TABLE [BLK].[AcknowledgeHeader]
    ADD CONSTRAINT [DF_AcknowledgeHeader_InsertDateTime] DEFAULT (getutcdate()) FOR [InsertDateTime];


GO
PRINT N'Creating [BLK].[DF_AcknowledgeHeader_Processed]...';


GO
ALTER TABLE [BLK].[AcknowledgeHeader]
    ADD CONSTRAINT [DF_AcknowledgeHeader_Processed] DEFAULT ((0)) FOR [Processed];


GO
PRINT N'Creating [BLK].[DF_ShipmentHeader_InsertDateTime]...';


GO
ALTER TABLE [BLK].[ShipmentHeader]
    ADD CONSTRAINT [DF_ShipmentHeader_InsertDateTime] DEFAULT (getutcdate()) FOR [InsertDateTime];


GO
PRINT N'Creating [BLK].[DF_ShipmentHeader_Processed]...';


GO
ALTER TABLE [BLK].[ShipmentHeader]
    ADD CONSTRAINT [DF_ShipmentHeader_Processed] DEFAULT ((0)) FOR [Processed];


GO
PRINT N'Creating [CDF].[DF_Acknowledgements_DateTimeInsertedUTC]...';


GO
ALTER TABLE [CDF].[Acknowledgements]
    ADD CONSTRAINT [DF_Acknowledgements_DateTimeInsertedUTC] DEFAULT (getutcdate()) FOR [DateTimeInsertedUTC];


GO
PRINT N'Creating [CDF].[DF_Invoices_DateTimeInsertedUTC]...';


GO
ALTER TABLE [CDF].[Invoices]
    ADD CONSTRAINT [DF_Invoices_DateTimeInsertedUTC] DEFAULT (getutcdate()) FOR [DateTimeInsertedUTC];


GO
PRINT N'Creating [CDF].[DF_Orders_AllowBackorder]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_AllowBackorder] DEFAULT ((0)) FOR [AllowBackorder];


GO
PRINT N'Creating [CDF].[DF_Orders_AllowDistributionSplits]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_AllowDistributionSplits] DEFAULT ((0)) FOR [AllowDistributionSplits];


GO
PRINT N'Creating [CDF].[DF_Orders_GiftWrap]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_GiftWrap] DEFAULT ((0)) FOR [GiftWrap];


GO
PRINT N'Creating [CDF].[DF_Orders_SuppressPrice]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_SuppressPrice] DEFAULT ((0)) FOR [SuppressPrice];


GO
PRINT N'Creating [CDF].[DF_Orders_ImprintBook]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_ImprintBook] DEFAULT ((0)) FOR [ImprintBook];


GO
PRINT N'Creating [CDF].[DF_Orders_DateTimeInsertedUTC]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_DateTimeInsertedUTC] DEFAULT (getutcdate()) FOR [DateTimeInsertedUTC];


GO
PRINT N'Creating [CDF].[DF_Orders_DistributionCenterOverride]...';


GO
ALTER TABLE [CDF].[Orders]
    ADD CONSTRAINT [DF_Orders_DistributionCenterOverride] DEFAULT (' ') FOR [DistributionCenterOverride];


GO
PRINT N'Creating [CDF].[DF_Shipments_DateTimeInsertedUTC]...';


GO
ALTER TABLE [CDF].[Shipments]
    ADD CONSTRAINT [DF_Shipments_DateTimeInsertedUTC] DEFAULT (getutcdate()) FOR [DateTimeInsertedUTC];


GO
PRINT N'Creating [EDI].[DF_TransactionLog_DateRecordInsertedUTC]...';


GO
ALTER TABLE [EDI].[TransactionLog]
    ADD CONSTRAINT [DF_TransactionLog_DateRecordInsertedUTC] DEFAULT (getutcdate()) FOR [DateRecordInsertedUTC];


GO
PRINT N'Creating [EDI].[DF_TransactionLogMessage_DateInsertedUTC]...';


GO
ALTER TABLE [EDI].[TransactionLogMessages]
    ADD CONSTRAINT [DF_TransactionLogMessage_DateInsertedUTC] DEFAULT (getutcdate()) FOR [DateInsertedUTC];


GO
PRINT N'Creating [ImportBBV3].[DF_BatchItem.Active]...';


GO
ALTER TABLE [ImportBBV3].[BatchItem]
    ADD CONSTRAINT [DF_BatchItem.Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [ImportBBV3].[DF_Batch_DateCreated]...';


GO
ALTER TABLE [ImportBBV3].[Batch]
    ADD CONSTRAINT [DF_Batch_DateCreated] DEFAULT (getutcdate()) FOR [DateCreatedUTC];


GO
PRINT N'Creating [importCDFL].[DF_BatchItem.Active]...';


GO
ALTER TABLE [importCDFL].[BatchItem]
    ADD CONSTRAINT [DF_BatchItem.Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [importCDFL].[DF_BAtch_DateCreated]...';


GO
ALTER TABLE [importCDFL].[Batch]
    ADD CONSTRAINT [DF_BAtch_DateCreated] DEFAULT (getutcdate()) FOR [DateCreatedUTC];


GO
PRINT N'Creating [Logging].[DF_SQLMessages_DateTimeStamp]...';


GO
ALTER TABLE [Logging].[SQLMessages]
    ADD CONSTRAINT [DF_SQLMessages_DateTimeStamp] DEFAULT (getutcdate()) FOR [DateTimeStamp];


GO
PRINT N'Creating [MetaData].[DF_FileFormat_Active]...';


GO
ALTER TABLE [MetaData].[FileFormats]
    ADD CONSTRAINT [DF_FileFormat_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [MetaData].[DF_VendorLocationCodes_Active]...';


GO
ALTER TABLE [MetaData].[VendorLocations]
    ADD CONSTRAINT [DF_VendorLocationCodes_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [BLK].[FK_PurchaseOrderDetail~PurchaseOrderHeader]...';


GO
ALTER TABLE [BLK].[PurchaseOrderDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_PurchaseOrderDetail~PurchaseOrderHeader] FOREIGN KEY ([OrderId]) REFERENCES [BLK].[PurchaseOrderHeader] ([OrderId]);


GO
PRINT N'Creating [BLK].[FK_InvoiceDetail~InvoiceHeader]...';


GO
ALTER TABLE [BLK].[InvoiceDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_InvoiceDetail~InvoiceHeader] FOREIGN KEY ([InvoiceId]) REFERENCES [BLK].[InvoiceHeader] ([InvoiceId]);


GO
PRINT N'Creating [BLK].[FK_AcknowledgeDetail~AcknowledgeHeader]...';


GO
ALTER TABLE [BLK].[AcknowledgeDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_AcknowledgeDetail~AcknowledgeHeader] FOREIGN KEY ([AckId]) REFERENCES [BLK].[AcknowledgeHeader] ([AckId]);


GO
PRINT N'Creating [BLK].[FK_ShipmentDetail~AcknowledgeHeader]...';


GO
ALTER TABLE [BLK].[ShipmentDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_ShipmentDetail~AcknowledgeHeader] FOREIGN KEY ([ShipmentID]) REFERENCES [BLK].[ShipmentHeader] ([ShipmentID]);


GO
PRINT N'Creating [CDF].[FK_Acknowledgements_Fulfillment]...';


GO
ALTER TABLE [CDF].[Acknowledgements] WITH NOCHECK
    ADD CONSTRAINT [FK_Acknowledgements_Fulfillment] FOREIGN KEY ([FulfillmentId]) REFERENCES [CDF].[Fulfillment] ([Id]);


GO
PRINT N'Creating [CDF].[FK_Fulfillment_TransactionType]...';


GO
ALTER TABLE [CDF].[Fulfillment] WITH NOCHECK
    ADD CONSTRAINT [FK_Fulfillment_TransactionType] FOREIGN KEY ([LastTransactionId]) REFERENCES [EDI].[TransactionType] ([Id]);


GO
PRINT N'Creating [CDF].[FK_Invoices_Fulfillment]...';


GO
ALTER TABLE [CDF].[Invoices] WITH NOCHECK
    ADD CONSTRAINT [FK_Invoices_Fulfillment] FOREIGN KEY ([FulfillmentId]) REFERENCES [CDF].[Fulfillment] ([Id]);


GO
PRINT N'Creating [CDF].[FK_Orders_Fulfillment]...';


GO
ALTER TABLE [CDF].[Orders] WITH NOCHECK
    ADD CONSTRAINT [FK_Orders_Fulfillment] FOREIGN KEY ([FulfillmentId]) REFERENCES [CDF].[Fulfillment] ([Id]);


GO
PRINT N'Creating [CDF].[FK_Orders_OrderStatus]...';


GO
ALTER TABLE [CDF].[Orders] WITH NOCHECK
    ADD CONSTRAINT [FK_Orders_OrderStatus] FOREIGN KEY ([OrderStatusId]) REFERENCES [CDF].[OrderStatus] ([Id]);


GO
PRINT N'Creating [CDF].[FK_Shipment_Fulfillment]...';


GO
ALTER TABLE [CDF].[Shipments] WITH NOCHECK
    ADD CONSTRAINT [FK_Shipment_Fulfillment] FOREIGN KEY ([FulfillmentId]) REFERENCES [CDF].[Fulfillment] ([Id]);


GO
PRINT N'Creating [EDI].[FK_TransacdtionLogMessages~TransactionLog]...';


GO
ALTER TABLE [EDI].[TransactionLogMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_TransacdtionLogMessages~TransactionLog] FOREIGN KEY ([TransLogID]) REFERENCES [EDI].[TransactionLog] ([Id]);


GO
PRINT N'Creating [EDI].[FK_TransactionLogOrderNumbers~TransctionLog]...';


GO
ALTER TABLE [EDI].[TransactionLogOrderNumbers] WITH NOCHECK
    ADD CONSTRAINT [FK_TransactionLogOrderNumbers~TransctionLog] FOREIGN KEY ([TransactionLogId]) REFERENCES [EDI].[TransactionLog] ([Id]);


GO
PRINT N'Creating [ImportBBV3].[FK_Batch~BatchItem]...';


GO
ALTER TABLE [ImportBBV3].[Batch] WITH NOCHECK
    ADD CONSTRAINT [FK_Batch~BatchItem] FOREIGN KEY ([BatchItemId]) REFERENCES [ImportBBV3].[BatchItem] ([Id]);


GO
PRINT N'Creating [importCDFL].[FK_Batch~BatchItem]...';


GO
ALTER TABLE [importCDFL].[Batch] WITH NOCHECK
    ADD CONSTRAINT [FK_Batch~BatchItem] FOREIGN KEY ([BatchItemId]) REFERENCES [importCDFL].[BatchItem] ([Id]);


GO
PRINT N'Creating [MetaData].[FK_VendorCarrierTransformation~CarrierCodesFromHPBcom]...';


GO
ALTER TABLE [MetaData].[VendorCarrierTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_VendorCarrierTransformation~CarrierCodesFromHPBcom] FOREIGN KEY ([HPBcomCarrierId]) REFERENCES [MetaData].[CarrierCodesFromHPBcom] ([Id]);


GO
PRINT N'Creating [MetaData].[FK_VendorCarrierTransformation~Codes]...';


GO
ALTER TABLE [MetaData].[VendorCarrierTransformation] WITH NOCHECK
    ADD CONSTRAINT [FK_VendorCarrierTransformation~Codes] FOREIGN KEY ([MetaDataCodeId]) REFERENCES [MetaData].[Codes] ([Id]);


GO
PRINT N'Creating [BLK].[vuAcknowledgements]...';


GO
CREATE VIEW [BLK].[vuAcknowledgements]
AS
	SELECT AH.AckId, AH.PONumber, AH.IssueDate, AD.ItemIdentifier, QuantityBackordered, QuantityCancelled, QuantityOrdered, QuantityShipped, AD.AckItemId, AD.ItemStatusCode, AH.ShipFromLoc
	FROM BLK.AcknowledgeHeader AH
		INNER JOIN BLK.AcknowledgeDetail AD
			ON AH.AckId = AD.AckId
GO
PRINT N'Creating [BLK].[vuPurchaseOrders]...';


GO
CREATE VIEW BLK.vuPurchaseOrders
AS
	SELECT OH.OrderId, OH.PONumber, OH.IssueDate, OD.ItemIdentifier, OD.Quantity, OD.[LineNo], OD.OrderItemId
	FROM BLK.PurchaseOrderHeader OH
		INNER JOIN BLK.PurchaseOrderDetail OD
			ON OH.OrderId = OD.OrderId
GO
PRINT N'Creating [CDF].[vueFulfillmentStatus]...';


GO
CREATE VIEW [CDF].[vueFulfillmentStatus]
AS
	SELECT	 f.Id 
			,f.VendorId 
			,f.SourceApplication 
			,f.OrderNumber 
			,CAST(CASE WHEN f.QuantityOrdered <= (f.QuantityCancelled + f.QuantitySlashed) THEN 1 ELSE 0 END AS BIT) AS OrderCancelled
			,f.QuantityOrdered - (f.QuantityBackordered + f.QuantityCancelled + f.QuantityShipped) AS QuantityRemaining
			,f.QuantityOrdered 
			,f.QuantityConfirmed 
			,f.QuantityBackordered 
			,f.QuantityCancelled 
			,f.QuantitySlashed 
			,f.QuantityShipped 
			,f.QuantityInvoiced
			,f.LastModifiedDateUTC 
			,f.LastModifiedUTCOffset 
			,DATEADD(MINUTE, f.LastModifiedUTCOffset, f.LastModifiedDateUTC) AS LastModifiedDateCentral
			-- ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
			,CAST(CASE WHEN o.Id IS NOT NULL THEN 1  ELSE 0 END AS BIT) AS HasOrder
			,o.DateTimeInsertedUTC AS OrderInsertedUTC
			,o.BillToName
			,o.BillToAddress
			,o.BillToCity
			,o.BillToState
			,o.BillToZip
			,o.BillToCountryCode
			,o.ShipToName
			,o.ShipToAddress
			,o.ShipToCity
			,o.ShipToState
			,o.ShipToZip
			,o.ShipToCountryCode
			,o.GiftMessage
			,o.MarketingMessage
			,o.OrderProductId
			,o.OrderProductTypeId
			,o.OrderProductDescription
			,o.SpecialDeliveryInstructions
			-- ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
			,CAST(CASE WHEN a.Id IS NOT NULL THEN 1 ELSE 0 END AS BIT) AS HasAcknowledgement
			,a.DateTimeInsertedUTC AS AcknowledgementInsertedUTC 
			,a.DateAcknowledgementRecorded 
			,a.AcknowledgementStatusCode
			,CodesPOA.CodeDescription as POAStatusCode
			,a.VendorAcknowledgeMessage
			-- ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
			,CAST(CASE WHEN s.Id IS NOT NULL THEN 1 ELSE 0 END AS BIT) AS HasShipment
			,s.DateTimeInsertedUTC AS ShipmentInsertedUTC
			,s.DateTimeShipmentRecorded
			,s.DateOrderShipped
			,s.CarrierName
			,s.CarrierType
			,s.PackageNumberTracking
			,s.PackageNumberSecondary
			,s.PackageWeight
			,s.ShipmentNumber
			,s.ShipmentISBNorEAN
			,s.ReasonCode
			,CodesASN.CodeDescription
			-- ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
			,CAST(CASE WHEN i.FulfillmentId IS NOT NULL THEN 1 ELSE 0 END AS BIT) AS HasInvoice
			,i.DateTimeInsertedUTC AS InvoiceInsertedUTC
			,i.DateTimeInvoiceRecorded
			,i.InvoiceNumber
			,i.InvoiceAmountDue
			-- ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬						
	FROM CDF.Fulfillment f
		LEFT JOIN CDF.Orders o
			ON f.Id = o.FulfillmentId
		LEFT JOIN CDF.Acknowledgements a
			ON f.Id = a.FulfillmentId
		LEFT JOIN CDF.Shipments s
			ON f.Id = s.FulfillmentId
		LEFT JOIN (	SELECT  i0.FulfillmentId,min(i0.DateTimeInvoiceRecorded) as DateTimeInvoiceRecorded, b.InvoiceNumber, SUM(i0.InvoicePriceList) as InvoicePriceList
							,SUM(i0.Invoicediscount) as InvoiceDiscount,SUM(i0.InvoicePriceNet) as IvnvoicePriceNet, SUM(i0.InvoicePriceShipping) as InvoicePriceShipping
							,SUM(i0.invoicePriceHandling) as InvoicePriceHandling,SUM(i0.InvoicePriceGiftWrapFee) as InvoicePriceGiftWrapFee, SUM(i0.InvoiceAmountDue) as InvoiceAmountDue
							,MIN(i0.DateTimeInsertedUTC) as DateTimeInsertedUTC
							,i0.InvoiceClientOrderNumber			
					FROM cdf.Invoices i0
						LEFT JOIN  (SELECT i1.*
									FROM cdf.invoices i1
										LEFT JOIN MetaData.InvoiceTypes it
											ON i1.InvoiceTitle = it.InvoiceType
									WHERE it.Id IS NULL) b
							ON i0.FulfillmentId = b.FulfillmentId
					GROUP BY i0.FulfillmentId, i0.InvoiceClientOrderNumber, b.InvoiceNumber ) i
			ON f.Id = i.FulfillmentId
		LEFT JOIN (	SELECT c.*
					FROM metadata.codes c
						INNER JOIN metadata.CodeTypes ct
							on c.CodeTypeId = ct.id
								and ct.CodeType = 'POA Status'
						INNER JOIN MetaData.FileFormats ff
							on ct.FileFormatId = ff.Id
								and ff.FileFormat = 'CDFL'
					) CodesPOA
			ON a.AcknowledgementStatusCode = CodesPOA.Code 
		LEFT JOIN (	SELECT c.*
					FROM metadata.codes c
						INNER JOIN metadata.CodeTypes ct
							on c.CodeTypeId = ct.id
								and ct.CodeType in ('ASN Order and Item Status','ASN Slash/Cancel Quantity Reason Codes','Shipping Options-ASN')
						INNER JOIN MetaData.FileFormats ff
							on ct.FileFormatId = ff.Id
								and ff.FileFormat = 'CDFL'
					) CodesASN
			ON s.ReasonCode = CodesASN.Code
GO
PRINT N'Creating [CDF].[vueFulfillmentAcknowledgements]...';


GO


CREATE VIEW [CDF].[vueFulfillmentAcknowledgements]
AS
	SELECT	 f.Id ,f.LastTransactionId ,f.VendorId ,f.SourceApplication ,f.OrderNumber ,f.QuantityOrdered ,f.QuantityConfirmed ,f.QuantityBackordered 
			,f.QuantityCancelled ,f.QuantitySlashed ,f.QuantityShipped ,f.QuantityInvoiced,f.LastModifiedDateUTC ,f.LastModifiedUTCOffset 
			,a.Id AS AcnowledgementId,a.DateAcknowledgementRecorded ,a.AcknowledgementNumber ,a.DatePurchaseOrder ,a.DateOrderCancellation ,a.AcknowledgementId 
			,a.VendorReferenceNumberType ,a.VendorReferenceNumber ,a.TerminalOrderControl ,a.POStatus ,a.VendorAcknowledgeMessage ,a.ModifiedShipToName 
			,a.ModifiedShipToAddress ,a.ModifiedShipToCity ,a.ModifiedShipToState,a.ModifiedShipToZip ,a.ModdifiedShipToCountry,a.AcknowledgementStatusCode 
			,a.AcknowledgementDistributionCenter ,a.DateAvailable ,a.DistrbutionInventory ,a.Publisher ,a.Title ,a.Author ,a.BindingCode ,a.QuantityPredicted 
			,a.PriceNet ,a.PriceDiscountedList,a.DateTimeInsertedUTC AS AcknowledgementInsertedUTC 
	FROM CDF.Fulfillment f
		INNER JOIN CDF.Acknowledgements a
			ON f.Id = a.FulfillmentId
GO
PRINT N'Creating [CDF].[vueFulfillmentInvoices]...';


GO


CREATE VIEW [CDF].[vueFulfillmentInvoices]
AS
	SELECT	 f.Id ,f.LastTransactionId ,f.VendorId ,f.SourceApplication ,f.OrderNumber ,f.QuantityOrdered ,f.QuantityConfirmed ,f.QuantityBackordered 
			,f.QuantityCancelled ,f.QuantitySlashed ,f.QuantityShipped ,f.QuantityInvoiced,f.LastModifiedDateUTC ,f.LastModifiedUTCOffset 
			,i.Id AS InvoiceId,i.DateTimeInvoiceRecorded ,i.InvoiceNumber,i.CurrencyCode ,i.CountryCode,i.InvoicePriceList ,i.InvoiceDiscount ,i.InvoicePriceNet 
			,i.InvoicePriceShipping	,i.InvoicePriceHAndling ,i.InvoicePriceGiftWrapFee  ,i.InvoiceAmountDue  ,i.DateMetered ,i.InvoiceTitle ,i.InvoiceClientOrderNumber 
			,i.LineItemNumber ,i.BillOfLadingNumber ,i.DateTimeInsertedUTC AS InvoiceInsertedUTC

	FROM CDF.Fulfillment f
		INNER JOIN CDF.Invoices i
			ON f.Id = i.FulfillmentId
GO
PRINT N'Creating [CDF].[vueFulfillmentOrders]...';


GO
CREATE VIEW CDF.vueFulfillmentOrders
AS
SELECT        f.Id, f.LastTransactionId, f.VendorId, f.SourceApplication, f.OrderNumber, f.QuantityOrdered, f.QuantityConfirmed, f.QuantityBackordered, f.QuantityCancelled, f.QuantitySlashed, f.QuantityShipped, f.QuantityInvoiced, 
                         f.LastModifiedDateUTC, f.LastModifiedUTCOffset, o.Id AS OrderId, o.DateOrderRecorded, o.OrderStatusId, o.AllowBackorder, o.AllowDistributionSplits, o.OrderProductTypeId, o.OrderProductId, o.OrderProductDescription, 
                         o.PromotionCode, o.VendorOrderType, o.OrderTaxSales, o.OrderTaxFreight, o.BillToName, o.BillToPhone, o.BillToAddress, o.BillToCity, o.BillToState, o.BillToZip, o.BillToCountryCode, o.ShipToName, o.ShipToPhone, 
                         o.ShipToAddress, o.ShipToCity, o.ShipToState, o.ShipToZip, o.ShipToCountryCode, o.GiftWrap, o.GiftWrapFee, o.SuppressPrice, o.GiftMessage, o.SpecialDeliveryInstructions, o.MarketingMessage, o.ImprintBook, 
                         o.ImprintIndexCode, o.ImprintText, o.ImprintFont, o.ImprintColor, o.ImprintPosition, o.OrderUnitPrice, o.DateTimeInsertedUTC AS OrderInsertedUTC, o.GreenLight
FROM            CDF.Fulfillment AS f INNER JOIN
                         CDF.Orders AS o ON f.Id = o.FulfillmentId
GO
PRINT N'Creating [CDF].[vueFulfillments]...';


GO

CREATE VIEW [CDF].[vueFulfillments]
AS
SELECT        f.Id, f.LastTransactionId, f.VendorId, f.SourceApplication, f.OrderNumber, f.QuantityOrdered, f.QuantityConfirmed, f.QuantityBackordered, f.QuantityCancelled, f.QuantitySlashed, f.QuantityShipped, f.QuantityInvoiced, 
                         f.LastModifiedDateUTC, f.LastModifiedUTCOffset, o.Id AS OrderId, o.DateOrderRecorded, o.OrderStatusId, o.AllowBackorder, o.AllowDistributionSplits, o.OrderProductTypeId, o.OrderProductId, o.OrderProductDescription, 
                         o.PromotionCode, o.VendorOrderType, o.OrderTaxSales, o.OrderTaxFreight, o.BillToName, o.BillToPhone, o.BillToAddress, o.BillToCity, o.BillToState, o.BillToZip, o.BillToCountryCode, o.ShipToName, o.ShipToPhone, 
                         o.ShipToAddress, o.ShipToCity, o.ShipToState, o.ShipToZip, o.ShipToCountryCode, o.GiftWrap, o.GiftWrapFee, o.SuppressPrice, o.GiftMessage, o.SpecialDeliveryInstructions, o.MarketingMessage, o.ImprintBook, 
                         o.ImprintIndexCode, o.ImprintText, o.ImprintFont, o.ImprintColor, o.ImprintPosition, o.OrderUnitPrice, o.DateTimeInsertedUTC AS OrderInsertedUTC, a.Id AS AcnowledgementId, a.DateAcknowledgementRecorded, o.GreenLight, 
                         a.AcknowledgementNumber, a.DatePurchaseOrder, a.DateOrderCancellation, a.AcknowledgementId, a.VendorReferenceNumberType, a.VendorReferenceNumber, a.TerminalOrderControl, a.POStatus, 
                         a.VendorAcknowledgeMessage, a.ModifiedShipToName, a.ModifiedShipToAddress, a.ModifiedShipToCity, a.ModifiedShipToState, a.ModifiedShipToZip, a.ModdifiedShipToCountry, a.AcknowledgementStatusCode, 
                         a.AcknowledgementDistributionCenter, a.DateAvailable, a.DistrbutionInventory, a.Publisher, a.Title, a.Author, a.BindingCode, a.QuantityPredicted, a.PriceNet, a.PriceDiscountedList, 
                         a.DateTimeInsertedUTC AS AcknowledgementInsertedUTC, s.Id AS ShipmentId, s.DateTimeShipmentRecorded, s.ShipmentNumber, s.ShipmentSubtotal, s.ShipmentDiscount, s.ShipmentTaxSales, s.ShipmentFees, 
                         s.ShipmentFreight, s.ShipmentTotal, s.DateOrderShipped, s.CustomerOrderReference, s.CarrierType, s.CarrierName, s.PackageNumberTracking, s.PackageNumberSecondary, s.ShipmentPriceList, s.ShipmentPriceNet, 
                         s.PackageWeight, s.ReasonCode, s.ShipmentISBNorEAN, s.DateTimeInsertedUTC AS ShipmentInsertedUTC, i.Id AS InvoiceId, i.DateTimeInvoiceRecorded, i.InvoiceNumber, i.CurrencyCode, i.CountryCode, i.InvoicePriceList, 
                         i.InvoiceDiscount, i.InvoicePriceNet, i.InvoicePriceShipping, i.InvoicePriceHAndling, i.InvoicePriceGiftWrapFee, i.InvoiceAmountDue, i.DateMetered, i.InvoiceTitle, i.InvoiceClientOrderNumber, i.LineItemNumber, 
                         i.BillOfLadingNumber, i.DateTimeInsertedUTC AS InvoiceInsertedUTC
FROM            CDF.Fulfillment AS f LEFT OUTER JOIN
                         CDF.Orders AS o ON f.Id = o.FulfillmentId LEFT OUTER JOIN
                         CDF.Acknowledgements AS a ON f.Id = a.FulfillmentId LEFT OUTER JOIN
                         CDF.Shipments AS s ON f.Id = s.FulfillmentId LEFT OUTER JOIN
                         CDF.Invoices AS i ON f.Id = i.FulfillmentId
GO
PRINT N'Creating [CDF].[vueFulfillmentShipments]...';


GO


CREATE VIEW [CDF].[vueFulfillmentShipments]
AS
	SELECT	 f.Id ,f.LastTransactionId ,f.VendorId ,f.SourceApplication ,f.OrderNumber ,f.QuantityOrdered ,f.QuantityConfirmed ,f.QuantityBackordered 
			,f.QuantityCancelled ,f.QuantitySlashed ,f.QuantityShipped ,f.QuantityInvoiced,f.LastModifiedDateUTC ,f.LastModifiedUTCOffset 
			,s.Id AS ShipmentId,s.DateTimeShipmentRecorded ,s.ShipmentNumber ,s.ShipmentSubtotal  ,s.ShipmentDiscount  ,s.ShipmentTaxSales  ,s.ShipmentFees  
			,s.ShipmentFreight  ,s.ShipmentTotal  ,s.DateOrderShipped ,s.CustomerOrderReference ,s.CarrierType  ,s.CarrierName ,s.PackageNumberTracking
			,s.PackageNumberSecondary,s.ShipmentPriceList  ,s.ShipmentPriceNet  ,s.PackageWeight ,s.ReasonCode ,s.ShipmentISBNorEAN 
			,s.DateTimeInsertedUTC AS ShipmentInsertedUTC
	FROM CDF.Fulfillment f
		INNER JOIN CDF.Shipments s
			ON f.Id = s.FulfillmentId
GO
PRINT N'Creating [CDF].[vwWebInvoices]...';


GO



CREATE VIEW [CDF].[vwWebInvoices]
AS
	SELECT	 i.InvoiceNumber
			,CASE WHEN i.InvoiceTitle IS NOT NULL THEN  ISNULL(inv.InvoiceType,'PRODUCT') ELSE NULL END AS InvoiceType
			,o.DateOrderRecorded
			,f.VendorId
			,f.OrderNumber
			,ISNULL(s.PackageNumberTracking,'') AS ShippingNumber
			,COALESCE(a.ModifiedShipToName, o.ShiptoName) AS ShipToName
			,COALESCE(a.ModifiedShipToAddress, o.ShipToAddress) AS ShipToAddress
			,COALESCE(a.ModifiedShipToCity, o.ShipToCity) AS ShipToCity
			,COALESCE(a.ModifiedShipToState, o.ShipToState) AS ShipToState
			,COALESCE(a.ModifiedShipToZip, o.ShipToZip) AS ShipToZip
			,COALESCE(a.ModdifiedShipToCountry, o.ShipToCountryCode) AS ShipToCountry
			, 1 AS TotalLines
			,ISNULL(f.QuantityInvoiced,0) AS QuanityInvoiced
			,ISNULL(i.InvoiceAmountDue,0) AS InvoiceAmountDue
			,ISNULL(i.InvoicePriceShipping,0) AS InvoicePriceShipping
			,a.AcknowledgementDistributionCenter
			,a.QuantityPredicted
	FROM cdf.Fulfillment f
		INNER JOIN cdf.orders o
			ON f.id = o.FulfillmentId
		INNER JOIn cdf.Acknowledgements a
			ON f.id = a.FulfillmentId
		LEFT JOIN cdf.Shipments s
			ON f.id = s.FulfillmentId
		LEFT JOIN cdf.Invoices i
			ON f.id = i.FulfillmentId
		LEFT JOIN MetaData.InvoiceTypes inv
			ON LTRIM(RTRIM(i.InvoiceTitle)) = inv.InvoiceType
GO
PRINT N'Creating [MetaData].[vwHPBCOM_VendorCarrierTransformations]...';


GO
CREATE view [MetaData].[vwHPBCOM_VendorCarrierTransformations]
as
select	 cc.Id as HPBComId, ct.Id as CodeTypeId,ff.Id as FileFormatId
		,cc.Code as HPBcomCode, cc.CodeDescription as HPBcomCodeDescription, cc.MediaType, cc.CarrierScope
		,ct.AssociatedColumn, ct.CodeType, ct.VendorID, ct.MaxChars
		,c.Code as VendorCode
		,ff.FileFormat, ff.Vers, ff.Active

		
from MetaData.VendorCarrierTransformation vct
	inner join MetaData.Codes c
		on vct.MetaDataCodeId = c.id
	inner join MetaData.CarrierCodesFromHPBcom cc
		on cc.id = vct.HPBcomCarrierId
	inner join MetaData.CodeTypes ct
		on c.CodeTypeId = ct.id
			and vct.VendorId = ct.VendorID
	inner join MetaData.FileFormats ff
		on ct.FileFormatId = ff.id
GO
PRINT N'Creating [dbo].[810_INV_DTL]...';


GO


	CREATE VIEW [dbo].[810_INV_DTL]
		AS
			SELECT	 InvoiceItemId
					,InvoiceId
					,CAST([LineNo] AS NVARCHAR(10)) AS [LineNo]
					,CAST(ItemIdCode AS NVARCHAR(5)) AS ItemIDCode
					,CAST(ItemIdentifier AS NVARCHAR(20)) AS ItemIdentifier
					,CAST(ItemDesc AS NVARCHAR(250)) AS ItemDesc
					,InvoiceQty
					,UnitPrice
					,CAST(DiscountPrice AS NVARCHAR(10)) AS DiscountPrice
					,CAST(DiscountCode AS NVARCHAR(10)) AS Discountcode
					,CAST(DiscountPct AS NVARCHAR(10)) AS DiscountPct
					,CAST(RetailPrice AS NVARCHAR(10)) AS RetailPrice
			FROM BLK.InvoiceDetail
GO
PRINT N'Creating [dbo].[810_INV_HDR]...';


GO

CREATE VIEW [dbo].[810_INV_HDR]
			AS
			SELECT	 [InvoiceId] 
					,CAST([InvoiceNo] AS NVARCHAR(20)) AS [InvoiceNo]
					,CAST([IssueDate] AS DATETIME) AS [IssueDate]
					,CAST([VendorId] AS NVARCHAR(20)) [VendorID]
					,CAST([PONumber] AS NCHAR(6)) [PONumber]
					,CAST([ReferenceNo] AS NVARCHAR(20)) AS [ReferenceNo]
					,CAST([ShipToLoc] AS NVARCHAR(5)) AS [ShipToLoc]
					,CAST([ShipToSAN] AS NVARCHAR(12)) AS [ShipToSAN]
					,CAST([BillToLoc] AS NVARCHAR(5)) AS [BillToLoc]
					,CAST([BillToSAN] AS NVARCHAR(12)) AS [BillToSAN]
					,CAST([ShipFromLoc] AS NVARCHAR(5)) AS [ShipFromLoc]
					,CAST([ShipFromSAN] AS NVARCHAR(12)) AS [ShipFromSAN]
					,CAST([TotalLines] AS INT) AS [TotalLines]
					,[TotalQuantity] AS [TotalQty]
					,[TotalPayable] 
					,CAST([CurrencyCode] AS NVARCHAR(5)) AS [CurrencyCode]
					,[InsertDateTime]
					,[Processed]
					,[ProcessedDateTime]
					,[InvoiceACKSent]
					,CAST([InvoiceAckNo] AS NVARCHAR(10)) AS [InvoiceAckNo]
					,CAST([GSNo] AS NVARCHAR(10)) AS [GSNo]
			FROM BLK.InvoiceHeader
GO
PRINT N'Creating [dbo].[850_PO_DTL]...';


GO

				CREATE VIEW [dbo].[850_PO_DTL]
			AS
				SELECT	 [OrderItemId] AS [ItemOrdID]
						,[OrderId] AS [OrdID]
						,CAST([LineNo] AS NVARCHAR(10)) AS [LineNo]
						,[Quantity] AS [Qty]
						,CAST([UnitOfMeasure] AS NCHAR(3)) AS [UOM]
						,CAST([UnitPrice] AS NVARCHAR(10)) AS [UnitPrice]
						,CAST([PriceCode] AS NVARCHAR(10)) AS [PriceCode]
						,CAST([ItemIDCode] AS NVARCHAR(5)) AS [ItemIDCode]
						,CAST([ItemIdentifier] AS NVARCHAR(20)) AS [ItemIdentifier]
						,CAST([ItemFillTerms] AS NVARCHAR(30)) AS [ItemFillTerms]
						,CAST([XActionCode] AS NVARCHAR(10)) AS [XActionCode]
						,CAST([FillAmount] AS NVARCHAR(10)) AS [FillAmount]
				FROM BLK.PurchaseOrderDetail
GO
PRINT N'Creating [dbo].[850_PO_HDR]...';


GO

CREATE VIEW [dbo].[850_PO_HDR]
		AS
			SELECT	 [OrderId] AS [OrdID]
					,CAST([PONumber] AS CHAR(6)) AS [PONumber]
					,[IssueDate]
					,CAST([VendorID] AS NVARCHAR(20)) AS [VendorID]
					,CAST([ShipToLoc] AS NCHAR(5)) AS [ShipToLoc]
					,CAST([ShipToSAN] AS NVARCHAR(12)) AS [ShipToSAN]
					,CAST([BillToLoc] AS NCHAR(5)) AS [BillToLoc]
					,CAST([BillToSAN] AS NVARCHAR(12)) AS [BillToSAN]
					,CAST([ShipFromLoc] AS NCHAR(5)) AS [ShipFromLoc]
					,CAST([ShipFromSAN] AS NVARCHAR(12)) AS [ShipFromSAN]
					,[TotalLines]
					,[TotalQuantity] AS [TotalQty]
					,[InsertDateTime]
					,[Processed]
					,[ProcessedDateTime]
			FROM BLK.PurchaseOrderHeader
GO
PRINT N'Creating [dbo].[855_ACK_DTL]...';


GO

CREATE VIEW [dbo].[855_ACK_DTL]
	AS 
		SELECT	 [AckItemId] AS [ItemAckID]
				,[AckId]
				,CAST([LineNo] AS NVARCHAR(10)) AS [LineNo]
				,CAST([LineStatusCode] AS NVARCHAR(10)) AS [LineStatusCode]
				,CAST([ItemStatusCode] AS NVARCHAR(10)) AS [ItemStatusCode]
				,CAST([UnitOfMeasure] AS NVARCHAR(3)) AS [UOM]
				,CAST([QuantityOrdered] AS INT) AS [OrdQty]
				,CAST([QuantityShipped] AS INT) AS [ShipQty]
				,CAST([QuantityCancelled] AS INT) AS [CanceledQty]	
				,CAST([QuantityBackordered] AS INT) AS [BackOrdQty]
				,CAST([UnitPrice] AS NVARCHAR(10)) AS [UnitPrice]
				,CAST([PriceCode] AS NVARCHAR(10)) AS [PriceCode]
				,CAST([CurrencyCode] AS NVARCHAR(5)) AS [CurrencyCode]
				,CAST([ItemIdCode] AS NVARCHAR(5)) AS [ItemIdCode]
				,CAST([ItemIdentifier] AS NVARCHAR(20)) AS [ItemIdentifier]
				,CAST([ItemDesc] AS NVARCHAR(250)) AS [ItemDesc]
				,CAST([EDIFileID] AS INT) AS [EDIFileID]
				,CAST([EDILineNumber] AS INT) AS [EDILineNumber]
		FROM [BLK].[AcknowledgeDetail]
GO
PRINT N'Creating [dbo].[855_ACK_HDR]...';


GO

		CREATE VIEW [dbo].[855_ACK_HDR]
		AS
			SELECT	 [AckId]
					,CAST([PONumber] AS CHAR(6)) AS [PONumber]
					,[IssueDate]
					,CAST([VendorId] AS NVARCHAR(20)) AS [VendorID]
					,CAST([ReferenceNo] AS NVARCHAR(20)) AS [ReferenceNo] 
					,CAST([ShipToLoc] AS NVARCHAR(5)) AS [ShipToLoc]
					,CAST([ShipToSAN] AS NVARCHAR(12))  AS [ShipToSAN]
					,CAST([BillToLoc] AS NVARCHAR(5))  AS [BillToLoc]
					,CAST([BillToSAN] AS NVARCHAR(12)) AS [BillToSAN]
					,CAST([ShipFromLoc] AS NVARCHAR(5))  AS [ShipFromLoc]
					,CAST([ShipFromSAN] AS NVARCHAR(12))  AS [ShipFromSAN]
					,CAST([TotalLines] AS INT) AS [TotalLines]
					,CAST([TotalQuantity] AS INT) AS [TotalQty]
					,CAST([CurrencyCode] AS NVARCHAR(5)) AS [CurrencyCode]
					,[InsertDateTime]
					,[Processed]			
					,[ProcessedDateTime]
					,[ResponseACKSent]
					,CAST([ResponseAckNo] AS NVARCHAR(10)) AS [ResponseAckNo]
					,CAST([GSNo] AS NVARCHAR(10)) AS [GSNo]
			FROM BLK.AcknowledgeHeader
GO
PRINT N'Creating [dbo].[856_ASN_DTL]...';


GO

	CREATE VIEW [dbo].[856_ASN_DTL]
			AS
				SELECT	 [ShipmentItemID] AS [ItemShipID]
						,[ShipmentID] AS [ShipID]
						,CAST([LineNo] AS NVARCHAR(10)) AS [LineNo]
						,CAST([ItemIdCode] AS NVARCHAR(50)) AS [ItemIDCode]
						,CAST([ItemIdentifier] AS NVARCHAR(20)) AS [ItemIdentifier]
						,CAST([ItemDesc] AS NVARCHAR(250)) AS [ItemDesc]
						,[QuantityShipped] AS [ShipQty]
						,CAST([PackageNo] AS NVARCHAR(30)) AS [PackageNo]
						,CAST([TrackingNo] AS NVARCHAR(30)) AS [TrackingNo]
				FROM BLK.ShipmentDetail
GO
PRINT N'Creating [dbo].[856_ASN_HDR]...';


GO

	CREATE VIEW [dbo].[856_ASN_HDR]
			AS
				SELECT	 [ShipmentID] AS [ShipID]
						,CAST([PONumber] AS CHAR(6)) AS [PONumber]
						,CAST([ASNNo] AS NVARCHAR(20)) AS [ASNNo]
						,[IssueDate]
						,CAST([VendorID] AS NVARCHAR(20)) AS [VendorID]
						,CAST([ReferenceNo] AS NVARCHAR(20)) AS [ReferenceNo]
						,CAST([ShipToLoc] AS NCHAR(5)) AS [ShipToLoc]
						,CAST([ShipToSAN] AS NVARCHAR(12)) AS [ShipToSAN]
						,CAST([BillToLoc] AS NCHAR(5)) AS [BillToLoc]
						,CAST([BillToSAN] AS NVARCHAR(12)) AS [BillToSAN]
						,CAST([ShipFromLoc] AS NCHAR(5)) AS [ShipFromLoc]
						,CAST([ShipFromSAN] AS NVARCHAR(12)) AS [ShipFromSAN]
						,CAST([Carrier] AS NVARCHAR(20)) AS [Carrier]
						,[TotalLines]
						,[TotalQuantity] AS [TotalQty]
						,CAST([CurrencyCode] AS NVARCHAR(5)) AS [CurrencyCode]
						,[InsertDateTime]
						,[Processed]
						,[ProcessedDateTime]
						,[ASNACKSent]
						,CAST([ASNAckNo] AS NVARCHAR(10)) AS [ASNAckNo]
						,CAST([GSNo] AS NVARCHAR(10)) AS [GSNo]
				FROM [BLK].[ShipmentHeader]
GO
PRINT N'Creating [dbo].[Vendor_SAN_Codes]...';


GO


CREATE VIEW [dbo].[Vendor_SAN_Codes]
AS
	SELECT	 CAST(VendorId AS VARCHAR(10)) AS VendorId
			,CAST(VendorName AS VARCHAR(70)) AS VendorName
			,CAST(SANCode AS VARCHAR(12)) AS SANCode
			,CAST(CASE WHEN PO__BULK != '' THEN 1 ELSE 0 END AS BIT) AS [850Enabled]
			,CAST(CASE WHEN POA_BULK != '' THEN 1 ELSE 0 END AS BIT) AS [855Enabled]
			,CAST(CASE WHEN ASN_BULK != '' THEN 1 ELSE 0 END AS BIT) AS [810Enabled]
			,CAST(CASE WHEN INV_BULK != '' THEN 1 ELSE 0 END AS BIT) AS [856Enabled]
			,CAST(CASE WHEN FA__BULK != '' THEN 1 ELSE 0 END AS BIT) AS [997Enabled]
			,CAST(ISNULL(Notes,'') AS NVARCHAR(80)) AS Notes
			,CAST(Community AS NVARCHAR(50)) AS Community
			,CAST(Processor AS NVARCHAR(20)) AS Processor
			,CAST(ParentFolder AS NVARCHAR(10)) AS ParentFolder
			,CAST(EDIVersion AS NVARCHAR(10)) AS EDIVersion
			,CAST(CASE WHEN INV_FA != '' THEN 1 ELSE 0 END AS BIT) AS Invoice997
			,CAST(DftBackOrd AS BIT) AS DftBackOrd
			,CAST(InHouseOnly AS BIT) AS InHouseOnly
			,CAST(CASE WHEN ACK_FA != '' THEN 1 ELSE 0 END AS BIT) AS ACK997
			,CAST(CASE WHEN ASN_FA != '' THEN 1 ELSE 0 END AS BIT) AS ASN997
			,CAST([Binary] AS BIT) AS Binary
			,CAST(ISAControlNumber AS BIGINT) AS ISAControlNo
	from edi.ApplicationMaster
GO
PRINT N'Altering [dbo].[EDIfn_GetInvoiceACKDtls]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Return PO details in single string
-- =============================================
ALTER FUNCTION [dbo].[EDIfn_GetInvoiceACKDtls]
(
	@invoice varchar(10)
)
RETURNS varchar(max)
AS
BEGIN

	----testing
	--declare @invoice varchar(20)
	--set @invoice = '1083499475'
	--declare @refno varchar(20)
	--set @refno='000000084'

	declare @lines varchar(max)
	declare @version varchar(10)
	set @version = isnull((select distinct c.EDIVersion from dbo.[810_Inv_Hdr] h inner join dbo.Vendor_SAN_Codes c on h.VendorID=c.VendorID where h.InvoiceNo=@invoice),'')

	if @version = '3060' 
		begin
			select @lines = coalesce(@lines + '', '') + 'AK2*810*'+ case when h.VendorID='IDSCHOLDIS' then right((convert(varchar(6),h.InvoiceAckNo)),4) else right((convert(varchar(6),d.[LineNo])),4) end
				+'~'+ CHAR(13) + CHAR(10) + 'AK5*A~' + CHAR(13) + CHAR(10)
			from dbo.[810_Inv_Hdr] h with(nolock) inner join dbo.[810_Inv_Dtl] d with(nolock) on h.InvoiceID=d.InvoiceID
			where h.InvoiceACKSent=0 and h.InvoiceNo=@invoice
			order by case when h.VendorID!='IDSCHOLDIS' then cast(d.[LineNo] as int) else right((convert(varchar(6),h.InvoiceAckNo)),4) end
		end
	else if @version = '4010'
		begin
			select @lines = coalesce(@lines + '', '') + 'AK2*810*'+(convert(varchar(10),h.InvoiceAckNo))+'~'+ CHAR(13) + CHAR(10) + 'AK5*A~' + CHAR(13) + CHAR(10)
			from dbo.[810_Inv_Hdr] h with(nolock) --inner join dbo.[810_Inv_Dtl] d with(nolock) on h.InvoiceID=d.InvoiceID
			where h.InvoiceACKSent=0 and h.InvoiceNo=@invoice
			--order by d.[LineNo] 
		end
		
	--select @lines
	---- Return the result of the function
	RETURN @lines
END
GO
PRINT N'Altering [dbo].[EDIfn_GetPODetails]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <10/9/2013>
-- Description:	<Return PO details in single string
-- =============================================
ALTER FUNCTION [dbo].[EDIfn_GetPODetails]
(
	@PO varchar(10)
)
RETURNS varchar(max)
AS
BEGIN
	/*
		Testing
			declare @PO varchar(20)
			set @PO = '212999'
	*/
	DECLARE	 @lines VARCHAR(MAX)
			,@version VARCHAR(10)
			,@vendor VARCHAR(30)
			,@CRLF VARCHAR(2) = CHAR(13) + CHAR(10)

	SET @version = ISNULL((SELECT DISTINCT vsc.EDIVersion FROM dbo.[850_PO_HDR] h INNER JOIN dbo.Vendor_SAN_Codes vsc ON h.VendorID=vsc.VendorID WHERE h.PONumber=@PO),'')
	SET @vendor = (SELECT DISTINCT VendorID FROM dbo.[850_PO_HDR] WHERE PONumber=@PO)

	
	IF (@version = '3060' AND @vendor!='IDHMHDISTR') OR @vendor='IDMACMDIST'
		BEGIN
			SELECT	 @lines = COALESCE(@lines + '', '') 
					+ 'PO1*'+CONVERT(VARCHAR(3) ,d.[LineNo])+'*'+CONVERT(VARCHAR(6),d.Qty)+'*EA*'+d.UnitPrice+'*NT*'+d.ItemIDCode+'*'+d.ItemIdentifier+'~'+ @CRLF
					+'IT8*'+d.ItemFillTerms+'*0*'+CAST(REPLACE(d.Qty*CAST(d.UnitPrice AS MONEY),'.','') AS VARCHAR(12))+'~' +@CRLF
			FROM dbo.[850_PO_Hdr] h WITH(NOLOCK)
				INNER JOIN dbo.[850_PO_Dtl] d WITH(NOLOCK)
					ON h.OrdID=d.OrdID
			WHERE h.Processed=0 
				AND h.PONumber=@PO
			ORDER BY CAST(d.[LineNo] AS INT)
		end
	ELSE IF @version = '3060' AND @vendor = 'IDHMHDISTR'
		BEGIN
			SELECT @lines = COALESCE(@lines + '', '') 
					+ 'PO1|'+CONVERT(VARCHAR(3),d.[LineNo])+'|'+CONVERT(VARCHAR(6),d.Qty)+'|EA|'+d.UnitPrice+'|NT|'+d.ItemIDCode+'|'+d.ItemIdentifier+''+ @CRLF
					+ 'IT8|'+d.ItemFillTerms+'|0|'+CAST(REPLACE(d.Qty*CAST(d.UnitPrice AS MONEY),'.','')AS VARCHAR(12))+'' +@CRLF
			FROM dbo.[850_PO_HDR] h WITH(NOLOCK)
				INNER JOIN dbo.[850_PO_DTL] d WITH(NOLOCK)
					ON h.OrdID=d.OrdID
			WHERE h.Processed=0 
				AND h.PONumber=@PO
			ORDER BY CAST(d.[LineNo] AS INT)
		END
	ELSE IF @version = '4010'
		BEGIN
			SELECT @lines = COALESCE(@lines + '', '') 
					+ 'PO1*'+CONVERT(VARCHAR(3),d.[LineNo])+'*'+CONVERT(VARCHAR(6),d.Qty)+'*EA*'+d.UnitPrice+'*NT*'+d.ItemIDCode+'*'+d.ItemIdentifier+'~'+ @CRLF
			FROM dbo.[850_PO_HDR] h WITH(NOLOCK)
				INNER JOIN dbo.[850_PO_DTL] d WITH(NOLOCK)
					ON h.OrdID=d.OrdID
			WHERE h.Processed=0 
				AND h.PONumber=@PO
			ORDER BY CAST(d.[LineNo] AS INT)
		END	
	-- Return the result of the function
	RETURN @lines
END
GO
PRINT N'Altering [dbo].[EDIfn_GetResponseACKDtls]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Return PO details in single string.....>
-- =============================================
ALTER FUNCTION [dbo].[EDIfn_GetResponseACKDtls]
(
	@ponum VARCHAR(10)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	/*
		TESTING
			declare @ponum varchar(20)
			set @ponum = '218000'
			declare @refno varchar(20)
			set @refno='000000002'
	*/
	DECLARE	 @lines VARCHAR(MAX)
			,@version VARCHAR(10)
			,@CRLF VARCHAR(2) = CHAR(13) + CHAR(10)
	SET @version = ISNULL((SELECT DISTINCT c.EDIVersion FROM dbo.[855_Ack_Hdr] h INNER JOIN dbo.Vendor_SAN_Codes c ON h.VendorID=c.VendorID WHERE h.PONumber=@ponum),'')
	IF @version = '3060' 
		BEGIN
			SELECT	 @lines = COALESCE(@lines + '', '') 
					+ 'AK2*855*'+ CASE WHEN h.VendorID='IDSCHOLDIS' THEN RIGHT((CONVERT(VARCHAR(6),h.ResponseAckNo)),4) ELSE RIGHT((CONVERT(VARCHAR(6),d.[LineNo])),4) END +'~'+ @CRLF + 'AK5*A~' + @CRLF
			FROM dbo.[855_Ack_Hdr] h WITH(NOLOCK) 
				INNER JOIN dbo.[855_Ack_Dtl] d WITH(NOLOCK) 
					ON h.AckID=d.AckID
			WHERE h.ResponseACKSent=0 
				AND h.PONumber=@ponum
			ORDER BY CASE WHEN h.VendorID!='IDSCHOLDIS' THEN CAST(d.[LineNo] AS INT) ELSE RIGHT((CONVERT(VARCHAR(6),h.ResponseAckNo)),4) END
		END
	ELSE IF @version = '4010'
		BEGIN
			SELECT	 @lines = COALESCE(@lines + '', '') 
					+ 'AK2*855*'+(CONVERT(VARCHAR(10),h.PONumber))+'~'+ @CRLF 
					+ 'AK5*A~' + @CRLF
			FROM dbo.[855_Ack_Hdr] h WITH(NOLOCK) 
				--inner join .[810_Inv_Dtl] d with(nolock) on h.InvoiceID=d.InvoiceID
			WHERE h.ResponseACKSent=0 and h.PONumber=@ponum
				--order by d.[LineNo] 
		END
	RETURN @lines
END
GO
PRINT N'Altering [dbo].[EDIfn_GetShipNoticeACKDtls]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Return PO details in single string>
-- =============================================
ALTER FUNCTION [dbo].[EDIfn_GetShipNoticeACKDtls]
(
	 @ponum VARCHAR(10)	
	,@asnNo VARCHAR(10)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	/*
		TESTING:
			DECLARE	 @asnNo VARCHAR(20) = '1083499475'
					,@refno VARCHAR(20) = '000000084'
	*/
	DECLARE	 @lines VARCHAR(MAX)
			,@version VARCHAR(10)
			,@CRLF VARCHAR(2) = CHAR(13) + CHAR(10)
	SET @version = ISNULL((SELECT DISTINCT c.EDIVersion FROM dbo.[856_ASN_Hdr] h INNER JOIN dbo.Vendor_SAN_Codes c ON h.VendorID=c.VendorID WHERE h.PONumber=@ponum AND h.ASNNo=@asnNo),'')

	IF @version = '3060' 
		BEGIN
			SELECT	 @lines = COALESCE(@lines + '', '') 
					+ 'AK2*856*'+ CASE WHEN h.VendorID='IDSCHOLDIS' THEN RIGHT((CONVERT(VARCHAR(6),h.ASNAckNo)),4) ELSE RIGHT((CONVERT(VARCHAR(6),d.[LineNo])),4) END +'~'+ @CRLF 
					+ 'AK5*A~' + @CRLF
			FROM dbo.[856_ASN_Hdr] h WITH(NOLOCK) 
				INNER JOIN dbo.[856_ASN_Dtl] d WITH(NOLOCK) 
					ON h.ShipID=d.ShipID
			WHERE h.ASNACKSent=0 
				AND h.PONumber=@ponum 
				AND h.ASNNo=@asnNo
			ORDER BY CASE WHEN h.VendorID!='IDSCHOLDIS' THEN CAST(d.[LineNo] AS INT) ELSE RIGHT((CONVERT(VARCHAR(6),h.ASNAckNo)),4) END
		END
	ELSE IF @version = '4010'
		BEGIN
			SELECT	 @lines = COALESCE(@lines + '', '') + 'AK2*856*'+(CONVERT(VARCHAR(10),h.ASNNo))+'~'+ @CRLF
					+'AK5*A~' + @CRLF
			FROM dbo.[856_ASN_Hdr] h WITH(NOLOCK) 
				--INNER JOIN dbo.[810_Inv_Dtl] d WITH(NOLOCK) ON h.InvoiceID=d.InvoiceID
			WHERE h.ASNACKSent=0 
				AND h.PONumber=@ponum 
				AND h.ASNNo=@asnNo
			--ORDER BY d.[LineNo] 
		END		
	RETURN @lines
END
GO
PRINT N'Altering [dbo].[CDF_BT_CheckMissingResponses]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8/25/2017>
-- Description:	<Send Missing BT CDF response Email.....>
-- =============================================
ALTER PROCEDURE [dbo].[CDF_BT_CheckMissingResponses]
AS
BEGIN
	SET NOCOUNT ON;
	
	----testing......
	--declare @time int
	--set @time = -99999
	--------.........

	if exists (select oh.OrderNumber,oh.IssueDateTime,oh.ShipToName 
				from BakerTaylor.dbo.order_Header oh with(nolock)
				where oh.OrderNumber not like '%test%' 
				and oh.OrderNumber in (select BuyersOrderReference from BakerTaylor.dbo.order_shipnotice_ItemDetail with(nolock) where BuyersOrderReference=oh.OrderNumber)
					and oh.OrderNumber not in (select OrderResponseNumber from BakerTaylor.dbo.order_response_Header with(nolock) where OrderResponseNumber=oh.OrderNumber))
		begin
			--select oh.OrderNumber,oh.IssueDateTime,oh.ShipToName 
			--from BakerTaylor..order_Header oh
			--where oh.OrderNumber not like '%test%' and oh.OrderNumber in (select BuyersOrderReference from BakerTaylor..order_shipnotice_ItemDetail where BuyersOrderReference=oh.OrderNumber)
			--	and oh.OrderNumber not in (select OrderResponseNumber from BakerTaylor..order_response_Header where OrderResponseNumber=oh.OrderNumber)
			--order by oh.OrderNumber
			
			
			----send the email................................
			declare @emailAddy varchar(1000)
			set @emailAddy = 'jblalock@hpb.com'
			declare @qry varchar(max)
			set @qry = ' SET NOCOUNT ON; select oh.OrderNumber,oh.IssueDateTime,oh.ShipToName from BakerTaylor..order_Header oh with(nolock)
						where oh.OrderNumber not like ''%test%'' and oh.OrderNumber in (select BuyersOrderReference from BakerTaylor..order_shipnotice_ItemDetail with(nolock) where BuyersOrderReference=oh.OrderNumber)
						and oh.OrderNumber not in (select OrderResponseNumber from BakerTaylor..order_response_Header with(nolock) where OrderResponseNumber=oh.OrderNumber)
					order by oh.OrderNumber'
			EXECUTE [msdb].[dbo].[sp_send_dbmail]
			        @profile_name='EDIMail',
			        @recipients=@emailAddy,
			        @subject     = 'BT CDF missed response',
					@body        = 'These order(s) did not receive a response, but have shipped.',
					@query = @qry 
			
		end  

END
GO
PRINT N'Altering [dbo].[CDF_BT_Processing]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <11/4/2014>
-- Description:	<Process CDF orders to BT through EDI....>
-- =============================================
ALTER PROCEDURE [dbo].[CDF_BT_Processing]
AS
BEGIN
	SET NOCOUNT ON;

-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
----Order select...................................................................................................................................
if exists(select LogID from [HPB_EDI].dbo.[EDI_Process_Log] where Processed=0 and TransType='ORD' 
			and OrderNumber not in (select OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ORD' and processed=1)
			and LogID in (select LogID from [HPB_EDI].dbo.[EDI_Transactions] where ProcessorApp='BT' and SourceApp='HPB.com'))
	begin
		declare @rVal int
		set @rVal = 0
		Begin Transaction CDF_trans

		select distinct pl.LogID,pl.TransType,t.ProcessorApp,t.SourceApp,t.LineNumber,t.VendorID,t.OrderNumber,t.ResponseNumber,t.ASNNumber,t.InvoiceNumber,t.IssueDateTime,t.PurposeCode,
			t.CurrencyCode,t.CountryCode,t.FillTermsCode,t.TotalPayable,t.OrderStatus,t.BuyerIDType,t.BuyerID,t.SourceIDType,t.SourceID,t.SellerIDType,t.SellerID,
			t.ShipToName,t.ShipToAddress1,t.ShipToAddress2,t.ShipToCity,t.ShipToState,t.ShipToZip,t.ShipToCountryCode,t.BillToName,t.BillToAddress1,t.BillToAddress2,t.BillToCity,t.BillToState,t.BillToZip,t.BillToCountryCode,
			t.TransportIDType,t.TransportID,t.Message,t.ProductIDType,t.ProductID,t.ItemDescription,t.UnitPrice,t.OrderQuantity,t.ConfirmQuantity,t.BackOrderQuantity,t.CancelQuantity,t.ShippedQuantity,t.InvoiceQuantity,
			t.OrderLineStatus,t.LineStatusDescription,t.ShipDateStatus,t.ShipNoticeDate,t.CarrierNamdCodeType,t.CarrierNameCode,t.CustomerOrderReference,t.PackageNumber,t.PackageMarkTypeCode,t.PackageMarkValue,
			t.ChargeTypeCode,t.ChargeTypeDescription,t.ChargeAmount,t.InsertDateTime
		into #ords
		from [HPB_EDI].dbo.[EDI_Process_Log] pl inner join [HPB_EDI].dbo.[EDI_Transactions] t on pl.LogID=t.LogID
		where pl.Processed=0 and pl.TransType='ORD' and t.ProcessorApp='BT' and t.SourceApp='HPB.com'
		order by t.OrderNumber,t.InsertDateTime

		set @rVal = @@ERROR

		insert into BakerTaylor..order_Header
		select distinct oh.OrderNumber,oh.IssueDateTime,oh.PurposeCode,oh.CurrencyCode,oh.FillTermsCode,oh.BuyerIDType,oh.BuyerID,oh.SourceIDType,oh.SourceID,oh.SellerIDType,oh.SellerID,
			oh.ShipToName,oh.ShipToAddress1,oh.ShipToAddress2,oh.ShipToCity,oh.ShipToState,oh.ShipToZip,oh.ShipToCountryCode,oh.BillToName,oh.BillToAddress1,oh.BillToAddress2,oh.BillToCity,oh.BillToState,oh.BillToZip,oh.BillToCountryCode,
			oh.TransportIDType,oh.TransportID,oh.Message,getdate(),0,null
		from #ords oh

		if @rVal = 0 begin set @rVal = @@ERROR end

		insert into BakerTaylor..order_ItemDetail
		select distinct ord.OrderID,oh.LineNumber,oh.ProductIDType,oh.ProductID,oh.OrderQuantity,'BuyersOrderLineReference'[LineReferenceTypeCode],oh.LineNumber[LineReferenceNum]
		from #ords oh inner join BakerTaylor..order_Header ord on oh.OrderNumber=ord.OrderNumber
		order by ord.OrderID,oh.LineNumber

		if @rVal = 0 begin set @rVal = @@ERROR end

		--update process log.....
		update [HPB_EDI].dbo.[EDI_Process_Log]
		set Processed=1,ProcessedDateTime=getdate()
		where Processed=0 and LogID in (select distinct LogID from #ords)

		if @rVal = 0 begin set @rVal = @@ERROR end

		drop table #ords

		----Commit or Rollback trans...........
		if @rVal=0
			begin
				Commit Transaction CDF_trans
			end
		else
			begin
				Rollback  Transaction CDF_trans
			end
	end
-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
----Response inserts...................................................................................................................................
if exists(select distinct rh.DocReferenceNumber	from BakerTaylor..order_response_Header rh inner join BakerTaylor..order_response_ItemDetail rd on rh.ResponseID=rd.ResponseID
			where rh.DocReferenceNumber not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='RES')
				and rh.DocReferenceNumber in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ORD'))
	begin
		declare @rValRep int
		set @rValRep = 0
		Begin Transaction CDF_trans_Rep
		
		declare @res table (OrderNumber varchar(20))

		insert into @res
		select distinct rh.DocReferenceNumber
		from BakerTaylor..order_response_Header rh inner join BakerTaylor..order_response_ItemDetail rd on rh.ResponseID=rd.ResponseID
		where rh.DocReferenceNumber not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='RES')
			and rh.DocReferenceNumber in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ORD')

		insert into [HPB_EDI].dbo.[EDI_Process_Log]
		select distinct 'RES'[TransType],rh.DocReferenceNumber[OrderNumber],0[Processed],null [ProcessedDateTime]
		from BakerTaylor..order_response_Header rh inner join BakerTaylor..order_response_ItemDetail rd on rh.ResponseID=rd.ResponseID
			inner join @res r on r.OrderNumber=rh.DocReferenceNumber
		where rh.DocReferenceNumber not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='RES')
		
		set @rValRep = @@ERROR
		
		insert into [HPB_EDI].dbo.[EDI_Transactions]
		select distinct pl.TransType[TransType],pl.LogID[LogID],t.ProcessorApp[ProcessorApp],t.SourceApp[SourceApp],rd.LineNumber[LineNumber],t.VendorID[VendorID],rh.DocReferenceNumber[OrderNumber],rh.OrderResponseNumber[ResponseNumber],
			t.ASNNumber[ASNNumber],t.InvoiceNumber[InvoiceNumber],rh.IssueDateTime[IssueDateTime],rh.PurposeCode[PurposeCode],rh.CurrencyCode[CurrencyCode],rh.CountryCode[CountryCode],
			t.FillTermsCode[FillTermsCode],''[TotalPayable],'Acknowledged'[OrderStatus],rh.BuyerPartyIDType[BuyerIDType],rh.BuyerPartyIdentifier[BuyerID],t.SourceIDType[SourceIDType],
			t.SourceID[SourceID],rh.SellerPartyIDType[SellerIDType],rh.SellerPartyIdentifier[SellerID],rh.ShipToName[ShipToName],rh.ShipToAddress1[ShipToAddress1],isnull(rh.ShipToAddress2,'')[ShipToAddress2],
			rh.ShipToCity[ShipToCity],rh.ShipToState[ShipToState],rh.ShipToPostalCode[ShipToZip],rh.ShipToCountryCode[ShipToCountryCode],t.BillToName[BillToName],t.BillToAddress1[BillToAddress1],
			t.BillToAddress2[BillToAddress2],t.BillToCity[BillToCity],t.BillToState[BillToState],t.BillToZip[BillToZip],t.BillToCountryCode[BillToCountryCode],t.TransportIDType[TransportIDType],
			t.TransportID[TransportID],''[Message],t.ProductIDType[ProductIDType],rd.ProductIdentifier [ProductID],rd.ItemDescription[ItemDescription],t.UnitPrice[UnitPrice],
			rd.OrderQuantity[OrderQuantity],rd.OrderQuantity [ConfirmQuantity],rd.QuantityBackordered [BackOrderQuantity],rd.QuantityCanceled[CancelQuantity],rd.QuantityShipping[ShippedQuantity],
			''[InvoiceQuantity],rd.OrderLineStatus[OrderLineStatus],rd.LineStatusDescription[LineStatusDescription],''[ShipDateStatus],''[ShipNoticeDate],''[CarrierNameCodeType],
			''[CarrierNameCode],''[CustomerOrderReference],''[PackageNumber],''[PackageMarkTypeCode],''[PackageMarkValue],''[ChargeTypeCode],''[ChargeTypeDescription],''[ChargeAmount],getdate()[InsertDateTime] 
		from BakerTaylor..order_response_Header rh inner join BakerTaylor..order_response_ItemDetail rd on rh.ResponseID=rd.ResponseID
			inner join [HPB_EDI].dbo.[EDI_Process_Log] pl on rh.OrderResponseNumber=pl.OrderNumber and pl.TransType='RES' 
			inner join @res r on r.OrderNumber=rh.DocReferenceNumber
			inner join [HPB_EDI].dbo.[EDI_Transactions] t on t.OrderNumber=r.OrderNumber and t.TransType='ORD'
		where pl.Processed=0
		
		if @rValRep = 0 begin set @rValRep = @@ERROR end
		
		insert into EDI_EmailAuditLog
		select distinct pl.TransType[EmailType],pl.LogID[LogID],0[Processed],null [ProcessedDateTime]
		from [HPB_EDI].dbo.[EDI_Process_Log] pl inner join @res r on r.OrderNumber=pl.OrderNumber
		where pl.TransType='RES'
		
		if @rValRep = 0 begin set @rValRep = @@ERROR end
		
		----Commit or Rollback trans...........
		if @rValRep=0
			begin
				Commit Transaction CDF_trans_Rep
			end
		else
			begin
				Rollback  Transaction CDF_trans_Rep
			end
	end
-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
----ASN inserts...................................................................................................................................
if exists(select distinct sd.BuyersOrderReference from BakerTaylor..order_shipnotice_Header sh inner join BakerTaylor..order_shipnotice_ItemDetail sd on sh.ShipID=sd.ShipID
				inner join BakerTaylor..order_shipnotice_PackageDetail sp on sh.ShipID=sp.ShipID
				inner join BakerTaylor..order_shipnotice_Summary ss on sh.ShipID=ss.ShipID
			where sd.BuyersOrderReference not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ASN')
				and sd.BuyersOrderReference in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='RES'))
	begin
		declare @rValASN int
		set @rValASN = 0
		Begin Transaction CDF_trans_ASN
		
		declare @asn table (OrderNumber varchar(20))

		insert into @asn
		select distinct sd.BuyersOrderReference
		from BakerTaylor..order_shipnotice_Header sh inner join BakerTaylor..order_shipnotice_ItemDetail sd on sh.ShipID=sd.ShipID
			inner join BakerTaylor..order_shipnotice_PackageDetail sp on sh.ShipID=sp.ShipID
			inner join BakerTaylor..order_shipnotice_Summary ss on sh.ShipID=ss.ShipID
		where sd.BuyersOrderReference not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ASN')
			and sd.BuyersOrderReference in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='RES')
		
		insert into [HPB_EDI].dbo.[EDI_Process_Log]
		select distinct 'ASN'[TransType],sd.BuyersOrderReference[OrderNumber],0[Processed],null [ProcessedDateTime]
		from  BakerTaylor..order_shipnotice_Header sh inner join BakerTaylor..order_shipnotice_ItemDetail sd on sh.ShipID=sd.ShipID
			inner join BakerTaylor..order_shipnotice_PackageDetail sp on sh.ShipID=sp.ShipID
			inner join BakerTaylor..order_shipnotice_Summary ss on sh.ShipID=ss.ShipID
			inner join @asn a on a.OrderNumber=sd.BuyersOrderReference
		where sd.BuyersOrderReference not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ASN')
		
		set @rValASN = @@ERROR
		
		select distinct sp.ShipID,sp.PackageMarkTypeCode,sp.PackageMarkValue
		into #pkgDtl
		from BakerTaylor..order_shipnotice_Header sh inner join BakerTaylor..order_shipnotice_ItemDetail sd on sh.ShipID=sd.ShipID
			inner join BakerTaylor..order_shipnotice_PackageDetail sp on sh.ShipID=sp.ShipID
			inner join @asn a on a.OrderNumber=sd.BuyersOrderReference
		where sp.PackageMarkTypeCode='CarrierTrackingNumber'
		
		insert into #pkgDtl
		select distinct sp.ShipID,sp.PackageMarkTypeCode,sp.PackageMarkValue
		from BakerTaylor..order_shipnotice_Header sh inner join BakerTaylor..order_shipnotice_ItemDetail sd on sh.ShipID=sd.ShipID
			inner join BakerTaylor..order_shipnotice_PackageDetail sp on sh.ShipID=sp.ShipID
			inner join @asn a on a.OrderNumber=sd.BuyersOrderReference
		where sp.PackageMarkTypeCode='SSCC-18' and sp.ShipID not in (select ShipID from #pkgDtl)
		
		set @rValASN = @@ERROR
		
		insert into [HPB_EDI].dbo.[EDI_Transactions]
		select distinct pl.TransType[TransType],pl.LogID[LogID],t.ProcessorApp[ProcessorApp],t.SourceApp[SourceApp],sd.LineNumber[LineNumber],t.VendorID[VendorID],sd.BuyersOrderReference[OrderNumber],''[ResponseNumber],
			sh.ASNNumber[ASNNumber],t.InvoiceNumber[InvoiceNumber],sh.IssueDateTime[IssueDateTime],sh.PurposeCode[PurposeCode],sh.CurrencyCode[CurrencyCode],sh.CountryCode[CountryCode],
			t.FillTermsCode[FillTermsCode],''[TotalPayable],'Shipped'[OrderStatus],sh.BuyerPartyIDType[BuyerIDType],sh.BuyerPartyIdentifier[BuyerID],t.SourceIDType[SourceIDType],
			t.SourceID[SourceID],sh.SellerPartyIDType[SellerIDType],sh.SellerPartyIdentifier[SellerID],sh.ShipToName[ShipToName],sh.ShipToAddress1[ShipToAddress1],isnull(sh.ShipToAddress2,'')[ShipToAddress2],
			sh.ShipToCity[ShipToCity],sh.ShipToState[ShipToState],sh.ShipToPostalCode[ShipToZip],t.ShipToCountryCode[ShipToCountryCode],t.BillToName[BillToName],t.BillToAddress1[BillToAddress1],
			t.BillToAddress2[BillToAddress2],t.BillToCity[BillToCity],t.BillToState[BillToState],t.BillToZip[BillToZip],t.BillToCountryCode[BillToCountryCode],t.TransportIDType[TransportIDType],
			t.TransportID[TransportID],''[Message],t.ProductIDType[ProductIDType],sd.ProductIdentifier [ProductID],sd.ItemDescription[ItemDescription],t.UnitPrice[UnitPrice],
			t.OrderQuantity[OrderQuantity],t.ConfirmQuantity[ConfirmQuantity],t.BackOrderQuantity[BackOrderQuantity],t.CancelQuantity [CancelQuantity],sd.ShippedQuantity[ShippedQuantity],
			''[InvoiceQuantity],''[OrderLineStatus],''[LineStatusDescription],sh.ShipDateQualifierCode[ShipDateStatus],sh.ShipNoticeDate[ShipNoticeDate],sh.CarrierNameCodeType[CarrierNameCodeType],
			sh.CarrierNameCode[CarrierNameCode],sd.CustomerOrderReference[CustomerOrderReference],sd.PackageNumber[PackageNumber],sp.PackageMarkTypeCode[PackageMarkTypeCode],sp.PackageMarkValue[PackageMarkValue],''[ChargeTypeCode],''[ChargeTypeDescription],''[ChargeAmount],getdate()[InsertDateTime] 
		from BakerTaylor..order_shipnotice_Header sh inner join BakerTaylor..order_shipnotice_ItemDetail sd on sh.ShipID=sd.ShipID
			inner join #pkgDtl sp on sh.ShipID=sp.ShipID  
			inner join BakerTaylor..order_shipnotice_Summary ss on sh.ShipID=ss.ShipID
			inner join [HPB_EDI].dbo.[EDI_Process_Log] pl on sd.BuyersOrderReference=pl.OrderNumber and pl.TransType='ASN'
			inner join @asn a on a.OrderNumber=sd.BuyersOrderReference
			inner join [HPB_EDI].dbo.[EDI_Transactions] t on t.OrderNumber=sd.BuyersOrderReference and t.TransType='RES'
		where pl.Processed=0
		
		if @rValASN = 0 begin set @rValASN = @@ERROR end
		drop table #pkgDtl
		
		insert into EDI_EmailAuditLog
		select distinct pl.TransType[EmailType],pl.LogID[LogID],0[Processed],null [ProcessedDateTime]
		from [HPB_EDI].dbo.[EDI_Process_Log] pl inner join @asn a on a.OrderNumber=pl.OrderNumber
		where pl.TransType='ASN'
		
		if @rValASN = 0 begin set @rValASN = @@ERROR end
		
		----Commit or Rollback trans...........
		if @rValASN=0
			begin
				Commit Transaction CDF_trans_ASN
			end
		else
			begin
				Rollback  Transaction CDF_trans_ASN
			end
	end
-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
----Invoice inserts...................................................................................................................................
if exists(select distinct ih.BuyerOrderReference from BakerTaylor..order_invoice_Header ih inner join BakerTaylor..order_invoice_ItemDetail id on ih.InvoiceID=id.InvoiceID
				left outer join BakerTaylor..order_invoice_AdditionalCharges ic on ih.InvoiceID=ic.InvoiceID
			where ih.BuyerOrderReference not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='INV')
				and ih.BuyerOrderReference in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ASN'))
	begin
		declare @rValInv int
		set @rValInv = 0
		Begin Transaction CDF_trans_Inv
		
		declare @inv table (OrderNumber varchar(20))

		insert into @inv
		select distinct ih.BuyerOrderReference
		from BakerTaylor..order_invoice_Header ih inner join BakerTaylor..order_invoice_ItemDetail id on ih.InvoiceID=id.InvoiceID
			left outer join BakerTaylor..order_invoice_AdditionalCharges ic on ih.InvoiceID=ic.InvoiceID
		where ih.BuyerOrderReference not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='INV')
			and ih.BuyerOrderReference in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='ASN')

		insert into [HPB_EDI].dbo.[EDI_Process_Log]
		select distinct 'INV'[TransType],ih.BuyerOrderReference[OrderNumber],0[Processed],null [ProcessedDateTime]
		from  BakerTaylor..order_invoice_Header ih inner join BakerTaylor..order_invoice_ItemDetail id on ih.InvoiceID=id.InvoiceID
			left outer join BakerTaylor..order_invoice_AdditionalCharges ic on ih.InvoiceID=ic.InvoiceID
			inner join @inv i on i.OrderNumber=ih.BuyerOrderReference
		where ih.BuyerOrderReference not in (select distinct OrderNumber from [HPB_EDI].dbo.[EDI_Process_Log] where TransType='INV')

		set @rValInv = @@ERROR
		
		insert into [HPB_EDI].dbo.[EDI_Transactions]
		select distinct pl.TransType[TransType],pl.LogID[LogID],t.ProcessorApp[ProcessorApp],t.SourceApp[SourceApp],id.LineNumber[LineNumber],t.VendorID[VendorID],ih.BuyerOrderReference[OrderNumber],''[ResponseNumber],
			ih.ASNRefNumber[ASNNumber],ih.InvoiceNumber[InvoiceNumber],ih.IssueDateTime[IssueDateTime],ih.PurposeCode[PurposeCode],ih.CurrencyCode[CurrencyCode],ih.CountryCode[CountryCode],
			t.FillTermsCode[FillTermsCode],ih.TotalPayable[TotalPayable],'Invoiced'[OrderStatus],ih.BuyerPartyIDType[BuyerIDType],ih.BuyerPartyIdentifier[BuyerID],t.SourceIDType[SourceIDType],
			t.SourceID[SourceID],t.SellerIDType[SellerIDType],t.SellerID[SellerID],ih.ShipToName[ShipToName],ih.ShipToAddress1[ShipToAddress1],isnull(ih.ShipToAddress2,'')[ShipToAddress2],
			ih.ShipToCity[ShipToCity],ih.ShipToState[ShipToState],ih.ShipToPostalCode[ShipToZip],t.ShipToCountryCode[ShipToCountryCode],t.BillToName[BillToName],t.BillToAddress1[BillToAddress1],
			t.BillToAddress2[BillToAddress2],t.BillToCity[BillToCity],t.BillToState[BillToState],t.BillToZip[BillToZip],t.BillToCountryCode[BillToCountryCode],t.TransportIDType[TransportIDType],
			t.TransportID[TransportID],''[Message],id.ProductIDType[ProductIDType],id.ProductIdentifier [ProductID],id.ItemDescription[ItemDescription],id.UnitPriceExcludingTax[UnitPrice],
			t.OrderQuantity[OrderQuantity],t.ConfirmQuantity[ConfirmQuantity],t.BackOrderQuantity[BackOrderQuantity],t.CancelQuantity [CancelQuantity],t.ShippedQuantity[ShippedQuantity],
			id.InvoicedQuantity[InvoiceQuantity],''[OrderLineStatus],''[LineStatusDescription],t.ShipDateStatus[ShipDateStatus],t.ShipNoticeDate[ShipNoticeDate],t.CarrierNamdCodeType[CarrierNameCodeType],
			t.CarrierNameCode[CarrierNameCode],ih.BuyerOrderReference[CustomerOrderReference],''[PackageNumber],''[PackageMarkTypeCode],''[PackageMarkValue],'Other'[ChargeTypeCode],BakerTaylor.dbo.BT_INV_Charge_Consol(ih.InvoiceID)[ChargeTypeDescription],sum(cast(ic.ChargeAmountExcludingTax as money))[ChargeAmount],getdate()[InsertDateTime] 
		from BakerTaylor..order_invoice_Header ih inner join BakerTaylor..order_invoice_ItemDetail id on ih.InvoiceID=id.InvoiceID
			left outer join BakerTaylor..order_invoice_AdditionalCharges ic on ih.InvoiceID=ic.InvoiceID
			inner join [HPB_EDI].dbo.[EDI_Process_Log] pl on ih.BuyerOrderReference=pl.OrderNumber and pl.TransType='INV'
			inner join [HPB_EDI].dbo.[EDI_Transactions] t on t.OrderNumber=ih.BuyerOrderReference and t.TransType='ASN'
			inner join @inv i on i.OrderNumber=ih.BuyerOrderReference
		where pl.Processed=0
		group by pl.TransType,pl.LogID,t.ProcessorApp,t.SourceApp,id.LineNumber,t.VendorID,ih.BuyerOrderReference,ih.ASNRefNumber,ih.InvoiceNumber,ih.IssueDateTime,ih.PurposeCode,ih.CurrencyCode,ih.CountryCode,
			t.FillTermsCode,ih.TotalPayable,ih.BuyerPartyIDType,ih.BuyerPartyIdentifier,t.SourceIDType,t.SourceID,t.SellerIDType,t.SellerID,ih.ShipToName,ih.ShipToAddress1,isnull(ih.ShipToAddress2,''),
			ih.ShipToCity,ih.ShipToState,ih.ShipToPostalCode,t.ShipToCountryCode,t.BillToName,t.BillToAddress1,t.BillToAddress2,t.BillToCity,t.BillToState,t.BillToZip,t.BillToCountryCode,t.TransportIDType,
			t.TransportID,id.ProductIDType,id.ProductIdentifier,id.ItemDescription,id.UnitPriceExcludingTax,t.OrderQuantity,t.ConfirmQuantity,t.BackOrderQuantity,t.CancelQuantity,t.ShippedQuantity,
			id.InvoicedQuantity,t.ShipDateStatus,t.ShipNoticeDate,t.CarrierNamdCodeType,t.CarrierNameCode,ih.BuyerOrderReference,BakerTaylor.dbo.BT_INV_Charge_Consol(ih.InvoiceID)
		
		if @rValInv = 0 begin set @rValInv = @@ERROR end
		
		insert into [HPB_EDI].dbo.[WEB_Invoice_Audit_Log]
		select distinct t.InvoiceNumber,t.OrderNumber,0,null
		from [HPB_EDI].dbo.[EDI_Transactions] t 
			inner join @inv i on t.OrderNumber=i.OrderNumber
		where t.TransType='INV'
		
		if @rValInv = 0 begin set @rValInv = @@ERROR end

		insert into EDI_EmailAuditLog
		select distinct pl.TransType[EmailType],pl.LogID[LogID],0[Processed],null [ProcessedDateTime]
		from [HPB_EDI].dbo.[EDI_Process_Log] pl inner join @inv i on i.OrderNumber=pl.OrderNumber
		where pl.TransType='INV'
		
		if @rValInv = 0 begin set @rValInv = @@ERROR end
		
		----Commit or Rollback trans...........
		if @rValInv=0
			begin
				Commit Transaction CDF_trans_Inv
			end
		else
			begin
				Rollback  Transaction CDF_trans_Inv
			end
	end
-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------



END
GO
PRINT N'Altering [dbo].[GetSFTPFolders]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <1/23/2015>
-- Description:	<Get SFTP folders to check/place files.....>
-- =============================================
ALTER PROCEDURE [dbo].[GetSFTPFolders]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT DISTINCT parentfolder 
	FROM dbo.Vendor_SAN_Codes 
	WHERE ISNULL(parentfolder,'')!=''
END
GO
PRINT N'Altering [dbo].[PreOrder_BT_Processing]...';


GO
-- =============================================
-- Author:		Joey B.
-- Create date: 11/4/2014
-- Description:	Process PreOrders to BT through EDI
-- =============================================
ALTER PROCEDURE [dbo].[PreOrder_BT_Processing]
AS
BEGIN
	SET NOCOUNT ON;

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF EXISTS(SELECT LogID FROM dbo.EDI_Process_Log WHERE Processed=0 AND TransType='ORD'
			AND OrderNumber NOT IN (SELECT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ORD' AND processed=1)
			AND LogID IN (SELECT LogID FROM dbo.[EDI_Transactions] WHERE ProcessorApp='BT' AND SourceApp='BW_PRE'))
	BEGIN
		DECLARE @rVal INT = 0
		
		BEGIN TRANSACTION PRE_trans_Ord
		SELECT DISTINCT pl.LogID,pl.TransType,t.ProcessorApp,t.SourceApp,t.LineNumber,t.VendorID,t.OrderNumber,t.ResponseNumber,t.ASNNumber,t.InvoiceNumber,CONVERT(VARCHAR(10),t.IssueDateTime,112) AS [IssueDateTime]
			,t.PurposeCode,t.CurrencyCode,t.CountryCode,t.FillTermsCode,t.TotalPayable,t.OrderStatus,t.BuyerIDType,t.BuyerID,t.SourceIDType,t.SourceID,t.SellerIDType,t.SellerID,t.ShipToName,t.ShipToAddress1
			,t.ShipToAddress2,t.ShipToCity,t.ShipToState,t.ShipToZip,t.ShipToCountryCode,t.BillToName,t.BillToAddress1,t.BillToAddress2,t.BillToCity,t.BillToState,t.BillToZip,t.BillToCountryCode
			,t.TransportIDType,t.TransportID,t.[Message],t.ProductIDType,t.ProductID,t.ItemDescription,t.UnitPrice,t.OrderQuantity,t.ConfirmQuantity,t.BackOrderQuantity,t.CancelQuantity,t.ShippedQuantity
			,t.InvoiceQuantity,t.OrderLineStatus,t.LineStatusDescription,t.ShipDateStatus,t.ShipNoticeDate,t.CarrierNamdCodeType,t.CarrierNameCode,t.CustomerOrderReference,t.PackageNumber
			,t.PackageMarkTypeCode,t.PackageMarkValue,t.ChargeTypeCode,t.ChargeTypeDescription,t.ChargeAmount,t.InsertDateTime
		INTO #ords
		FROM dbo.EDI_Process_Log pl 
			INNER JOIN ddbo.[EDI_Transactions] t 
				ON pl.LogID=t.LogID
		WHERE  pl.TransType IN ('ORD') AND t.ProcessorApp='BT' AND t.SourceApp='BW_PRE' AND pl.Processed=0
		ORDER BY t.OrderNumber,t.InsertDateTime

		SET @rVal = @@ERROR

		INSERT INTO BakerTaylor..bulkorder_Header
			SELECT DISTINCT oh.OrderNumber,oh.IssueDateTime,oh.PurposeCode,oh.FillTermsCode,oh.BuyerIDType,oh.BuyerID,oh.SourceIDType,oh.SourceID,oh.SellerIDType,oh.SellerID,getdate(),0,null
			FROM #ords oh

		IF @rVal = 0 BEGIN SET @rVal = @@ERROR END

		INSERT INTO BakerTaylor..bulkorder_ItemDetail
			SELECT DISTINCT ord.OrderID,oh.LineNumber,oh.ProductIDType,oh.ProductID,oh.OrderQuantity,'BuyersOrderLineReference'[LineReferenceTypeCode],oh.LineNumber[LineReferenceNum],oh.FillTermsCode
			FROM #ords oh INNER JOIN BakerTaylor..bulkorder_Header ord ON oh.OrderNumber=ord.OrderNumber
			ORDER BY ord.OrderID,oh.LineNumber

		IF @rVal = 0 BEGIN SET @rVal = @@ERROR END

		-- UPDATE process log
		UPDATE dbo.EDI_Process_Log
			SET	 Processed=1
				,ProcessedDateTime=getdate()
		WHERE Processed=0 
			AND LogID IN (SELECT DISTINCT LogID FROM #ords)

		IF @rVal = 0 BEGIN SET @rVal = @@ERROR END

		DROP TABLE #ords

		-- COMMIT or ROLLBACK trans
		IF @rVal=0
			BEGIN
				COMMIT TRANSACTION PRE_trans_Ord
			END
		ELSE
			BEGIN
				ROLLBACK  TRANSACTION PRE_trans_Ord
			END
	END
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Response inserts
IF EXISTS(SELECT DISTINCT rh.DocReferenceNumber	FROM BakerTaylor..bulkorder_response_Header rh INNER JOIN BakerTaylor..bulkorder_response_ItemDetail rd ON rh.ResponseID=rd.ResponseID
			WHERE rh.DocReferenceNumber NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='RES')
				AND rh.DocReferenceNumber IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ORD'))
	BEGIN
		DECLARE @rValRep INT
		SET @rValRep = 0
		BEGIN TRANSACTION PRE_trans_Rep
		
		DECLARE @res TABLE (OrderNumber VARCHAR(20))

		INSERT INTO @res
			SELECT DISTINCT rh.DocReferenceNumber
			FROM BakerTaylor..bulkorder_response_Header rh INNER JOIN BakerTaylor..bulkorder_response_ItemDetail rd ON rh.ResponseID=rd.ResponseID
			WHERE rh.DocReferenceNumber NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='RES')
				AND rh.DocReferenceNumber IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ORD')

		INSERT INTO dbo.EDI_Process_Log
			SELECT DISTINCT 'RES'[TransType],rh.DocReferenceNumber[OrderNumber],0[Processed],null [ProcessedDateTime]
			FROM BakerTaylor..bulkorder_response_Header rh INNER JOIN BakerTaylor..bulkorder_response_ItemDetail rd ON rh.ResponseID=rd.ResponseID
				INNER JOIN @res r ON r.OrderNumber=rh.DocReferenceNumber
			WHERE rh.DocReferenceNumber NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='RES')
		
		SET @rValRep = @@ERROR
		
		INSERT INTO dbo.[EDI_Transactions]
		SELECT DISTINCT pl.TransType AS [TransType],pl.LogID AS [LogID],t.ProcessorApp AS [ProcessorApp],t.SourceApp AS [SourceApp],rd.LineNumber AS [LineNumber],t.VendorID AS [VendorID]
			,rh.DocReferenceNumber AS [OrderNumber],rh.OrderResponseNumber AS [ResponseNumber],t.ASNNumber AS [ASNNumber],t.InvoiceNumber AS [InvoiceNumber], CAST(rh.IssueDateTime AS DATETIME) AS [IssueDateTime]
			,rh.PurposeCode AS [PurposeCode],rh.CurrencyCode AS [CurrencyCode],rh.CountryCode AS [CountryCode],t.FillTermsCode AS [FillTermsCode],'' AS [TotalPayable],'Acknowledged' AS [OrderStatus]
			,rh.BuyerPartyIDType AS [BuyerIDType],rh.BuyerPartyIdentifier AS [BuyerID],t.SourceIDType AS [SourceIDType],t.SourceID AS [SourceID],t.SellerIDType AS [SellerIDType],t.SellerID AS [SellerID]
			,t.ShipToName AS [ShipToName],t.ShipToAddress1 AS [ShipToAddress1],ISNULL(t.ShipToAddress2,'') AS [ShipToAddress2],t.ShipToCity AS [ShipToCity],t.ShipToState AS [ShipToState]
			,t.ShipToZip AS [ShipToZip],t.ShipToCountryCode AS [ShipToCountryCode],t.BillToName AS [BillToName],t.BillToAddress1 AS [BillToAddress1],t.BillToAddress2 AS [BillToAddress2]
			,t.BillToCity AS [BillToCity],t.BillToState AS [BillToState],t.BillToZip AS [BillToZip],t.BillToCountryCode AS [BillToCountryCode],t.TransportIDType AS [TransportIDType]
			,t.TransportID AS [TransportID],'' AS [Message],t.ProductIDType AS [ProductIDType],rd.ProductIdentifier AS [ProductID],rd.ItemDescription AS [ItemDescription],t.UnitPrice AS [UnitPrice]
			,rd.OrderQuantity AS [OrderQuantity],rd.QuantityShipping AS [ConfirmQuantity],rd.QuantityBackordered AS [BackOrderQuantity]
			,CASE WHEN rd.QuantityShipping=0 AND ISNULL(rd.QuantityBackordered,0)=0 THEN rd.OrderQuantity ELSE rd.QuantityCanceled END AS [CancelQuantity]
			,rd.QuantityShipping AS [ShippedQuantity],'' AS [InvoiceQuantity],rd.LineStatusCode AS [OrderLineStatus],rd.LineStatusDescription AS [LineStatusDescription],'' AS [ShipDateStatus]
			,'' AS [ShipNoticeDate],'' AS [CarrierNameCodeType],'' AS [CarrierNameCode],'' AS [CustomerOrderReference],'' AS [PackageNumber],'' AS [PackageMarkTypeCode],'' AS [PackageMarkValue]
			,'' AS [ChargeTypeCode],'' AS [ChargeTypeDescription],'' AS [ChargeAmount],GETDATE() AS [InsertDateTime] 
		FROM BakerTaylor..bulkorder_response_Header rh INNER JOIN BakerTaylor..bulkorder_response_ItemDetail rd ON rh.ResponseID=rd.ResponseID
			INNER JOIN dbo.EDI_Process_Log pl ON rh.OrderResponseNumber=pl.OrderNumber AND pl.TransType='RES' 
			INNER JOIN @res r ON r.OrderNumber=rh.DocReferenceNumber
			INNER JOIN dbo.[EDI_Transactions] t ON t.OrderNumber=r.OrderNumber AND t.TransType='ORD'
		WHERE pl.Processed=0
		
		IF @rValRep = 0 BEGIN SET @rValRep = @@ERROR END
		
		INSERT INTO dbo.Email_Audit_Log
			SELECT DISTINCT pl.TransType[EmailType],pl.LogID[LogID],0[Processed],null [ProcessedDateTime]
			FROM dbo.EDI_Process_Log pl INNER JOIN @res r ON r.OrderNumber=pl.OrderNumber
			WHERE pl.TransType='RES'
		
		IF @rValRep = 0 BEGIN SET @rValRep = @@ERROR END
		
		-- COMMIT or ROLLBACK trans
		IF @rValRep=0
			BEGIN
				COMMIT TRANSACTION PRE_trans_Rep
			END
		ELSE
			BEGIN
				ROLLBACK  TRANSACTION PRE_trans_Rep
			END
	END
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----ASN inserts
IF EXISTS(SELECT DISTINCT sd.BuyersOrderReference FROM BakerTaylor..bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
				INNER JOIN BakerTaylor..bulkorder_shipnotice_PackageDetail sp ON sh.ShipID=sp.ShipID
				INNER JOIN BakerTaylor..bulkorder_shipnotice_Summary ss ON sh.ShipID=ss.ShipID
			WHERE sd.BuyersOrderReference NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ASN')
				AND sd.BuyersOrderReference IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='RES'))
	BEGIN
		DECLARE @rValASN INT
		SET @rValASN = 0
		BEGIN TRANSACTION PRE_trans_ASN
		
		DECLARE @asn TABLE (OrderNumber VARCHAR(20))

		INSERT INTO @asn
		SELECT DISTINCT sd.BuyersOrderReference
		FROM BakerTaylor..bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
			INNER JOIN BakerTaylor..bulkorder_shipnotice_PackageDetail sp ON sh.ShipID=sp.ShipID
			INNER JOIN BakerTaylor..bulkorder_shipnotice_Summary ss ON sh.ShipID=ss.ShipID
		WHERE sd.BuyersOrderReference NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ASN')
			AND sd.BuyersOrderReference IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='RES')
		
		INSERT INTO dbo.EDI_Process_Log
		SELECT DISTINCT 'ASN'[TransType],sd.BuyersOrderReference[OrderNumber],0[Processed],null [ProcessedDateTime]
		FROM  BakerTaylor..bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
			INNER JOIN BakerTaylor..bulkorder_shipnotice_PackageDetail sp ON sh.ShipID=sp.ShipID
			INNER JOIN BakerTaylor..bulkorder_shipnotice_Summary ss ON sh.ShipID=ss.ShipID
			INNER JOIN @asn a ON a.OrderNumber=sd.BuyersOrderReference
		WHERE sd.BuyersOrderReference NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ASN')
		
		SET @rValASN = @@ERROR
		
		SELECT DISTINCT sp.ShipID,sp.PackageMarkTypeCode,sp.PackageMarkValue
			INTO #pkgDtl
			FROM BakerTaylor..bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
				INNER JOIN BakerTaylor..bulkorder_shipnotice_PackageDetail sp ON sh.ShipID=sp.ShipID
				INNER JOIN @asn a ON a.OrderNumber=sd.BuyersOrderReference
			WHERE sp.PackageMarkTypeCode='CarrierTrackingNumber'
		
		INSERT INTO #pkgDtl
			SELECT DISTINCT sp.ShipID,sp.PackageMarkTypeCode,sp.PackageMarkValue
			FROM BakerTaylor..bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
				INNER JOIN BakerTaylor..bulkorder_shipnotice_PackageDetail sp ON sh.ShipID=sp.ShipID
				INNER JOIN @asn a ON a.OrderNumber=sd.BuyersOrderReference
			WHERE sp.PackageMarkTypeCode='SSCC-18' AND sp.ShipID NOT IN (SELECT ShipID FROM #pkgDtl)
		
		SET @rValASN = @@ERROR
		
		INSERT INTO dbo.[EDI_Transactions]
			SELECT DISTINCT pl.TransType AS [TransType],pl.LogID AS [LogID],t.ProcessorApp AS [ProcessorApp],t.SourceApp AS [SourceApp],sd.LineNumber AS [LineNumber],t.VendorID AS [VendorID]
				,sd.BuyersOrderReference AS [OrderNumber],'' AS [ResponseNumber],sh.ASNNumber AS [ASNNumber],t.InvoiceNumber AS [InvoiceNumber],CAST(sh.IssueDateTime AS DATETIME) AS [IssueDateTime]
				,sh.PurposeCode AS [PurposeCode],sh.CurrencyCode AS [CurrencyCode],sh.CountryCode AS [CountryCode],t.FillTermsCode AS [FillTermsCode],'' AS [TotalPayable],'Shipped' AS [OrderStatus]
				,sh.BuyerPartyIDType AS [BuyerIDType],sh.BuyerPartyIdentifier AS [BuyerID],t.SourceIDType AS [SourceIDType],t.SourceID AS [SourceID],t.SellerIDType AS [SellerIDType],t.SellerID AS [SellerID]
				,t.ShipToName AS [ShipToName],t.ShipToAddress1 AS [ShipToAddress1],ISNULL(t.ShipToAddress2,'') AS [ShipToAddress2],t.ShipToCity AS [ShipToCity],t.ShipToState AS [ShipToState]
				,t.ShipToZip AS [ShipToZip],t.ShipToCountryCode AS [ShipToCountryCode],t.BillToName AS [BillToName],t.BillToAddress1 AS [BillToAddress1],t.BillToAddress2 AS [BillToAddress2]
				,t.BillToCity AS [BillToCity],t.BillToState AS [BillToState],t.BillToZip AS [BillToZip],t.BillToCountryCode AS [BillToCountryCode],t.TransportIDType AS [TransportIDType]
				,t.TransportID AS [TransportID],'' AS [Message],t.ProductIDType AS [ProductIDType],sd.ProductIdentifier AS [ProductID],sd.ItemDescription AS [ItemDescription],t.UnitPrice AS [UnitPrice]
				,t.OrderQuantity AS [OrderQuantity],t.ConfirmQuantity AS [ConfirmQuantity],t.BackOrderQuantity AS [BackOrderQuantity],t.CancelQuantity AS [CancelQuantity],sd.ShippedQuantity AS [ShippedQuantity]
				,'' AS [InvoiceQuantity],'' AS [OrderLineStatus],'' AS [LineStatusDescription],sh.ShipDateQualifierCode AS [ShipDateStatus],sh.ShipNoticeDate AS [ShipNoticeDate]
				,sh.CarrierNameCodeType AS [CarrierNameCodeType],sh.CarrierNameCode AS [CarrierNameCode],sd.CustomerOrderReference AS [CustomerOrderReference],sd.PackageNumber AS [PackageNumber]
				,sp.PackageMarkTypeCode AS [PackageMarkTypeCode],sp.PackageMarkValue AS [PackageMarkValue],'' AS [ChargeTypeCode],'' AS [ChargeTypeDescription],'' AS [ChargeAmount],GETDATE() AS [InsertDateTime] 
			FROM BakerTaylor..bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
				INNER JOIN #pkgDtl sp ON sh.ShipID=sp.ShipID  
				INNER JOIN BakerTaylor..bulkorder_shipnotice_Summary ss ON sh.ShipID=ss.ShipID
				INNER JOIN dbo.EDI_Process_Log pl ON sd.BuyersOrderReference=pl.OrderNumber AND pl.TransType='ASN'
				INNER JOIN @asn a ON a.OrderNumber=sd.BuyersOrderReference
				INNER JOIN dbo.[EDI_Transactions] t ON t.OrderNumber=sd.BuyersOrderReference AND t.TransType='RES'
			WHERE pl.Processed=0
		
		IF @rValASN = 0 BEGIN SET @rValASN = @@ERROR END
		DROP TABLE #pkgDtl
		
		INSERT INTO dbo.Email_Audit_Log
			SELECT DISTINCT pl.TransType[EmailType],pl.LogID[LogID],0[Processed],null [ProcessedDateTime]
			FROM dbo.EDI_Process_Log pl INNER JOIN @asn a ON a.OrderNumber=pl.OrderNumber
			WHERE pl.TransType='ASN'
		
		IF @rValASN = 0 BEGIN SET @rValASN = @@ERROR END
		
		-- COMMIT or ROLLBACK trans
		IF @rValASN=0
			BEGIN
				COMMIT TRANSACTION PRE_trans_ASN
			END
		ELSE
			BEGIN
				ROLLBACK  TRANSACTION PRE_trans_ASN
			END
	END
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Invoice inserts
IF EXISTS(SELECT DISTINCT id.BuyersOrderReference FROM BakerTaylor..bulkorder_invoice_Header ih INNER JOIN BakerTaylor..bulkorder_invoice_ItemDetail id ON ih.InvoiceID=id.InvoiceID
				LEFT OUTER JOIN BakerTaylor..bulkorder_invoice_AdditionalCharges ic ON ih.InvoiceID=ic.InvoiceID
			WHERE id.BuyersOrderReference NOT IN (SELECT DISTINCT OrderNumber FROM Dbo.EDI_Process_Log WHERE TransType='INV')
				AND id.BuyersOrderReference IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ASN'))
	BEGIN
		DECLARE @rValInv INT

		SET @rValInv = 0
		BEGIN TRANSACTION PRE_trans_Inv
		
		DECLARE @inv TABLE (OrderNumber VARCHAR(20))

		INSERT INTO @inv
			SELECT DISTINCT id.BuyersOrderReference 
			FROM BakerTaylor..bulkorder_invoice_Header ih INNER JOIN BakerTaylor..bulkorder_invoice_ItemDetail id ON ih.InvoiceID=id.InvoiceID
				LEFT OUTER JOIN BakerTaylor..bulkorder_invoice_AdditionalCharges ic ON ih.InvoiceID=ic.InvoiceID
			WHERE id.BuyersOrderReference  NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='INV')
				AND id.BuyersOrderReference  IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='ASN')

		INSERT INTO dbo.EDI_Process_Log
			SELECT DISTINCT 'INV'[TransType],id.BuyersOrderReference[OrderNumber],0[Processed],null [ProcessedDateTime]
			FROM  BakerTaylor..bulkorder_invoice_Header ih INNER JOIN BakerTaylor..bulkorder_invoice_ItemDetail id ON ih.InvoiceID=id.InvoiceID
				LEFT OUTER JOIN BakerTaylor..bulkorder_invoice_AdditionalCharges ic ON ih.InvoiceID=ic.InvoiceID
				INNER JOIN @inv i ON i.OrderNumber=id.BuyersOrderReference 
		WHERE id.BuyersOrderReference  NOT IN (SELECT DISTINCT OrderNumber FROM dbo.EDI_Process_Log WHERE TransType='INV')

		SET @rValInv = @@ERROR
		
		INSERT INTO dbo.[EDI_Transactions]
			SELECT DISTINCT pl.TransType AS [TransType],pl.LogID AS [LogID],t.ProcessorApp AS [ProcessorApp],t.SourceApp AS [SourceApp],id.LineNumber AS [LineNumber],t.VendorID AS [VendorID]
				,id.BuyersOrderReference AS [OrderNumber],'' AS [ResponseNumber],ih.ASNRefNumber AS [ASNNumber],ih.InvoiceNumber AS [InvoiceNumber],CAST(ih.IssueDateTime AS DATETIME) AS [IssueDateTime]
				,ih.PurposeCode AS [PurposeCode],ih.CurrencyCode AS [CurrencyCode],ih.CountryCode AS [CountryCode],t.FillTermsCode AS [FillTermsCode],ih.TotalPayable AS [TotalPayable],'Invoiced' AS [OrderStatus]
				,ih.BuyerPartyIDType AS [BuyerIDType],ih.BuyerPartyIdentifier AS [BuyerID],t.SourceIDType AS [SourceIDType],t.SourceID AS [SourceID],t.SellerIDType AS [SellerIDType],t.SellerID AS [SellerID]
				,t.ShipToName AS [ShipToName],t.ShipToAddress1 AS [ShipToAddress1],ISNULL(t.ShipToAddress2,'') AS [ShipToAddress2],t.ShipToCity AS [ShipToCity],t.ShipToState[ShipToState],t.ShipToZip[ShipToZip]
				,t.ShipToCountryCode AS [ShipToCountryCode],t.BillToName AS [BillToName],t.BillToAddress1 AS [BillToAddress1],t.BillToAddress2 AS [BillToAddress2],t.BillToCity AS [BillToCity]
				,t.BillToState AS [BillToState],t.BillToZip AS [BillToZip],t.BillToCountryCode AS [BillToCountryCode],t.TransportIDType AS [TransportIDType],t.TransportID AS [TransportID],'' AS [Message]
				,id.ProductIDType AS [ProductIDType],id.ProductIdentifier AS [ProductID],id.ItemDescription AS [ItemDescription],id.UnitPriceExcludingTax AS [UnitPrice],t.OrderQuantity AS [OrderQuantity]
				,t.ConfirmQuantity AS [ConfirmQuantity],t.BackOrderQuantity AS [BackOrderQuantity],t.CancelQuantity AS [CancelQuantity],t.ShippedQuantity AS [ShippedQuantity]
				,id.InvoicedQuantity AS [InvoiceQuantity],'' AS [OrderLineStatus],'' AS [LineStatusDescription],t.ShipDateStatus AS [ShipDateStatus],t.ShipNoticeDate AS [ShipNoticeDate]
				,t.CarrierNamdCodeType AS [CarrierNameCodeType],t.CarrierNameCode AS [CarrierNameCode],id.BuyersOrderReference AS [CustomerOrderReference],'' AS [PackageNumber],'' AS [PackageMarkTypeCode]
				,'' AS [PackageMarkValue],'Other' AS [ChargeTypeCode],BakerTaylor.dbo.BT_INV_Charge_Consol(ih.InvoiceID) AS [ChargeTypeDescription]
				,SUM(CAST(ic.ChargeAmountExcludingTax AS MONEY)) AS [ChargeAmount],GETDATE() AS [InsertDateTime] 
			FROM BakerTaylor..bulkorder_invoice_Header ih INNER JOIN BakerTaylor..bulkorder_invoice_ItemDetail id ON ih.InvoiceID=id.InvoiceID
				LEFT OUTER JOIN BakerTaylor..bulkorder_invoice_AdditionalCharges ic ON ih.InvoiceID=ic.InvoiceID
				INNER JOIN dbo.EDI_Process_Log pl ON id.BuyersOrderReference=pl.OrderNumber AND pl.TransType='INV'
				INNER JOIN dbo.[EDI_Transactions] t ON t.OrderNumber=id.BuyersOrderReference AND t.TransType='ASN'
				INNER JOIN @inv i ON i.OrderNumber=id.BuyersOrderReference
			WHERE pl.Processed=0
			GROUP BY pl.TransType,pl.LogID,t.ProcessorApp,t.SourceApp,id.LineNumber,t.VendorID,id.BuyersOrderReference,ih.ASNRefNumber,ih.InvoiceNumber,ih.IssueDateTime,ih.PurposeCode,ih.CurrencyCode,ih.CountryCode,
				t.FillTermsCode,ih.TotalPayable,ih.BuyerPartyIDType,ih.BuyerPartyIdentifier,t.SourceIDType,t.SourceID,t.SellerIDType,t.SellerID,t.ShipToName,t.ShipToAddress1,ISNULL(t.ShipToAddress2,''),
				t.ShipToCity,t.ShipToState,t.ShipToZip,t.ShipToCountryCode,t.BillToName,t.BillToAddress1,t.BillToAddress2,t.BillToCity,t.BillToState,t.BillToZip,t.BillToCountryCode,t.TransportIDType,
				t.TransportID,id.ProductIDType,id.ProductIdentifier,id.ItemDescription,id.UnitPriceExcludingTax,t.OrderQuantity,t.ConfirmQuantity,t.BackOrderQuantity,t.CancelQuantity,t.ShippedQuantity,
				id.InvoicedQuantity,t.ShipDateStatus,t.ShipNoticeDate,t.CarrierNamdCodeType,t.CarrierNameCode,id.BuyersOrderReference,BakerTaylor.dbo.BT_INV_Charge_Consol(ih.InvoiceID)
			
		IF @rValInv = 0 BEGIN SET @rValInv = @@ERROR END

		INSERT INTO dbo.Email_Audit_Log
			SELECT DISTINCT pl.TransType[EmailType],pl.LogID[LogID],0[Processed],null [ProcessedDateTime]
			FROM dbo.EDI_Process_Log pl INNER JOIN @inv i ON i.OrderNumber=pl.OrderNumber
			WHERE pl.TransType='INV'
		
		IF @rValInv = 0 BEGIN SET @rValInv = @@ERROR END
		
		----COMMIT or ROLLBACK trans
		IF @rValInv=0
			BEGIN
				COMMIT TRANSACTION PRE_trans_Inv
			END
		ELSE
			BEGIN
				ROLLBACK  TRANSACTION PRE_trans_Inv
			END
	END
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
END
GO
PRINT N'Altering [dbo].[PreOrder_PO_Consolidate]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- CREATE date: <3/28/2016>
-- Description:	<Consolidate PreOrders onto store POs...>
-- =============================================
ALTER PROCEDURE [dbo].[PreOrder_PO_Consolidate]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE	 @rVal AS INT	= 0
		,@err AS INT	= 0
			
----get orders pending consolidation for stores.......................................................
	CREATE TABLE #asnTmp (rowid INT IDENTITY(1,1), ordNo VARCHAR(20), locNo CHAR(5),PoNo CHAR(6))

	INSERT INTO #asnTmp (ordNo, locNo, PoNo)
		SELECT	 t.OrderNumber
				,san.LocationNo
				,CAST('' AS CHAR(6))
		FROM dbo.EDI_Process_Log pl 
			INNER JOIN dbo.[EDI_Transactions] t 
				ON pl.LogID=t.LogID
			INNER JOIN BakerTaylor.dbo.codes_SAN san 
				ON t.SellerID=san.SAN+san.Suffix
		WHERE pl.Processed=0 
			AND t.TransType='ASN' 
			AND t.SourceApp='BW_PRE' 
			AND LTRIM(RTRIM(t.[Message]))=''
		ORDER BY san.LocationNo, t.OrderNumber

----loop through each location AND get a new PO......................................................
	DECLARE @sRetPO CHAR(6)
	DECLARE @newPONo CHAR(6)
	
	IF (SELECT COUNT(1) FROM #asnTmp)>0
		BEGIN
			DECLARE @loop INT
			SET @loop = (SELECT count(DISTINCT locNo) FROM #asnTmp)
			
			WHILE @loop > 0
				BEGIN 
					DECLARE @curLoc CHAR(5)
					
					SELECT TOP 1 @curLoc = locNo 
					FROM #asnTmp 
					WHERE LTRIM(RTRIM(PoNo))=''

					-----get next PO number....
					EXEC OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextPONo @sRetPO = @newPONo output
					
					UPDATE #asnTmp
						SET PoNo = @newPONo
					WHERE locNo = @curLoc
			
					SELECT	 @loop = @loop - 1
							,@sRetPO=''
							,@newPONo=''
				END	

		----run a TRANSACTION to UPDATE each ORDER with the selected PO.............................................
		BEGIN TRANSACTION Pre_UpdatePO		
			DECLARE @upd INT
			SET @upd = (SELECT MAX(rowID) FROM #asnTmp)
			
			WHILE @upd > 0
					BEGIN 
						DECLARE @updOrd VARCHAR(20)
						SELECT @updOrd = ordNo FROM #asnTmp WHERE rowid = @upd
						
						----UPDATE TRANSACTION TABLE with PO number.....................................
						UPDATE t
							SET t.[Message]=a.PoNo
						FROM [HPB_EDI].dbo.[EDI_Transactions] t 
							INNER JOIN #asnTmp a ON t.OrderNumber=a.ordNo
						WHERE t.OrderNumber=@updOrd AND t.TransType='ASN' AND t.SourceApp='BW_PRE'
					
						IF @err=0 BEGIN SET @err=@@ERROR END										
						SET @upd = @upd - 1
					END

		----CREATE temp TABLE to hold dropshipment details................................
			CREATE TABLE #drpTmp (rowid INT IDENTITY(1,1),PoNo CHAR(6),ordNo VARCHAR(20),locNo CHAR(5),storeNo CHAR(5),lineNum VARCHAR(10),itemcode VARCHAR(20),shipQty INT,cost money)

			INSERT INTO #drpTmp (PoNo,ordNo,locNo,storeNo,lineNum,itemcode,shipQty,cost)
				SELECT t.[Message] AS [PoNumber],t.OrderNumber,'00944',a.locNo,t.LineNumber,right(p.ItemCode,8),t.ShippedQuantity,p.Cost
				FROM dbo.EDI_Process_Log pl 
					INNER JOIN dbo.[EDI_Transactions] t 
						ON pl.LogID=t.LogID
					INNER JOIN #asnTmp a 
						ON t.OrderNumber=a.ordNo
					LEFT OUTER JOIN (	SELECT distinct po.ItemCode,pm.ISBN,pmd.UPC,pm.Cost 
										FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
										INNER JOIN [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd 
											ON pm.ItemCode=pmd.ItemCode
										INNER JOIN Prime_ProductPreOrder po 
											ON pm.ItemCode=po.ItemCode
									) p
						ON t.ProductID=case when t.ProductIDType='UPC' then p.UPC else p.ISBN END
				WHERE pl.Processed=0 
					AND t.TransType='ASN' 
					AND t.SourceApp='BW_PRE'

			IF @err=0 BEGIN SET @err=@@ERROR END
			
		----INSERT records INTO Dropshipments TABLE for Store Receiving................
			INSERT INTO Logistics_Dropshipments (POnumber,ReqNo,FromLocation,StoreNo,LineItemNo,ItemCode,Quantity,Cost,CreateDate,Processed)
				SELECT DISTINCT d.PoNo,d.PoNo,d.locNo,d.storeNo,MIN(d.rowid),d.itemcode,SUM(d.shipQty),d.cost,GETDATE(),0
				FROM #drpTmp d
				GROUP BY d.PoNo,d.PoNo,d.locNo,d.storeNo,d.itemcode,d.cost
			
			IF @err=0 BEGIN SET @err=@@ERROR END
			
			DROP TABLE #drpTmp
			
		SET @rVal = @err
		IF @rVal=0
			BEGIN
				Commit TRANSACTION Pre_UpdatePO
				RETURN @rVal
			END
		ELSE
			BEGIN
				ROLLBACK  TRANSACTION Pre_UpdatePO
				RETURN @rVal
			END
	END		
	DROP TABLE #asnTmp
END
GO
PRINT N'Altering [dbo].[ProcessPOFiles]...';


GO
-- =============================================
-- Author:		Joey B.
-- Create date: 10/4/2013
-- Description:	Builds a list of PO's to be exported to PUBNET thru EDI
-- =============================================
ALTER PROCEDURE [dbo].[ProcessPOFiles]
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @CRLF AS VARCHAR(2) = CHAR(13) + CHAR(10)


	/*
		ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*7214119        *130904*1312*U*00306*000145888*1*T*>~
		GS*Test0002*760985X*7214119*20130904*1312*000000002*X*003060~
		ST*850*000000003~
		BEG*00*NE*Test0002**130904**AC~
		DTM*037*130904*2013~
		
		N1*BT**15*7609876~
		N1*ST**15*1506951~
		N1*VN**15*7214119~
		
		PO1*1*24*EA*7.475*NT*EN*9780062024046*UP*07863569142~
		IT8*N**~
		PO1*2*48*EA*5.975*NT*EN*9780553593716*UP*73145140152~
		IT8*N**~
		PO1*3*48*EA*8.475*NT*EN*9780142410707*UP*74041707882~
		IT8*N**~
		
		CTT*3*120~
		SE*14*000000003~
		GE*1*000000002~
		IEA*1*000145888~

		-- SE total = 8 + (TotalLines*2)
	*/

	-- Add outer loop for vendor to keep FROM crashing WHEN tons of orders come through	
	CREATE TABLE #ords(ponumber VARCHAR(20),FileText VARCHAR(MAX))
	CREATE TABLE #vends (RowID INT IDENTITY(1,1) ,VendorID VARCHAR(20))

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	INSERT INTO #vends
		SELECT DISTINCT h.VendorID
		FROM [850_PO_Hdr] h 
			INNER JOIN [850_PO_Dtl] d 	
				ON h.OrdID=d.OrdID
			INNER JOIN Vendor_SAN_Codes v 
				ON h.VendorID=v.VendorID
		WHERE h.Processed=0 
			AND v.processor='PUBNET' 

	DECLARE @vendcnt INT, @curloop INT
	SELECT @vendcnt=ISNULL(MAX(RowID),0),@curloop=1
	FROM #vends

	WHILE @curloop<=@vendcnt
	BEGIN
		-- Build order string
		DECLARE @curVend VARCHAR(20)
		
		SELECT @curVend=VendorId 
		FROM #vends 
		WHERE RowID=@curloop
			
		INSERT INTO #ords
			SELECT DISTINCT top 20 h.ponumber, 
				CASE WHEN v.[Binary]=0 
					 THEN CASE WHEN v.VendorID!='IDHMHDISTR' 
								THEN	'ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*'
										+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'
										+ REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*U*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~' +@CRLF
										+'GS*PO*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' + @CRLF
										+'ST*850*000000003~' + @CRLF
										+ 'BEG*00*NE*'+h.PONumber+'**'+CONVERT(VARCHAR(6),h.IssueDate,12)+'**AC~' + @CRLF
										+ 'DTM*037*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'***'+left(CONVERT(VARCHAR(4),year(h.IssueDate)),2)+'~' + @CRLF
										+ 'N1*BT**15*'+REPLACE(h.BillToSAN,'-','')+'~' + @CRLF
										+ 'N1*ST**15*'+REPLACE(h.ShipToSAN,'-','')+'~' + @CRLF
										+ 'N1*VN**15*'+REPLACE(h.ShipFromSAN,'-','')+'~' + @CRLF
										+  dbo.EDIfn_GetPODetails(h.PONumber)
										+ 'CTT*'+CONVERT(VARCHAR(4),h.TotalLines)+'*'+CONVERT(VARCHAR(10),h.TotalQty)+'~' + @CRLF
										+ 'SE*'+CONVERT(VARCHAR(10),(8+(h.TotalLines*2)))+'*000000003~' + @CRLF
										+ 'GE*1*000000002~' + @CRLF
										+ 'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~'
								ELSE	'ISA|00|850BK3060 |00|          |ZZ|760985X        |ZZ|'
										+ CAST(h.ShipFromSAN AS CHAR(15)) +'|'+CONVERT(VARCHAR(6),h.IssueDate,12)+'|'
										+ REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'|U|00200|'+RIGHT('0000000000'+h.PONumber,9)+'|0|P|>'+ @CRLF
										+ 'GS|PO|760985X|'+h.ShipFromSAN+'|'+CONVERT(VARCHAR(6),h.IssueDate,12)+'|'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'|000000002|X|003060' + @CRLF
										+ 'ST|850|000000003' + @CRLF
										+ 'BEG|00|NE|'+h.PONumber+'||'+CONVERT(VARCHAR(6),h.IssueDate,12)+'||AC' + @CRLF
 										+ 'DTM|037|'+CONVERT(VARCHAR(6),h.IssueDate,12)+'|||'+left(CONVERT(VARCHAR(4),year(h.IssueDate)),2)+'' + @CRLF
										+ 'N1|BT||15|'+REPLACE(h.BillToSAN,'-','')+'' + @CRLF
										+ 'N1|ST||15|'+REPLACE(h.ShipToSAN,'-','')+'' + @CRLF
										+ 'N1|VN||15|'+REPLACE(h.ShipFromSAN,'-','')+'' + @CRLF
										+  dbo.EDIfn_GetPODetails(h.PONumber)
										+ 'CTT|'+CONVERT(VARCHAR(4),h.TotalLines)+'|'+CONVERT(VARCHAR(10),h.TotalQty)+'' 								+ @CRLF
										+ 'SE|'+CONVERT(VARCHAR(10),(8+(h.TotalLines*2)))+'|000000003' 								+ @CRLF
										+ 'GE|1|000000002' + @CRLF
										+ 'IEA|1|'+RIGHT('0000000000'+h.PONumber,9)+''
						END
					ELSE	  CONVERT(VARCHAR(MAX),CONVERT(varbinary(MAX),CONVERT(VARCHAR(MAX),
							  'ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*'
							+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'
							+ REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*U*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~' + @CRLF
							+ 'GS*PO*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' + @CRLF
							+ 'ST*850*000000003~' + @CRLF
							+ 'BEG*00*NE*'+h.PONumber+'**'+CONVERT(VARCHAR(6),h.IssueDate,12)+'**AC~' + @CRLF
							+ 'DTM*037*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'***'+left(CONVERT(VARCHAR(4),year(h.IssueDate)),2)+'~' + @CRLF
							+ 'N1*BT**15*'+REPLACE(h.BillToSAN,'-','')+'~' + @CRLF
							+ 'N1*ST**15*'+REPLACE(h.ShipToSAN,'-','')+'~' + @CRLF
							+ 'N1*VN**15*'+REPLACE(h.ShipFromSAN,'-','')+'~' + @CRLF
							+  dbo.EDIfn_GetPODetails(h.PONumber)
							+ 'CTT*'+CONVERT(VARCHAR(4),h.TotalLines)+'*'+CONVERT(VARCHAR(10),h.TotalQty)+'~' + @CRLF
							+ 'SE*'+CONVERT(VARCHAR(10),(8+(h.TotalLines*2)))+'*000000003~' + @CRLF
							+ 'GE*1*000000002~' + @CRLF
							+ 'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~')),1) 
				END AS [FileText]
			FROM [850_PO_Hdr] h 
				INNER JOIN [850_PO_Dtl] d 
					ON h.OrdID=d.OrdID
				INNER JOIN Vendor_SAN_Codes v 
					ON h.VendorID=v.VendorID
			WHERE h.Processed=0 
				AND v.processor='PUBNET' 
				AND h.VendorID=@curVend 
				AND h.PONumber NOT IN (SELECT PONumber FROM #ords GROUP BY PONumber)
		
		-- Update next
		IF (SELECT COUNT(DISTINCT POnumber) FROM [850_PO_Hdr] WHERE Processed=0 AND VendorID=@curVend AND PONumber NOT IN (SELECT PONumber FROM #ords GROUP BY PONumber))=0
			BEGIN
				SET @curloop = @curloop+1
			END
	END
	-- Get the results
	SELECT DISTINCT PONumber, FileText 
	FROM #ords

	-- Clean up
	DROP TABLE #vends
	DROP TABLE #ords
END
GO
PRINT N'Altering [dbo].[ProcessPUBNET_InvAck]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Builds a list of Invoice ACKs to be exported to SFPT folders thru EDI
-- =============================================
ALTER PROCEDURE [dbo].[ProcessPUBNET_InvAck]
AS

BEGIN
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @CRLF AS VARCHAR(2) = CHAR(13) + CHAR(10)

	SELECT DISTINCT 
		 MAX(h.InvoiceID) AS [InvoiceID]
		,MAX(h.InvoiceNo)[InvoiceNo]
		,CASE WHEN v.[Binary]=0 
			THEN	'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'
					+ CAST(MAX(h.ShipFromSAN) AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),MAX(h.IssueDate),12)+'*'
					+ REPLACE(CONVERT(VARCHAR(5),MAX(h.InsertDateTime),108),':','')+'*U*00200*'+RIGHT('0000000000'+h.ReferenceNo,9)+'*0*P*>~' + @CRLF
					+'GS*FA*760985X*'+MAX(h.ShipFromSAN)+'*'+CONVERT(VARCHAR(6),MAX(h.IssueDate),12)+'*'
					+ REPLACE(CONVERT(VARCHAR(5),MAX(h.InsertDateTime),108),':','')+'*000000002*X*003060~' + @CRLF
					+ 'ST*997*000000001~' +  @CRLF
					+ 'AK1*IN*'+CONVERT(VARCHAR(12),RIGHT(REPLICATE('0',9)+h.GSNo,9))+'~' +  @CRLF
					-- + dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo)
					+ 'AK9*A*'+CONVERT(VARCHAR(10),((COUNT(GSNo))))+'*'+CONVERT(VARCHAR(10),((COUNT(GSNo))))+'*'+CONVERT(VARCHAR(10),((COUNT(GSNo))))+'~' + @CRLF
					+ 'SE*'+CONVERT(VARCHAR(10),(('4')))+'*000000001~' + @CRLF
					+ 'GE*1*000000002~' + @CRLF
					+ 'IEA*1*'+RIGHT('0000000000'+h.ReferenceNo,9)+'~'
			ELSE	CONVERT(VARCHAR(MAX),CONVERT(VARBINARY(MAX),CONVERT(VARCHAR(MAX),
					'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'
					+ CAST(MAX(h.ShipFromSAN) AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),MAX(h.IssueDate),12)+'*'
					+ REPLACE(CONVERT(VARCHAR(5),max(h.InsertDateTime),108),':','')+'*U*00200*'+RIGHT('0000000000'+h.ReferenceNo,9)+'*0*P*>~' + @CRLF
					+'GS*FA*760985X*'+MAX(h.ShipFromSAN)+'*'+CONVERT(VARCHAR(6),MAX(h.IssueDate),12)+'*'
					+ REPLACE(CONVERT(VARCHAR(5),MAX(h.InsertDateTime),108),':','')+'*000000002*X*003060~' + @CRLF
					+'ST*997*000000001~' + @CRLF
					+'AK1*IN*'+CONVERT(varchar(12),right('000000000'+h.GSNo,9))+'~' + @CRLF
					--+ dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo)
					+'AK9*A*'+convert(varchar(10),((COUNT(GSNo))))+'*'+convert(varchar(10),((COUNT(GSNo))))+'*'+convert(varchar(10),((COUNT(GSNo))))+'~' + @CRLF
					+'SE*'+convert(varchar(10),(('4')))+'*000000001~' + @CRLF
					+'GE*1*000000002~'
					+ @CRLF
					+'IEA*1*'+RIGHT('0000000000'+h.ReferenceNo,9)+'~')),1)
		END AS [FileText]
	FROM dbo.[810_Inv_Hdr] h 
		INNER JOIN dbo.[810_Inv_Dtl] d 
			ON h.InvoiceID=d.InvoiceID
		INNER JOIN dbo.Vendor_SAN_Codes v 
			ON h.VendorID=v.VendorID
	WHERE h.InvoiceACKSent=0 
		AND v.processor='PUBNET' 
		AND h.VendorID IN (SELECT VendorID FROM dbo.Vendor_SAN_Codes WHERE Invoice997=1)
	GROUP BY h.ReferenceNo,h.GSNo,v.[Binary]

	/*
		select distinct h.InvoiceID,h.InvoiceNo, 
				case when v.Binary=0 then 
				'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'+ cast(h.ShipFromSAN as CHAR(15)) +'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')+'*:*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~'	
				+CHAR(13) + CHAR(10)
				+'GS*FA*760985X*'+h.ShipFromSAN+'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'
				+CHAR(13) + CHAR(10)
				+'ST*997*000000001~'
				+CHAR(13) + CHAR(10)
				+'AK1*IN*'+CONVERT(varchar(12),h.ReferenceNo)+'~'
				+CHAR(13) + CHAR(10)
				+ dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo)
				+'AK9*A*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'~'
				+CHAR(13) + CHAR(10)
				+'SE*'+convert(varchar(10),(('6')))+'*000000001~'
				+CHAR(13) + CHAR(10)
				+'GE*1*000000002~'
				+CHAR(13) + CHAR(10)
				+'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~'
				else
				CONVERT(varchar(max),CONVERT(varbinary(max),CONVERT(varchar(max),
				'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'+ cast(h.ShipFromSAN as CHAR(15)) +'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')+'*:*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~'	
				+CHAR(13) + CHAR(10)
				+'GS*FA*760985X*'+h.ShipFromSAN+'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'
				+CHAR(13) + CHAR(10)
				+'ST*997*000000001~'
				+CHAR(13) + CHAR(10)
				+'AK1*IN*'+CONVERT(varchar(12),h.ReferenceNo)+'~'
				+CHAR(13) + CHAR(10)
				+ dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo)
				+'AK9*A*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'~'
				+CHAR(13) + CHAR(10)
				+'SE*'+convert(varchar(10),(('6')))+'*000000001~'
				+CHAR(13) + CHAR(10)
				+'GE*1*000000002~'
				+CHAR(13) + CHAR(10)
				+'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~')),1)
				end [FileText]
		from dbo.[810_Inv_Hdr] h with(nolock) inner join dbo.[810_Inv_Dtl] d with(nolock) on h.InvoiceID=d.InvoiceID
				inner join dbo.Vendor_SAN_Codes v with(nolock) on h.VendorID=v.VendorID
		where h.InvoiceACKSent=0 and v.processor='PUBNET' and h.VendorID in (select VendorID from dbo.Vendor_SAN_Codes where Invoice997=1)
	*/
END
GO
PRINT N'Altering [dbo].[ProcessPUBNET_ResponseAck]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Builds a list of Invoice ACKs to be exported to PUBNET folders thru EDI.....>
-- =============================================
ALTER PROCEDURE [dbo].[ProcessPUBNET_ResponseAck]
AS

BEGIN
	SET NOCOUNT ON;
	DECLARE @CRLF CHAR(2) = CHAR(13)+CHAR(10)
	SELECT DISTINCT h.AckID,h.PONumber,v.ParentFolder,
			CASE WHEN v.[Binary]=0 
				THEN	 'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'+ cast(h.ShipFromSAN AS CHAR(15)) +'*'
						+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+replace(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
						+'*:*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~'	
						+@CRLF
						+'GS*FA*760985X*'+h.ShipFromSAN+'*'
						+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+replace(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'
						+@CRLF
						+'ST*997*000000001~'
						+@CRLF
						+'AK1*PR*'+CONVERT(VARCHAR(12),h.PONumber)+'~'
						+@CRLF
						+ dbo.EDIfn_GetResponseACKDtls(h.PONumber)
						+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~'
						+@CRLF
						+'SE*'+CONVERT(VARCHAR(10),(('6')))+'*000000001~'
						+@CRLF
						+'GE*1*000000002~'
						+@CRLF
						+'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~'
				ELSE	CONVERT(VARCHAR(MAX),CONVERT(VARBINARY(MAX),CONVERT(VARCHAR(MAX),
						'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'+ cast(h.ShipFromSAN AS CHAR(15)) +'*'
						+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+replace(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
						+'*:*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~'	
						+@CRLF
						+'GS*FA*760985X*'+h.ShipFromSAN+'*'
						+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+replace(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'
						+@CRLF
						+'ST*997*000000001~'
						+@CRLF
						+'AK1*IN*'+CONVERT(VARCHAR(12),h.PONumber)+'~'
						+@CRLF
						+ dbo.EDIfn_GetResponseACKDtls(h.PONumber)
						+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~'
						+@CRLF
						+'SE*'+CONVERT(VARCHAR(10),(('6')))+'*000000001~'
						+@CRLF+'GE*1*000000002~'
						+@CRLF
						+'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~')),1)
			END [FileText]
	FROM [855_Ack_Hdr] h with(nolock) 
		INNER JOIN [855_Ack_Dtl] d with(nolock) 
			ON h.AckID=d.AckID
		INNER JOIN Vendor_SAN_Codes v with(nolock) 
			ON h.VendorID=v.VendorID
	WHERE h.ResponseACKSent=0 
		AND v.processor='PUBNET' 
		AND h.VendorID IN (SELECT VendorID FROM Vendor_SAN_Codes WHERE ACK997=1)
	END
GO
PRINT N'Altering [dbo].[ProcessPUBNET_ShipNoticeAck]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Builds a list of Invoice ACKs to be exported to PUBNET folders thru EDI.....>
-- =============================================
ALTER PROCEDURE [dbo].[ProcessPUBNET_ShipNoticeAck]
AS

BEGIN

	SET NOCOUNT ON;
	DECLARE @CRLF CHAR(2) = CHAR(13) + CHAR(10)
	
	SELECT DISTINCT 
			 h.ShipID,h.ASNNo+'-'+h.PONumber
			,v.ParentFolder
			, CASE WHEN v.[Binary]=0
					THEN	'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'
							+ CAST(h.ShipFromSAN as CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'
							+ REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*:*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~' +@CRLF
							+ 'GS*FA*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'  +@CRLF
							+ 'ST*997*000000001~' + @CRLF
							+ 'AK1*SH*'+CONVERT(VARCHAR(12),h.ASNNo)+'~' +@CRLF
							+ dbo.EDIfn_GetShipNoticeACKDtls(h.PONumber,h.ASNNo)
							+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
							+'SE*'+CONVERT(VARCHAR(10),(('6')))+'*000000001~' +@CRLF
							+'GE*1*000000002~' +@CRLF
							+'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~' 
					ELSE	CONVERT(VARCHAR(max),CONVERT(varbinary(max),CONVERT(VARCHAR(max),
							'ISA*00*997       *00*          *ZZ*760985X        *ZZ*'
							+ CAST(h.ShipFromSAN as CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*:*00200*'+RIGHT('0000000000'+h.PONumber,9)+'*0*P*>~' +@CRLF
							+'GS*FA*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
							+'ST*997*000000001~' +@CRLF
							+'AK1*IN*'+CONVERT(VARCHAR(12),h.ASNNo)+'~' +@CRLF
							+ dbo.EDIfn_GetShipNoticeACKDtls(h.PONumber,h.ASNNo)
							+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
							+'SE*'+CONVERT(VARCHAR(10),(('6')))+'*000000001~' +@CRLF
							+'GE*1*000000002~'  +@CRLF
							+'IEA*1*'+RIGHT('0000000000'+h.PONumber,9)+'~')),1)
			END AS[FileText]
	FROM [856_ASN_Hdr] h with(nolock) 
		INNER JOIN [856_ASN_Dtl] d with(nolock) 
			ON h.ShipID=d.ShipID
		INNER JOIN Vendor_SAN_Codes v with(nolock) 
			ON h.VendorID=v.VendorID
	WHERE h.ASNACKSent=0 
		AND v.processor='PUBNET' 
		AND h.VendorID in (SELECT VendorID FROM Vendor_SAN_Codes WHERE ASN997=1)
END
GO
PRINT N'Altering [dbo].[ProcessReceivedFiles]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <10/4/2013>
-- Description:	<Reads AND updates EDI DB with imported files.....>
-- =============================================
ALTER PROCEDURE [dbo].[ProcessReceivedFiles]
	 @FileName VARCHAR(100)
	,@FileText VARCHAR(MAX) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM interfering with SELECT statements.
	SET NOCOUNT ON;

	----read the text AND split INTO a table for processing....
	DECLARE	 @FileType VARCHAR(20)
			,@Listtring VARCHAR(MAX)  
			,@ediVersion CHAR(4)	
			,@fileNo VARCHAR(30)

	--DECLARE @FileText VARCHAR(MAX) 
	--DECLARE @FileName VARCHAR(100)
	--SET @FileName='855_000069812.txt'
	------PO string........................................................
	----SET @Listtring = 'ISA~GS~ST*850*00001~BEG*00*NE*104824**20130311~DTM**20130311~N1*ST*Half Price Books #001*15*00ST~N1*BT*Half Price Books Corporate Office*15*00BT~N1*VN*Baker & Taylor Distribution*15*00VN~N2*Crystal Sweeney~N2*AcCOUNTingOffice~N3*5803 E. Northwest Hwy.~N3*5803 E. Northwest Hwy.~N3*PO Box 277938~N4*Dallas*TX*75231*USA~N4*Dallas*TX*75231~N4*Atlanta*GA*30384~PO1*1*3*EA*11.3900*EN*9781451627299*UP*~IT8*N~PO1*2*12*EA*16.5200*EN*9780446583978*UP*~IT8*N~PO1*3*12*EA*17.1000*EN*9780316036313*UP*~IT8*N~PO1*4*15*EA*8.5500*EN*9780425263907*UP*~IT8*N~PO1*5*15*EA*19.9500*EN*9780307464873*UP*~IT8*N~PO1*6*7*EA*17.0900*EN*9781401233792*UP*~IT8*N~PO1*7*12*EA*16.5000*EN*9780399157561*UP*~IT8*N~PO1*8*25*EA*9.0900*EN*9780345803498*UP*~IT8*N~PO1*9*25*EA*9.0900*EN*9780345803504*UP*~IT8*N~PO1*10*25*EA*9.0900*EN*9780345803481*UP*~IT8*N~PO1*11*12*EA*5.1200*EN*9780553579901*UP*~IT8*N~PO1*12*10*EA*14.2400*EN*9781401235413*UP*~IT8*N~PO1*13*5*EA*8.5500*EN*9780375507250*UP*~IT8*N~PO1*14*2*EA*19.9500*EN*9780553801477*UP*~IT8*N~CTT*14*180~SE*44*00001~'
	------Acknowledge string..............................................
	--SET @FileText = ''
	------Invoice string.....................................................
	----SET @Listtring = 'ISA|00|810BK3060 |00|          |ZZ|7214119        |ZZ|760985X        |131015|1132|U|00300|013113257|0|P|>GS|IN|7214119|760985X|131015|1132|013113257|X|003060ST|810|0001BIG|131015|TESTINV-1132|131015|TESTPO-111057CUR|SE|USDN1|ST||15|760985XN1|BT||15|760985XN1|VN||15|7214119ITD|01|3|||||30DTM|011|131015|||20IT1|1|1|EA|590.00|NT|IB|0835247414|PO|TESTPO-111057CTP||SLP|590.00|||DIS|1PID|F||||SUBJECT GUIDE TO BIP 2005-2006TDS|59000CAD|M||||USPSSAC|C|G830|||0|||||||06CTT|1|1SE|16|0001GE|1|013113257IEA|1|013113257'

	SET @Listtring = LTRIM(RTRIM(@FileText))
	IF RIGHT(LTRIM(RTRIM(@Listtring)),1)='|'  BEGIN SET @Listtring = LTRIM(RTRIM(REPLACE(@Listtring,'|',''))) END
	SET @Listtring = REPLACE(@Listtring,'*','|') ----run REPLACE to acCOUNT for both 3060 AND 4010 versions......

	SET @FileType = LTRIM(RTRIM(SUBSTRING(REPLACE(@FileName,'HPB',''),1,3)))
	IF @FileType NOT IN ('855','856','810') OR UPPER(RIGHT(@FileName,5)) like 'XX%'
		BEGIN
			SET @FileType = LTRIM(RTRIM(RIGHT(REPLACE(@FileName,'HPB',''),3)))
			SET @fileNo = REPLACE(RIGHT(RTRIM(@Listtring),9),'~','')
			SET @ediVersion='4010'
		END
	ELSE
		BEGIN
			SET @fileNo = CASE WHEN LEFT(@FileName,3)='HPB' THEN REPLACE(RIGHT(RTRIM(@Listtring),9),'~','') ELSE RIGHT(REPLACE(@FileName,'.txt',''),9) END
			SET @ediVersion='3060'
		END
	--add REPLACE string to add tilde for parsing.....
	IF @FileType ='855'
		BEGIN
			SET @Listtring = REPLACE(@Listtring,'|B5|','|B5|^')
			SET @Listtring = REPLACE(@Listtring,'|B6|','^|B6|')
		END
	SET @Listtring = REPLACE(@Listtring,'GS|','~GS|')
	SET @Listtring = REPLACE(@Listtring,'ST|856','~ST|856')
	SET @Listtring = REPLACE(@Listtring,'ST|855','~ST|855')
	SET @Listtring = REPLACE(@Listtring,'ST|810','~ST|810')
	SET @Listtring = REPLACE(@Listtring,'BAK|','~BAK|')
	IF @FileType ='856'
		BEGIN
			SET @Listtring = REPLACE(@Listtring,'BSN|','~BSN|')
			SET @Listtring = REPLACE(@Listtring,'PRF|','~PRF|')
			SET @Listtring = REPLACE(@Listtring,'REF|BM','~REF|BM')
			SET @Listtring = REPLACE(@Listtring,'REF|PK','~PEF|PK')
			SET @Listtring = REPLACE(@Listtring,'REF|CN','~RRE|CN')
			SET @Listtring = REPLACE(@Listtring,'REF|MA','~PEF|MA')
			SET @Listtring = REPLACE(@Listtring,'REF|IV','~PIV|IV')
			SET @Listtring = REPLACE(@Listtring,'TD1|','~TD1|')
			SET @Listtring = REPLACE(@Listtring,'TD5|','~TD5|')
			SET @Listtring = REPLACE(@Listtring,'LIN|','~LIN|')
			SET @Listtring = REPLACE(@Listtring,'MEA|','~MEA|')
			SET @Listtring = REPLACE(@Listtring,'MAN|GM','~MAN|GM')
			SET @Listtring = REPLACE(@Listtring,'HL|','~HL|')
			SET @Listtring = REPLACE(@Listtring,'FOB|PO','~FOB|PO')
			SET @Listtring = REPLACE(@Listtring,'~LIN||EN|','~LIN||IB|0|EN|')
			SET @Listtring = REPLACE(@Listtring,'~LIN||B5||B6||EN|','~LIN||IB|0|B5||B6||EN|')
		END
	IF @FileType ='810'
		BEGIN
			SET @Listtring = REPLACE(@Listtring,'BIG|','~BIG|')
			SET @Listtring = REPLACE(@Listtring,'TDS|','~TDS|')
			SET @Listtring = REPLACE(@Listtring,'SAC|','~SAC|')
			SET @Listtring = REPLACE(@Listtring,'IT1|','~IT1|')
			SET @Listtring = REPLACE(@Listtring,'|NT|EN|','|NT|IB||EN|')
			SET @Listtring = REPLACE(@Listtring,'|NT|B5||B6||EN|','|NT|IB||B5||B6||EN|')
			SET @Listtring = REPLACE(@Listtring,'CUR|SE|','~CUR|S:E|')
		END
	SET @Listtring = REPLACE(@Listtring,'SE|','~SE|')
	SET @Listtring = REPLACE(@Listtring,'SN1|','~SN1|')
	SET @Listtring = REPLACE(@Listtring,'N1|','~N1|')
	SET @Listtring = REPLACE(@Listtring,'~S~N1|','~SN1|')
	SET @Listtring = REPLACE(@Listtring,'PO1|','~PO1|')
	SET @Listtring = REPLACE(@Listtring,'CTP|','~CTP|')
	SET @Listtring = REPLACE(@Listtring,'PID|','~PID|')
	SET @Listtring = REPLACE(@Listtring,'DTM|017','~DDTM|017')
	SET @Listtring = REPLACE(@Listtring,'DTM|011','~DTM|011')
	SET @Listtring = REPLACE(@Listtring,'ACK|IA','~ACK|IA')
	SET @Listtring = REPLACE(@Listtring,'ACK|IQ','~ACK|IQ')
	SET @Listtring = REPLACE(@Listtring,'ACK|IR','~ACK|IR')
	SET @Listtring = REPLACE(@Listtring,'ACK|IB','~ACK|IB')
	SET @Listtring = REPLACE(@Listtring,'CAD|','~CAD|')
	SET @Listtring = REPLACE(@Listtring,'CUR|','~CUR|')
	SET @Listtring = REPLACE(@Listtring,'~~CUR|','~CUR|')
	SET @Listtring = REPLACE(@Listtring,'CTT|','~CTT|')
	SET @Listtring = REPLACE(@Listtring,'IEA|1|','~IEA|1|')
	SET @Listtring = REPLACE(@Listtring,CHAR(13),'')
	SET @Listtring = REPLACE(@Listtring,CHAR(10),'')
	SET @Listtring = REPLACE(@Listtring,'~~','~')

	DECLARE	 @rVal INT
			, @err INT
	SET @rVal = 0
	SET @err = 0
	DECLARE	 @Sender VARCHAR(15)
			,@Receiver VARCHAR(15)
			,@filePO VARCHAR(20)
			,@fileInv VARCHAR(20)
			,@fileASN VARCHAR(20)
			,@_FileType VARCHAR(6)
			,@issueDate VARCHAR(12)
			,@amtCode VARCHAR(4)
			,@LineSts CHAR(2)
			,@LineCode CHAR(2)
			,@LineQty INT
			,@curID VARCHAR(20)
			,@DisPct VARCHAR(6)
			,@RetAmt VARCHAR(8)
			,@ToPay VARCHAR(10)
			,@addChrg VARCHAR(10)
			,@chrgCode VARCHAR(10)
			,@lastID VARCHAR(20)
			,@lastTracking VARCHAR(30)
			,@UOM VARCHAR(6)
			,@pkgNo VARCHAR(30)
			,@trkNo VARCHAR(30)
			,@InvRef VARCHAR(15)
			,@ASNRef VARCHAR(15)
			,@ACKRef VARCHAR(15)
			,@carrier VARCHAR(50)
			,@STINVNo VARCHAR(10)
			,@STASNNo VARCHAR(10)
			,@STACKNo VARCHAR(10)
			,@GSNo VARCHAR(10)
			,@tmpString VARCHAR(250)
	DECLARE @ACKHdrs   TABLE (RowID INT identity(1,1),TypeCode VARCHAR(12),Sender VARCHAR(15),Receiver VARCHAR(15),FileType VARCHAR(20),IssueDate VARCHAR(12),FilePO VARCHAR(20),STIDNo VARCHAR(10), GSNo VARCHAR(10))
	DECLARE @ASNHdrs   TABLE (RowID INT identity(1,1),TypeCode VARCHAR(12),Sender VARCHAR(15),Receiver VARCHAR(15),FileType VARCHAR(20),IssueDate VARCHAR(12),FilePO VARCHAR(20),FileASN VARCHAR(20),AmtCode VARCHAR(4),Carrier VARCHAR(50),STIDNo VARCHAR(10), GSNo VARCHAR(10))
	DECLARE @INVHdrs   TABLE (RowID INT identity(1,1),TypeCode VARCHAR(12),Sender VARCHAR(15),Receiver VARCHAR(15),FileType VARCHAR(20),IssueDate VARCHAR(12),FilePO VARCHAR(20),FileINV VARCHAR(20),AmtCode VARCHAR(4),DisPct VARCHAR(6), STIDNo VARCHAR(10), GSNo VARCHAR(10))
	DECLARE @ACKDtl    TABLE (PONumber VARCHAR(20),LineNum VARCHAR(6),Qty VARCHAR(6),UOM VARCHAR(3),UnitPrice VARCHAR(10),PriceCode VARCHAR(4),ItemIDCode VARCHAR(4),ItemID VARCHAR(15),AckQty INT,ShipQty INT,CanQty INT,BakQty INT,LineSts CHAR(2),LineCode CHAR(2))
	DECLARE @ASNDtl    TABLE (PONumber VARCHAR(20),LineNum VARCHAR(6),Qty VARCHAR(6),UOM VARCHAR(3),UnitPrice VARCHAR(10),PriceCode VARCHAR(4),ItemIDCode VARCHAR(4),ItemID VARCHAR(15),AckQty INT,ShipQty INT,CanQty INT,BakQty INT,LineSts CHAR(2),LineCode CHAR(2),PkgNo VARCHAR(30),TrkNo VARCHAR(30))
	DECLARE @INVDtl    TABLE (PONumber VARCHAR(20),LineNum VARCHAR(6),Qty VARCHAR(6),UOM VARCHAR(3),UnitPrice VARCHAR(10),PriceCode VARCHAR(4),ItemIDCode VARCHAR(4),ItemID VARCHAR(15),FileINV VARCHAR(20),RetAmt VARCHAR(8))
	DECLARE @INVAdds   TABLE (PONumber VARCHAR(20),FileINV VARCHAR(20),ChargeCode VARCHAR(10),ChargeAmt VARCHAR(10))	
	DECLARE @listTable TABLE (RowID INT identity (1,1),[Type] VARCHAR(6),LineNum VARCHAR(6),Qty VARCHAR(6),[Key] VARCHAR(20), Data VARCHAR(250))

	IF (LEFT(RIGHT(REPLACE(@Listtring,'~',''),15),3)='IEA' OR LEFT(RIGHT(REPLACE(@Listtring,'~',''),16),3)='IEA') AND @fileNo=REPLACE(RIGHT(@Listtring,9),'~','')	----check to ensure there IS a complete file......
		BEGIN
			IF LTRIM(RTRIM(@fileType)) = '855'	----Read IN Acknowledge File....................................................................................
				BEGIN
					----------------------------------Read input file AND build temp table.........................................................................
					WHILE LEN(@Listtring) > 0
						BEGIN
							SELECT	 @err = @@ERROR
									,@tmpString = LEFT(@Listtring, ISNULL(NULLIF(CHARINDEX('~', @Listtring) - 1, -1),LEN(@Listtring)))
									,@Listtring = SUBSTRING(@Listtring,ISNULL(NULLIF(CHARINDEX('~', @Listtring), 0),LEN(@Listtring)) + 1, LEN(@Listtring))
							IF LEFT(@tmpstring,2) IN ('GS') --File data
								BEGIN
									--SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''), 
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1))),
									--LTRIM(RTRIM(@tmpString))
									SET @Sender = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
									SET @Receiver = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
									SET @issueDate = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)))
									SET @ediVersion=ISNULL((SELECT EDIVersion FROM dbo.Vendor_SAN_Codes WHERE SANCode=@Sender),@ediVersion)
									SET @GSNo=SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)))			  
									IF @err = 0 BEGIN SET @err = @@ERROR END	
								END
							ELSE IF LEFT(@tmpstring,2) IN ('ST') --File data
								BEGIN
									--SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''), 
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
									--LTRIM(RTRIM(@tmpString))
									SET @_FileType = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
									--SET @issueDate = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)))
									SET @STACKNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))			  
									IF @err = 0 BEGIN SET @err = @@ERROR END	
								END
							ELSE IF LEFT(@tmpstring,3) IN ('BAK') --PO Hdr data
								BEGIN
									--SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''), 
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))),
									--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1))),
									--LTRIM(RTRIM(@tmpString))
									SET @filePO = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
									SET @filePO = LTRIM(RTRIM(REPLACE(REPLACE(@filePO,'-',''),'reship','')))
									SET @issueDate = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)))
									IF @err = 0 BEGIN SET @err = @@ERROR END	
								END
							ELSE IF LEFT(@tmpstring,3) IN ('ACK') --PO Dtl data
								BEGIN
									SET @LineSts = ''
									SET @LineQty = 0 
									IF LEN(@tmpstring)>=10
										BEGIN
											--SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''), 
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1))),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1))),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1))),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))),
											--	SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1))),
												--LTRIM(RTRIM(@tmpString))
												
												SET @curID = @lastID -- SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)))
												SET @LineQty = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
												SET @LineSts = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
												SET @LineCode = RIGHT(REPLACE(REPLACE(@tmpString,CHAR(13),''),CHAR(10),''),2)
																
												UPDATE @ACKDtl
												SET AckQty = @LineQty, ShipQty = @LineQty, LineSts=@LineSts, LineCode = @LineCode
												WHERE ItemID=@curID
												
												IF @err = 0 BEGIN SET @err = @@ERROR END	
										END
									ELSE IF LEN(@tmpstring)<10
										BEGIN
											SET @LineCode = ''
											--SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-0),'|',''), REPLACE(RIGHT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''),REPLACE(RIGHT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|','')
						
											SET @LineCode = REPLACE(RIGHT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|','')
											UPDATE @ACKDtl
											SET LineCode = @LineCode
											WHERE ItemID=@curID
											IF @err = 0 BEGIN SET @err = @@ERROR END	
										END		 
								END
							ELSE IF LEFT(@tmpstring,2) IN ('PO') --PO Dtl data
								BEGIN
								--SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''), 
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1))),
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))),
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1))),
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1))),
								--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))),
								--LTRIM(RTRIM(@tmpString))
							IF EXISTS(SELECT POnumber FROM dbo.[850_PO_Hdr] WHERE ponumber=@filePO)
								BEGIN
									INSERT INTO @ACKHdrs
										SELECT 'ACK',@Sender[Sender],@Receiver[Receiver],@fileType[FileType],@issueDate[IssueDate],@filePO[FilePO],@STACKNo[STIDNo],@GSNo[GSNo]
										WHERE @filePO NOT IN (SELECT DISTINCT FilePO FROM @ACKHdrs)
								 
									INSERT INTO @ACKDtl
										SELECT	 @FilePO, RIGHT(SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),4)
												,SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
												,SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
												,SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)))
												,SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
												,CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1))) ='EN'
													THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)))
													ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1))) 
												 END
												,CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1))) ='EN'
													THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)))
													ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))) 
												 END
												,0 AS [AckQty],0 AS [ShipQty],0 AS [CanQty],0 AS [BakQty],'' AS [LineSTS],'' AS [LineCode]
									
									SET @lastID = CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1))) ='EN'
														THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)))
														ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))) 
												  END
									IF @err = 0 BEGIN SET @err = @@ERROR END
								END
						END
					ELSE IF LEFT(@tmpstring,3) IN ('IEA') --PO Hdr data
						BEGIN
						  SET @ACKRef = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)
						END	
				END
		END	
	ELSE IF LTRIM(RTRIM(@fileType)) = '856'	----Read IN ASN File....................................................................................
		BEGIN
		----------------------------------Read input file AND build temp table.........................................................................
		 WHILE LEN(@Listtring) > 0
			BEGIN
				SET @tmpString = LEFT(@Listtring, ISNULL(NULLIF(CHARINDEX('~', @Listtring) - 1, -1),LEN(@Listtring)))
				SET @Listtring = SUBSTRING(@Listtring,ISNULL(NULLIF(CHARINDEX('~', @Listtring), 0),LEN(@Listtring)) + 1, LEN(@Listtring))
				IF LEFT(@tmpstring,2) IN ('GS') --File data
					BEGIN
						SElECT	 @Sender = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
								,@Receiver = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
								,@ediVersion=ISNULL((SELECT EDIVersion FROM dbo.Vendor_SAN_Codes WHERE SANCode=@Sender),@ediVersion)
								,@GSNo=SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)))
			  			IF @err = 0 BEGIN SET @err = @@ERROR END
					END
				ELSE IF LEFT(@tmpstring,2) IN ('ST') --File data
					BEGIN
						SET @_FileType = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
						SET @STASNNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
						
						IF @err = 0 BEGIN SET @err = @@ERROR END
					END
				ELSE IF LEFT(@tmpstring,3) IN ('TD5') --File data
				BEGIN
					SET @carrier = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+50-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
					IF @ediVersion='3060' AND @Sender='8600023'----Scholastic
						BEGIN
							SET @carrier = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
		 				END
					IF @ediVersion='3060' AND @Sender='2002086'----HarperCollins
						BEGIN
							SET @carrier = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
		 				END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('PRF') --PO Hdr data
				BEGIN
				   IF @ediVersion='3060' AND @Sender<>'2153793'
						BEGIN
							SET @filePO = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
							SET @filePO = LTRIM(RTRIM(REPLACE(REPLACE(@filePO,'-',''),'reship','')))
						END
					ELSE IF @ediVersion='3060' AND @Sender='2153793'
						BEGIN
							SET @filePO=SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,6)
							SET @filePO = LTRIM(RTRIM(REPLACE(REPLACE(@filePO,'-',''),'reship','')))
						END
					ELSE IF @ediVersion='4010'
						BEGIN
							SET @filePO=SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,6)
							SET @filePO = LTRIM(RTRIM(REPLACE(REPLACE(@filePO,'-',''),'reship','')))
						END
				  IF @err = 0 BEGIN SET @err = @@ERROR END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('REF') --PO Hdr data  
				BEGIN
					--IDMACMDIST & IDS&SDISTR
					IF @ediVersion='3060' OR @Sender IN ('6315011','2002442')  SET @fileASN = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1+1+1))
					IF @err = 0 BEGIN SET @err = @@ERROR END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('PEF') ----RandomHouse
				IF @ediVersion='4010' SET @fileASN = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1+1+1))
			ELSE IF LEFT(@tmpstring,3) IN ('RRE') ----HarperCollins
				IF @ediVersion='3060'
					SET @trkNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1+15))
				ELSE
					SET @trkNo = ''
			ELSE IF LEFT(@tmpstring,3) IN ('DTM') --File data
				SET @issueDate = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
			ELSE IF LEFT(@tmpstring,3) IN ('CUR') --PO Hdr data
				BEGIN
				  SET @amtCode = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
				  IF @err = 0 BEGIN SET @err = @@ERROR END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('MAN') --PO Hdr data
				BEGIN
						IF @ediVersion='3060' AND @Sender NOT IN ('2002086','8600023') ----NOT HarperCollins OR Scholastic
							BEGIN
								 SET @pkgNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
								 SET @trkNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
								 IF @pkgNo=@trkNo
									BEGIN
										SET @pkgNo =SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1+15))
					 					SET @trkNo = ''
									END	
							END	
						ELSE IF @ediVersion='3060' AND @Sender IN ('2002086','8600023')	----HarperCollins & Scholastic
							 SET @pkgNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1+15))
						ELSE IF @ediVersion='4010'
							BEGIN
								 SET @pkgNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
								 SET @trkNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
								
								 IF @pkgNo=@trkNo
									BEGIN
										SET @trkNo =SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1+15))
				 						SET @pkgNo = ''
									END	
							END	
					  IF @err = 0 BEGIN SET @err = @@ERROR END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('LIN') --PO Dtl data
				BEGIN
					INSERT INTO @ASNHdrs
						SELECT 'ASN',@Sender[Sender],@Receiver[Receiver],@fileType[FileType],@issueDate[IssueDate],@filePO[FilePO],@fileASN[FileASN],@amtCode[AmtCode],@carrier[Carrier],@STASNNo[STIDNo],@GSNo[GSNo]
						WHERE @filePO NOT IN (SELECT DISTINCT FilePO FROM @ASNHdrs) --AND @filePO NOT IN (SELECT DISTINCT FilePO FROM @ASNHdrs)		  
					INSERT INTO @ASNDtl
						SELECT @FilePO,'','','','','',
							CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))) ='EN'
								THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)))
								ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)) END,
							CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))) ='EN'
								THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
								ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))) END,
							0 AS [AckQty],0 AS [ShipQty],0 AS [CanQty],0 AS [BakQty],'' AS [LineSTS],'' AS [LineCode],@pkgNo,@trkNo
						SET @lastID = CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))) ='EN'
							THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
							ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))) 
						END
						SET @lastTracking = CASE WHEN @pkgNo=''THEN @trkNo ELSE @pkgNo END
						IF @err = 0 BEGIN SET @err = @@ERROR END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('SN1') --PO Dtl data
				BEGIN
					SELECT	 @LineSts = ''
							,@LineQty = 0 
					SELECT   @curID = @lastID -- SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)))
							,@LineQty = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
							,@UOM = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
					UPDATE @ASNDtl
						SET Qty = @LineQty, ShipQty = @LineQty, UOM = CASE WHEN len(@UOM)>2 THEN LEFT(@UOM,2) ELSE @UOM END
					WHERE ItemID=@curID AND PONumber=@filePO AND @lastTracking IN (PkgNo,TrkNo)
					IF @err = 0 BEGIN SET @err = @@ERROR END
				END
			ELSE IF LEFT(@tmpstring,3) IN ('IEA') --PO Hdr data
				BEGIN
					SET @ASNRef = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)
					--SELECT @ASNRef
				END	
		END
	END
	ELSE IF LTRIM(RTRIM(@fileType)) = '810'	----Read IN Invoice File....................................................................................
		BEGIN
		----------------------------------Read input file AND build temp table.........................................................................
		 WHILE LEN(@Listtring) > 0
			BEGIN
		  SELECT @tmpString = LEFT(@Listtring, ISNULL(NULLIF(CHARINDEX('~', @Listtring) - 1, -1),LEN(@Listtring)))
				,@Listtring = SUBSTRING(@Listtring,ISNULL(NULLIF(CHARINDEX('~', @Listtring), 0),LEN(@Listtring)) + 1, LEN(@Listtring))
		  --SELECT @tmpstring
			IF LEFT(@tmpstring,2) IN ('GS') --File data
			BEGIN
			  SELECT @Sender = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
					,@Receiver = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))
					,@ediVersion=ISNULL((SELECT EDIVersion FROM dbo.Vendor_SAN_Codes WHERE SANCode=@Sender),@ediVersion)
					,@GSNo=SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)))
			  IF @err = 0 BEGIN SET @err = @@ERROR END
			END
			ELSE IF LEFT(@tmpstring,2) IN ('ST') --File data
			BEGIN
			  SELECT @_FileType = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
					,@STINVNo = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
		END
			ELSE IF LEFT(@tmpstring,3) IN ('BIG') --PO Hdr data
			BEGIN
			  SET @fileInv = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
			  SET @filePO = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)))
			  SET @filePO = LTRIM(RTRIM(REPLACE(REPLACE(@filePO,'-',''),'reship','')))
			  
			  IF @ediVersion='4010'
				BEGIN
					SET @issueDate = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
				END
			  IF @err = 0 BEGIN SET @err = @@ERROR END
			END
			ELSE IF LEFT(@tmpstring,3) IN ('DTM') --File data
			BEGIN
			 IF @ediVersion='3060'
				BEGIN
					SET @issueDate = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
				END
			END
			ELSE IF LEFT(@tmpstring,3) IN ('CUR') --PO Hdr data
			BEGIN
				  IF @ediVersion='3060'
					BEGIN
						SET @amtCode = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
					END
				  ELSE IF @ediVersion='4010'
					BEGIN
						SET @amtCode = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
					END
			  IF @err = 0 BEGIN SET @err = @@ERROR END
			END
			ELSE IF LEFT(@tmpstring,3) IN ('CTP') --PO Hdr data
			BEGIN
			    SET @DisPct = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)))
				SET @RetAmt = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)))

				UPDATE @INVHdrs
					SET AmtCode=@amtCode,DisPct=@DisPct
				WHERE FilePO=@filePO
				
				UPDATE @INVDtl
					SET RetAmt=@RetAmt
				WHERE ItemID=@lastID
			  IF @err = 0 BEGIN SET @err = @@ERROR END
			END	
			ELSE IF LEFT(@tmpstring,3) IN ('SAC') --File data
			BEGIN
				SET @chrgCode = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1))
			    SET @addChrg = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)))
			    SET @addChrg = CASE LEN(@addChrg) WHEN 1 THEN '000'+@addChrg WHEN 2 THEN '00'+@addChrg WHEN 3 THEN '0'+@addChrg ELSE @addChrg END
				IF NOT EXISTS(SELECT PONumber FROM @INVAdds WHERE PONumber=@filePO AND FileINV=@fileInv AND ChargeCode=@chrgCode) AND CAST(@addChrg AS INT) <> 0
					BEGIN
						INSERT INTO @INVAdds
						SELECT @filePO,@fileInv,@chrgCode,@addChrg
					END
			END
			ELSE IF LEFT(@tmpstring,3) IN ('TDS') --PO Hdr data
			BEGIN
			  --SELECT REPLACE(LEFT(@tmpString,CHARINDEX('|',@tmpString,1)-1),'|',''), REPLACE(RIGHT(@tmpString,CHARINDEX('|',@tmpString,1)+1),'|','')
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1)
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1))),
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))),
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1))),
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1))),
					--SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))),
					--LTRIM(RTRIM(@tmpString))
			  IF @err = 0 BEGIN SET @err = @@ERROR END
			END			
			ELSE IF LEFT(@tmpstring,3) IN ('IT1') --PO Dtl data
			BEGIN
			 --IF EXISTS(SELECT POnumber FROM dbo.[850_PO_Hdr] WHERE ponumber=@filePO)
				--	BEGIN
						  INSERT INTO @INVHdrs
						  SELECT 'INV',@Sender[Sender],@Receiver[Receiver],@fileType[FileType],@issueDate[IssueDate],@filePO[FilePO],@fileINV[FileINV],@amtCode[AmtCode],@DisPct[DisPct],@STINVNo[STIDNo],@GSNo[GSNo]
						  WHERE @fileInv NOT IN (SELECT DISTINCT FileINV FROM @INVHdrs) --AND @filePO NOT IN (SELECT DISTINCT FilePO FROM @INVHdrs)
					
						  INSERT INTO @INVDtl
						  SELECT @FilePO, SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,1)+1,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)-CHARINDEX('|',@tmpString,1)-1),
								SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-1)),
								SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1))),
								SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1))),
								SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1))),
								CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1))) ='EN'
									THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)))
									ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1))) END,
								CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1))) ='EN'
									THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)))
									ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))) END,
									@fileInv,@RetAmt
							SET @lastID = CASE WHEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1))) ='EN'
									THEN SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1)+1)+1)))
									ELSE SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)+1)+1)+1))) END
							IF @err = 0 BEGIN SET @err = @@ERROR END
					--END
			END
			ELSE IF LEFT(@tmpstring,3) IN ('IEA') --PO Hdr data
			BEGIN
			  SET @InvRef = SUBSTRING(@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1,ABS(CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1-CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,CHARINDEX('|',@tmpString,1)+1)+1)+1)+1)
			  --SELECT @InvRef
			END	
		 END
		END

	----------------------------------------------------------------------------------------------------------------------------------------------------------
	-------------------------INSERT INTO DB FROM temp table.................................................................................
		
		DECLARE @id INT
		SET @id = 0
			
		IF LTRIM(RTRIM(@fileType)) = '855'	AND LTRIM(RTRIM(@_FileType)) = '855'
			BEGIN
		--------ACK...................................................................................................................................................
				DECLARE @ACKloop INT
				SELECT @ACKloop = COUNT(DISTINCT FilePO) FROM @ACKHdrs
				WHILE @ACKloop > 0
					BEGIN
						DECLARE	 @curACKPO VARCHAR(12) 
								,@curACKSend VARCHAR(20)
								,@curACKRecv VARCHAR(20)
								,@curACKIssueDtm VARCHAR(20)
								,@curACKamtCode VARCHAR(6)
								,@curACKSTNo VARCHAR(10)
								,@curACKGSNo VARCHAR(10)
						SELECT @curACKPO=FilePO,@curACKSend=Sender,@curACKRecv=Receiver,@curACKIssueDtm=IssueDate,@curACKSTNo=STIDNo,@curACKGSNo=GSNo 
						FROM @ACKHdrs WHERE RowID=@ACKloop
				
						----SET @ACKDtl quantities.....
						UPDATE p
							SET p.CanQty=CASE WHEN ISNULL(p.Qty,0)-ISNULL(p.AckQty,0)< 0 THEN 0 ELSE ISNULL(p.Qty,0)-ISNULL(p.AckQty,0) END
						FROM @ACKDtl p 
							LEFT OUTER JOIN dbo.[850_PO_Hdr] ph 
								ON p.PONumber=ph.PONumber
							LEFT OUTER JOIN dbo.[850_PO_Dtl] pd 
								ON ph.OrdID=pd.OrdID 
									AND p.ItemID=pd.ItemIdentifier
						WHERE p.PONumber=@curACKPO
						
						IF @err = 0 BEGIN SET @err = @@ERROR END
											
						BEGIN tran
						--INSERT header info AND get identity...
						INSERT INTO BLK.AcknowledgeHeader (PONumber,IssueDate,VendorID,ReferenceNo,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,TotalLines,TotalQuantity,CurrencyCode,InsertDateTime,Processed,ProcessedDateTime,ResponseACKSent,ResponseAckNo,GSNo)
							SELECT	 ph.PONumber
									,@curACKIssueDtm
									,ph.VendorID
									,@ACKRef
									,ph.ShipToLoc
									,ph.ShipToSAN
									,ph.BillToLoc
									,ph.BillToSAN
									,ph.ShipFromLoc
									,ph.ShipFromSAN
									,(SELECT COUNT(LineNum) FROM @ACKDtl WHERE PONumber=@curACKPO)
									,(SELECT SUM(AckQty) FROM @ACKDtl WHERE PONumber=@curACKPO)
									,@curACKamtCode
									,GETDATE()
									,0
									,NULL
									,0
									,@curACKSTNo
									,@curACKGSNo
							FROM dbo.[850_PO_Hdr] ph 
							WHERE ph.ponumber=@curACKPO 
								AND REPLACE(ph.ShipFromSAN,'-','')=REPLACE(@curACKSend,'-','') 
								--AND REPLACE(ph.ShipToSAN,'-','')=REPLACE(@Receiver,'-','')
						IF @err = 0 BEGIN SET @err = @@ERROR END
						SET @id = @@identity
						
						----INSERT detail info..................
						IF ISNULL(@id,0)<>0 AND @err=0
							BEGIN
								INSERT INTO BLK.AcknowledgeDetail (AckID,[LineNo],LineStatusCode,ItemStatusCode,UnitOfMeasure, QuantityOrdered, QuantityShipped, QuantityCancelled,QuantityBackordered,UnitPrice,PriceCode,CurrencyCode,ItemIDCode,ItemIdentifier)
									SELECT	 @id
											,p.LineNum
											,p.LineSts
											,p.LineCode
											,p.UOM
											,p.AckQty
											,p.ShipQty
											--,p.CanQty
											--,p.BakQty,
											,CASE WHEN p.LineCode like 'B%' OR p.LineCode ='IB' THEN 0			ELSE p.CanQty END AS [CanQty]
											,CASE WHEN p.LineCode like 'B%' OR p.LineCode ='IB' THEN p.CanQty	ELSE p.BakQty END AS [BakQty]
											,p.UnitPrice
											,p.PriceCode
											,@amtCode
											,p.ItemIDCode
											,p.ItemID
									FROM @ACKDtl p 
									WHERE p.PONumber=@curACKPO
								IF @err = 0 BEGIN SET @err = @@ERROR END
							END
						IF @err=0
							COMMIT TRANSACTION VX_ReqSubmit
						ELSE
							ROLLBACK  TRANSACTION VX_ReqSubmit
						SET @ACKloop = @ACKloop-1
					END
			END
		----------------------------------------------------------------------------------------------------------------------------------------------------------
		ELSE IF LTRIM(RTRIM(@fileType)) = '856'	AND LTRIM(RTRIM(@_FileType)) = '856'
			BEGIN
		--------ASN...................................................................................................................................................
				DECLARE @ASNloop INT

				SELECT @ASNloop = COUNT(DISTINCT FileASN) FROM @ASNHdrs
				WHILE @ASNloop > 0
					BEGIN
						DECLARE	 @curASNPO VARCHAR(12) 
								,@curASNSend VARCHAR(20)
								,@curASNRecv VARCHAR(20)
								,@curASNIssueDtm VARCHAR(20)
								,@curASNamtCode VARCHAR(6)
								,@curASN VARCHAR(20)
								,@curCar VARCHAR(20)
								,@curASNSTNo VARCHAR(10)
								,@curASNGSNo VARCHAR(10)
				
						SELECT	 @curASNPO=FilePO
								,@curASN=FileASN
								,@curASNSend=Sender
								,@curASNRecv=Receiver
								,@curASNIssueDtm=IssueDate
								,@curASNamtCode=AmtCode
								,@curCar=LTRIM(RTRIM(REPLACE(Carrier,' ','')))
								,@curASNSTNo=STIDNo
								,@curASNGSNo=GSNo 
						FROM @ASNHdrs 
						WHERE RowID=@ASNloop
						
						BEGIN tran
						
						IF EXISTS (SELECT PONumber FROM dbo.[850_PO_Hdr] WHERE PONumber=@curASNPO)
							BEGIN
								----SET @ACKDtl quantities.....
								UPDATE p
									SET p.LineNum=pd.[LineNo],p.UnitPrice=pd.UnitPrice,p.PriceCode=pd.PriceCode
								FROM @ASNDtl p 
									LEFT OUTER JOIN dbo.[850_PO_Hdr] ph 
										ON p.PONumber=ph.PONumber
									LEFT OUTER JOIN dbo.[850_PO_Dtl] pd 
										ON ph.OrdID=pd.OrdID AND p.ItemID=pd.ItemIdentifier
								WHERE p.PONumber=@curASNPO
						
								IF @err = 0 BEGIN SET @err = @@ERROR END
								
								--INSERT header info AND get identity...
								INSERT INTO BLK.ShipmentHeader (PONumber,ASNNo,IssueDate,VendorID,ReferenceNo,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,Carrier,TotalLines,TotalQuantity,CurrencyCode,InsertDateTime,Processed,ProcessedDateTime,ASNACKSent,ASNAckNo,GSNo)
									SELECT ph.PONumber,@curASN,@curASNIssueDtm,ph.VendorID,@ASNRef,ph.ShipToLoc,ph.ShipToSAN,ph.BillToLoc,ph.BillToSAN,ph.ShipFromLoc,ph.ShipFromSAN,
										LEFT(@curCar,20),(SELECT COUNT(LineNum) FROM @ASNDtl WHERE PONumber=@curASNPO),(SELECT SUM(ShipQty) FROM @ASNDtl WHERE PONumber=@curASNPO),@curASNamtCode,GETDATE(),0,NULL,0,@curASNSTNo,@curASNGSNo
									FROM dbo.[850_PO_Hdr] ph 
									WHERE ph.ponumber=@curASNPO 
										AND REPLACE(ph.ShipFromSAN,'-','')=REPLACE(@curASNSend,'-','') 
										--AND REPLACE(ph.ShipToSAN,'-','')=REPLACE(@Receiver,'-','')								
								IF @err = 0 BEGIN SET @err = @@ERROR END
							END
						ELSE IF NOT EXISTS (SELECT PONumber FROM dbo.[850_PO_Hdr] WHERE PONumber=@curASNPO) AND LEN(@curASNPO)>6
							BEGIN
								INSERT INTO BLK.ShipmentHeader (PONumber,ASNNo,IssueDate,VendorID,ReferenceNo,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,Carrier,TotalLines,TotalQuantity,CurrencyCode,InsertDateTime,Processed,ProcessedDateTime,ASNACKSent,ASNAckNo,GSNo)
									SELECT 'F'+RIGHT(@ASNRef,5),@curASN,@curASNIssueDtm,v.VendorID,@ASNRef,s1.LocationNo,s1.SANCode,s2.LocationNo,s2.SANCode,'VEND',v.SANCode,
										LEFT(@curCar,20),(SELECT COUNT(LineNum) FROM @ASNDtl WHERE PONumber=@curASNPO),(SELECT SUM(ShipQty) FROM @ASNDtl WHERE PONumber=@curASNPO),@curASNamtCode,GETDATE(),0,NULL,0,@curASNSTNo,@curASNGSNo
									FROM @ASNHdrs h 
										INNER JOIN dbo.Vendor_SAN_Codes v 
											ON REPLACE(h.Sender,'-','')=REPLACE(v.SANCode,'-','')
										INNER JOIN dbo.HPB_SAN_Codes s1 
											ON REPLACE(h.Receiver,'-','')=REPLACE(s1.SANCode,'-','')
										INNER JOIN dbo.HPB_SAN_Codes s2 
											ON s2.LocationNo='HPBCA'
									WHERE h.FilePO=@curASNPO AND REPLACE(h.Sender,'-','')=REPLACE(@curASNSend,'-','')
										AND h.FileASN NOT IN (SELECT DISTINCT ReferenceNo FROM dbo.[856_ASN_Hdr])								
								IF @err = 0 BEGIN SET @err = @@ERROR END
							END
						ELSE
							BEGIN
								INSERT INTO BLK.ShipmentHeader (PONumber,ASNNo,IssueDate,VendorID,ReferenceNo,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,Carrier,TotalLines,TotalQuantity,CurrencyCode,InsertDateTime,Processed,ProcessedDateTime,ASNACKSent,ASNAckNo,GSNo)
									SELECT h.FilePO,@curASN,@curASNIssueDtm,v.VendorID,@ASNRef,s1.LocationNo,s1.SANCode,s2.LocationNo,s2.SANCode,'VEND',v.SANCode,
										LEFT(@curCar,20),(SELECT COUNT(LineNum) FROM @ASNDtl WHERE PONumber=@curASNPO),(SELECT SUM(ShipQty) FROM @ASNDtl WHERE PONumber=@curASNPO),@curASNamtCode,GETDATE(),0,NULL,0,@curASNSTNo,@curASNGSNo
									FROM @ASNHdrs h 
										INNER JOIN dbo.Vendor_SAN_Codes v 
											ON REPLACE(h.Sender,'-','')=REPLACE(v.SANCode,'-','')
										INNER JOIN dbo.HPB_SAN_Codes s1 
											ON REPLACE(h.Receiver,'-','')=REPLACE(s1.SANCode,'-','')
										INNER JOIN dbo.HPB_SAN_Codes s2 
											ON s2.LocationNo='HPBCA'
									WHERE h.FilePO=@curASNPO AND REPLACE(h.Sender,'-','')=REPLACE(@curASNSend,'-','')
										AND h.FileASN NOT IN (SELECT DISTINCT ReferenceNo FROM dbo.[856_ASN_Hdr])								
								IF @err = 0 BEGIN SET @err = @@ERROR END
							END
						SET @id = @@IDENTITY
						--INSERT detail info..................
						IF ISNULL(@id,0)<>0 AND @err=0
							BEGIN
								INSERT INTO BLK.ShipmentDetail (ShipmentID,[LineNo],ItemIDCode,ItemIdentifier,QuantityShipped,PackageNo,TrackingNo)
								SELECT @id,CASE WHEN LTRIM(RTRIM(ISNULL(p.LineNum,'')))='' THEN ISNULL(ROW_NUMBER() OVER(PARTITION BY [PONumber] ORDER BY [PONumber]),'') ELSE p.LineNum END,
									p.ItemIDCode,p.ItemID,p.ShipQty,p.PkgNo,p.TrkNo
								FROM @ASNDtl p
								WHERE p.POnumber=@curASNPO
								IF @err = 0 BEGIN SET @err = @@ERROR END
							END
							
						IF @err=0
							COMMIT TRANSACTION VX_ReqSubmit
						ELSE
							ROLLBACK  TRANSACTION VX_ReqSubmit
						SET @ASNloop = @ASNloop-1
					END
					
					----UPDATE any invoices that the ORDER originated IN DIPS.........
					IF EXISTS (SELECT i.PONumber FROM dbo.[856_ASN_Hdr] i INNER JOIN (SELECT PONumber,LocationNo FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader) r ON i.PONumber=r.PONumber
								INNER JOIN dbo.HPB_SAN_Codes s ON s.LocationNo=r.LocationNo WHERE i.ShipToLoc='00944' AND i.Processed=0 AND ISNUMERIC(i.PONumber)=1)
						BEGIN  
							UPDATE i
								SET i.ShipToLoc=r.LocationNo,i.ShipToSAN=s.SANCode
							FROM BLK.ShipmentHeader i
								INNER JOIN (SELECT PONumber,LocationNo FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader) r 
									ON i.PONumber=r.PONumber
								INNER JOIN dbo.HPB_SAN_Codes s 
									ON s.LocationNo=r.LocationNo
							WHERE i.ShipToLoc='00944' 
								AND i.Processed=0
								AND ISNUMERIC(i.PONumber)=1
						END
			END
		----------------------------------------------------------------------------------------------------------------------------------------------------------
		ELSE IF LTRIM(RTRIM(@fileType)) = '810'	AND LTRIM(RTRIM(@_FileType)) = '810'
			BEGIN
		--------INV...................................................................................................................................................
				DECLARE @INVloop INT
				SELECT @INVloop = COUNT(DISTINCT FileINV) FROM @INVHdrs
				WHILE @INVloop > 0
					BEGIN
						DECLARE	 @curINVPO VARCHAR(12) 
								,@curINVSend VARCHAR(20)
								,@curINVRecv VARCHAR(20)
								,@curINVIssueDtm VARCHAR(20)
								,@curINVamtCode VARCHAR(6)
								,@curINV VARCHAR(20)
								,@curINVDisPct VARCHAR(6)
								,@curINVSTNo VARCHAR(10)
								,@curGSNo VARCHAR(10)
						SELECT @curINVPO=FilePO,@curINV=FileINV,@curINVSend=Sender,@curINVRecv=Receiver,@curINVIssueDtm=IssueDate,@curINVamtCode=ISNULL(AmtCode,'USD'),@curINVDisPct=DisPct,@curINVSTNo=STIDNo,@curGSNo=GSNo 
						FROM @INVHdrs 
						WHERE RowID=@INVloop
				
						----UPDATE unit price for HMH since they are sending full retail price IN files...........
						IF @curINVSend='2153793'
							BEGIN
								UPDATE @INVDtl
									SET UnitPrice = CAST(CAST(CAST(UnitPrice AS MONEY)*CAST(@curINVDisPct AS DECIMAL(8,2)) AS DECIMAL(12,4)) AS VARCHAR(10))
								WHERE PONumber=@curINVPO
							END

						IF EXISTS(SELECT a.PONumber FROM dbo.[810_Inv_Charges] a INNER JOIN @INVAdds b ON a.PONumber=b.PONumber AND a.InvoiceNo=b.FileINV AND a.ChargeCode=b.ChargeCode WHERE a.PONumber=@curINVPO)
							BEGIN
								 UPDATE b
									 SET ChargeAmt=CAST(ISNULL(LEFT(a.ChargeAmt,LEN(a.ChargeAmt)-2)+'.'+RIGHT(a.ChargeAmt,2),0)AS DECIMAL(10,2))
								 FROM dbo.[810_Inv_Charges] b 
									INNER JOIN @INVAdds a 
										ON a.PONumber=b.PONumber 
											AND b.InvoiceNo=a.FileINV 
												AND a.ChargeCode=b.ChargeCode 
								 WHERE b.PONumber=@curINVPO 
									AND b.InvoiceNo=@curINV 
										AND b.ChargeCode=a.ChargeCode
							END
						ELSE
							BEGIN
								INSERT INTO dbo.[810_Inv_Charges]
									SELECT	 a.PONumber
											,@curINV
											,a.ChargeCode
											,SUM(CAST(ISNULL(LEFT(a.ChargeAmt,LEN(a.ChargeAmt)-2)+'.'+RIGHT(a.ChargeAmt,2),0)AS DECIMAL(10,2)))
									FROM @INVAdds a
									WHERE a.PONumber=@curINVPO 
										AND NOT EXISTS(	SELECT PONumber 
														FROM dbo.[810_Inv_Charges] 
														WHERE PONumber=@curINVPO 
															AND InvoiceNo=@curINV AND 
															ChargeCode=a.ChargeCode )
									GROUP BY a.PONumber,a.ChargeCode
							END	
						
						SET @ToPay = (	SELECT SUM(CAST(Qty AS INT)*CAST(UnitPrice AS MONEY)) 
										FROM @INVDtl 
										WHERE PONumber=@filePO 
											AND FileINV=@curINV)
						IF @curINVDisPct IS NULL BEGIN SET @curINVDisPct=(SELECT TOP 1 DisPct FROM @INVHdrs WHERE DisPct IS NOT NULL)  END
				
						BEGIN TRAN
						--INSERT header info AND get identity...check IF PO EXISTS AND do INSERT.........................................					
						IF EXISTS(SELECT PONumber FROM dbo.[850_PO_Hdr] WHERE PONumber=@curINVPO)
							BEGIN
								INSERT INTO BLK.InvoiceHeader (InvoiceNo,IssueDate,VendorID,PONumber,ReferenceNo,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,TotalLines,TotalQuantity,TotalPayable,CurrencyCode,InsertDateTime,Processed,ProcessedDateTime,InvoiceAckSent,InvoiceAckNo,GSNo)
									SELECT	 @curINV
											,@curINVIssueDtm
											,ph.VendorID
											,ph.PONumber
											,@InvRef
											,ph.ShipToLoc
											,ph.ShipToSAN
											,ph.BillToLoc
											,ph.BillToSAN
											,ph.ShipFromLoc
											,ph.ShipFromSAN
											,(SELECT COUNT(LineNum) FROM @INVDtl WHERE PONumber=@curINVPO AND FileINV=@curINV)
											,(SELECT SUM(CAST(Qty AS INT)) FROM @INVDtl WHERE PONumber=@curINVPO AND FileINV=@curINV)
											,(SELECT CAST(SUM(CAST(UnitPrice AS DECIMAL(12,4))*CAST(Qty AS INT))AS DECIMAL(12,4)) FROM @INVDtl WHERE PONumber=@curINVPO AND FileINV=@curINV)+ISNULL((SELECT SUM(ChargeAmt) FROM dbo.[810_Inv_Charges] WHERE PONumber=@curINVPO AND InvoiceNo=@curINV),0)
											,@curINVamtCode
											,GETDATE()
											,0
											,NULL
											,0
											,@curINVSTNo
											,@curGSNo
									FROM dbo.[850_PO_Hdr] ph 
									WHERE ph.ponumber=@curINVPO 
										AND REPLACE(ph.ShipFromSAN,'-','')=REPLACE(@curINVSend,'-','')
										AND NOT EXISTS (SELECT DISTINCT InvoiceNo FROM dbo.[810_Inv_Hdr] WHERE InvoiceNo=@curINV)
							END
						ELSE  ----IF PO does NOT exist THEN pull FROM table variables......................................................
							BEGIN
								INSERT INTO BLK.InvoiceHeader (InvoiceNo,IssueDate,VendorID,PONumber,ReferenceNo,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,TotalLines,TotalQuantity,TotalPayable,CurrencyCode,InsertDateTime,Processed,ProcessedDateTime,InvoiceAckSent,InvoiceAckNo,GSNo)
									SELECT	 h.FileINV
											,h.IssueDate
											,v.VendorID
											,h.FilePO
											,@InvRef
											,s1.LocationNo
											,s1.SANCode
											,s2.LocationNo
											,s2.SANCode
											,'VEND'
											,v.SANCode
											,(SELECT COUNT(LineNum) FROM @INVDtl WHERE PONumber=@curINVPO AND FileINV=@curINV)
											,(SELECT SUM(CAST(Qty AS INT)) FROM @INVDtl WHERE PONumber=@curINVPO AND FileINV=@curINV)
											,(SELECT CAST(SUM(CAST(UnitPrice AS DECIMAL(12,4))*CAST(Qty AS INT))AS DECIMAL(12,4)) FROM @INVDtl WHERE PONumber=@curINVPO AND FileINV=@curINV)+ISNULL((SELECT SUM(ChargeAmt) FROM dbo.[810_Inv_Charges] WHERE PONumber=@curINVPO AND InvoiceNo=@curINV),0)
											,@curINVamtCode
											,GETDATE()
											,0
											,NULL
											,0
											,@curINVSTNo
											,@curGSNo
									FROM @INVHdrs h 
										INNER JOIN dbo.Vendor_SAN_Codes v 
											ON REPLACE(h.Sender,'-','')=REPLACE(v.SANCode,'-','')
										INNER JOIN dbo.HPB_SAN_Codes s1 
											ON REPLACE(h.Receiver,'-','')=REPLACE(s1.SANCode,'-','')
										INNER JOIN dbo.HPB_SAN_Codes s2 
											ON s2.LocationNo='HPBCA'
									WHERE h.FilePO=@curINVPO 
										AND h.FileINV=@curINV 
										AND REPLACE(h.Sender,'-','')=REPLACE(@curINVSend,'-','')	
										AND NOT EXISTS (SELECT DISTINCT invoiceno FROM dbo.[810_Inv_Hdr] WHERE InvoiceNo=@curINV)
							END							
						SET @id = @@IDENTITY
						IF ISNULL(@id,0)<>0 AND @err=0
							BEGIN
								-- INSERT detail info
								INSERT INTO BLK.InvoiceDetail (InvoiceID,[LineNo],ItemIDCode,ItemIdentifier,ItemDesc,InvoiceQty,UnitPrice,DisCOUNTPrice,DisCOUNTCode,DisCOUNTPct,RetailPrice)
									SELECT	 @id
											,p.LineNum
											,p.ItemIDCode
											,p.ItemID
											,''
											,p.Qty
											,CAST(CAST(p.UnitPrice AS DECIMAL(12,2)) AS VARCHAR(6))
											,''
											,''
											,@curINVDisPct,p.RetAmt
									FROM @INVDtl p
									WHERE p.PONumber=@curINVPO 
										AND p.FileINV=@curINV						
								IF @err = 0 BEGIN SET @err = @@ERROR END
							END							
						IF @err=0
							COMMIT TRANSACTION VX_ReqSubmit
						ELSE
							ROLLBACK  TRANSACTION VX_ReqSubmit
						SET @INVloop = @INVloop-1
					END	
					
					----UPDATE any invoices that the ORDER originated IN DIPS.........
					IF EXISTS	(	SELECT i.PONumber 
									FROM dbo.[810_Inv_Hdr] i 
										INNER JOIN (SELECT PONumber,LocationNo FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader) r 
											ON i.PONumber=r.PONumber
										INNER JOIN dbo.HPB_SAN_Codes s 
											ON s.LocationNo=r.LocationNo WHERE i.ShipToLoc='00944' AND i.Processed=0 AND ISNUMERIC(i.PONumber)=1
								)
						BEGIN  
							UPDATE i
							SET i.ShipToLoc=r.LocationNo,i.ShipToSAN=s.SANCode
							FROM dbo.[810_Inv_Hdr] i 
								INNER JOIN (SELECT PONumber,LocationNo FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader) r 
									ON i.PONumber=r.PONumber
								INNER JOIN dbo.HPB_SAN_Codes s 
									ON s.LocationNo=r.LocationNo
							WHERE i.ShipToLoc='00944' 
								AND i.Processed=0
								AND ISNUMERIC(i.PONumber)=1
						END
			END
		-----------------------------------------------------------------------------------------------------------------------------------------------------------
	
		SET @rVal = @err
		SELECT @rVal
	END
ELSE
	BEGIN		----IF the file IS NOT complete THEN send a false back to app......
		SET @err=1
		SET @rVal = @err
		SELECT @rVal	
	END

END
GO
PRINT N'Altering [dbo].[ProcessSFTP_InvAck]...';


GO
-- ==========================================================================================
-- Description:	Builds a list of Invoice ACKs to be exported to SFPT folders thru EDI.....
-- Created:		2015-05-08  Joey B.
-- Updates:
--				2019-02-06 ALB Changed to CTE and modified vendor join to speed up procedure
-- ==========================================================================================
ALTER PROCEDURE [dbo].[ProcessSFTP_InvAck]
AS

BEGIN
	SET NOCOUNT ON;
	DECLARE @CRLF VARCHAR(2) = CHAR(13) + CHAR(10)

	;WITH dataset AS 
	(
		SELECT   h.InvoiceID
				,h.InvoiceNo
				,v.ParentFolder
				,v.[Binary]
				,h.ShipFromSAN
				,h.IssueDate
				,h.InsertDateTime
				,h.PONumber 
				,h.GSNo
				,h.ReferenceNo
				,dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo) AS InvoiceACKDtls			
		FROM dbo.[810_Inv_Hdr] h 
			INNER JOIN dbo.[810_Inv_Dtl] d 
				ON h.InvoiceID=d.InvoiceID
			INNER JOIN dbo.Vendor_SAN_Codes v 
				ON h.VendorID=v.VendorID
					AND v.Invoice997=1
					AND v.Processor='SFTP'
		WHERE h.InvoiceACKSent=0 
		GROUP BY h.InvoiceID, h.InvoiceNo, v.[Binary], v.ParentFolder, h.ShipFromSAN, h.IssueDate, h.InsertDateTime, h.PONumber, h.GSNo, h.ReferenceNo
	)
	SELECT	 InvoiceID
			,InvoiceNo
			,ParentFolder
			,CASE WHEN [Binary]=0 
				THEN	'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(ShipFromSAN AS CHAR(15)) 
						+'*'+CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')
						+CASE WHEN ShipFromSAN IN ('8600023') 
							THEN '*:*00200*'+RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9)  
							ELSE '*:*00200*'+RIGHT('0000000000'+PONumber,9) 
						 END +'*0*P*>~' + @CRLF
						+'GS*FA*760985X*'+ShipFromSAN+'*'+CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')+'*000000002*X*003060~' + @CRLF
						+'ST*997*000000001~' + @CRLF
						+'AK1*IN*'+CASE WHEN ShipFromSAN IN ('8600023') 
										THEN CONVERT(VARCHAR(12),GSNo) 
										ELSE CONVERT(VARCHAR(12),ReferenceNo)
								  END+'~' + @CRLF
						+ InvoiceACKDtls
						+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' + @CRLF
						+'SE*'+CONVERT(VARCHAR(10),(('6')))+'*000000001~' + @CRLF
						+'GE*1*000000002~' + @CRLF
						+'IEA*1*'+CASE WHEN ShipFromSAN IN ('8600023') 
										THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9) 
										ELSE RIGHT('0000000000'+PONumber,9) 
								 END +'~'
			ELSE	CONVERT(VARCHAR(max),CONVERT(varbinary(max),CONVERT(VARCHAR(max),
					'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(ShipFromSAN AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')
					+CASE WHEN ShipFromSAN IN ('8600023') 
							THEN '*:*00200*'+RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9) 
							ELSE '*:*00200*'+RIGHT('0000000000'+PONumber,9) 
					 END +'*0*P*>~' + @CRLF
					+'GS*FA*760985X*'+ShipFromSAN+'*'+CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')+'*000000002*X*003060~' + @CRLF
					+'ST*997*000000001~' + @CRLF
					+'AK1*IN*'+CASE WHEN ShipFromSAN IN ('8600023') 
									THEN CONVERT(VARCHAR(12),GSNo) 
									ELSE CONVERT(VARCHAR(12),ReferenceNo)
							  END+'~' + @CRLF
					+InvoiceACKDtls
					+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' + @CRLF
					+'SE*'+CONVERT(VARCHAR(10),(('6')))+'*000000001~' + @CRLF
					+'GE*1*000000002~' + @CRLF
					+'IEA*1*'+CASE WHEN ShipFromSAN IN ('8600023') 
									THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9)  
									ELSE RIGHT('0000000000'+PONumber,9) END +'~')),1)
			END AS [FileText]
	FROM dataset 

	/* previous code 
		select distinct h.InvoiceID,h.InvoiceNo,v.ParentFolder, 
				case when v.Binary=0 then 
				'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ cast(h.ShipFromSAN as CHAR(15)) 
				+'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')
				+case when h.ShipFromSAN in ('8600023') then '*:*00200*'+right('000000000'+cast(datepart(dy, getdate()) as varchar(5)) + cast(h.PONumber as varchar(10)),9)  
					else '*:*00200*'+RIGHT('0000000000'+h.PONumber,9) end +'*0*P*>~'
				+CHAR(13) + CHAR(10)
				+'GS*FA*760985X*'+h.ShipFromSAN+'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'
				+CHAR(13) + CHAR(10)
				+'ST*997*000000001~'
				+CHAR(13) + CHAR(10)
				+'AK1*IN*'+case when h.ShipFromSAN in ('8600023') then CONVERT(varchar(12),h.GSNo) else CONVERT(varchar(12),h.ReferenceNo)end+'~'
				+CHAR(13) + CHAR(10)
				+ dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo)
				+'AK9*A*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'~'
				+CHAR(13) + CHAR(10)
				+'SE*'+convert(varchar(10),(('6')))+'*000000001~'
				+CHAR(13) + CHAR(10)
				+'GE*1*000000002~'
				+CHAR(13) + CHAR(10)
				+'IEA*1*'+case when h.ShipFromSAN in ('8600023') then right('000000000'+cast(datepart(dy, getdate()) as varchar(5)) + cast(h.PONumber as varchar(10)),9) 
					else RIGHT('0000000000'+h.PONumber,9) end +'~'
				else
				CONVERT(varchar(max),CONVERT(varbinary(max),CONVERT(varchar(max),
				'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ cast(h.ShipFromSAN as CHAR(15)) +'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')
				+case when h.ShipFromSAN in ('8600023') then '*:*00200*'+right('000000000'+cast(datepart(dy, getdate()) as varchar(5)) + cast(h.PONumber as varchar(10)),9) 
					else '*:*00200*'+RIGHT('0000000000'+h.PONumber,9) end +'*0*P*>~'
				+CHAR(13) + CHAR(10)
				+'GS*FA*760985X*'+h.ShipFromSAN+'*'+convert(varchar(6),h.IssueDate,12)+'*'+replace(convert(varchar(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~'
				+CHAR(13) + CHAR(10)
				+'ST*997*000000001~'
				+CHAR(13) + CHAR(10)
				+'AK1*IN*'+case when h.ShipFromSAN in ('8600023') then CONVERT(varchar(12),h.GSNo) else CONVERT(varchar(12),h.ReferenceNo)end+'~'
				+CHAR(13) + CHAR(10)
				+ dbo.EDIfn_GetInvoiceACKDtls(h.InvoiceNo)
				+'AK9*A*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'*'+convert(varchar(10),(('1')))+'~'
				+CHAR(13) + CHAR(10)
				+'SE*'+convert(varchar(10),(('6')))+'*000000001~'
				+CHAR(13) + CHAR(10)
				+'GE*1*000000002~'
				+CHAR(13) + CHAR(10)
				+'IEA*1*'+case when h.ShipFromSAN in ('8600023') then right('000000000'+cast(datepart(dy, getdate()) as varchar(5)) + cast(h.PONumber as varchar(10)),9)  
					else RIGHT('0000000000'+h.PONumber,9) end +'~')),1)
				end [FileText]
		from dbo.[810_Inv_Hdr] h with(nolock) inner join dbo.[810_Inv_Dtl] d with(nolock) on h.InvoiceID=d.InvoiceID
				inner join dbo.Vendor_SAN_Codes v with(nolock) on h.VendorID=v.VendorID
		where h.InvoiceACKSent=0 and v.processor='SFTP' and h.VendorID in (select VendorID from dbo.Vendor_SAN_Codes where Invoice997=1)
	*/
END
GO
PRINT N'Altering [dbo].[ProcessSFTP_POFiles]...';


GO
-- =============================================
-- Author:		Joey B.
-- Create date: 1/24/2015
-- Description:	Builds a list of PO's to be exported to SFPT folders thru EDI
-- =============================================
ALTER PROCEDURE [dbo].[ProcessSFTP_POFiles]
AS

BEGIN

	SET NOCOUNT ON;
	DECLARE @CRLF VARCHAR(2) = CHAR(13) + CHAR(10)
	--ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*7214119        *130904*1312*U*00306*000145888*1*T*>~
	--GS*Test0002*760985X*7214119*20130904*1312*000000002*X*003060~
	--ST*850*000000003~
	--BEG*00*NE*Test0002**130904**AC~
	--DTM*037*130904*2013~
	
	--N1*BT**15*7609876~
	--N1*ST**15*1506951~
	--N1*VN**15*7214119~
	
	--PO1*1*24*EA*7.475*NT*EN*9780062024046*UP*07863569142~
	--IT8*N**~
	--PO1*2*48*EA*5.975*NT*EN*9780553593716*UP*73145140152~
	--IT8*N**~
	--PO1*3*48*EA*8.475*NT*EN*9780142410707*UP*74041707882~
	--IT8*N**~
	
	--CTT*3*120~
	--SE*14*000000003~
	--GE*1*000000002~
	--IEA*1*000145888~

	--SE total = 8 + (TotalLines*2)
	CREATE TABLE #ords(PONumber VARCHAR(20),ParentFolder VARCHAR(20),FileText VARCHAR(MAX))	
	CREATE TABLE #vends (RowID INT identity(1,1) ,VendorID VARCHAR(20))
	--
	DECLARE	 @vendcnt INT
			,@curloop INT
	--
	INSERT INTO #vends
		SELECT h.VendorID
		FROM [850_PO_Hdr] h WITH(NOLOCK) 
			INNER JOIN [850_PO_Dtl] d WITH(NOLOCK) ON h.OrdID=d.OrdID
			INNER JOIN Vendor_SAN_Codes v WITH(NOLOCK) ON h.VendorID=v.VendorID
		WHERE h.Processed=0 
			AND v.processor='SFTP'  
		GROUP BY h.VendorID
	
	SELECT @vendcnt=ISNULL(MAX(RowID),0),@curloop=1
	FROM #vends

	WHILE @curloop<=@vendcnt
	BEGIN
	--build ORDER string
		DECLARE @curVend VARCHAR(20)
		SELECT @curVend=VendorId FROM #vends WHERE RowID=@curloop

		INSERT INTO #ords
			SELECT DISTINCT TOP 20 h.ponumber,v.ParentFolder, 
				CASE WHEN v.[Binary]=0 
					THEN	'ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*'
							+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
							+ CASE WHEN h.ShipFromSAN IN ('8600023') 
								THEN '*U*00200*'+RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)  
								ELSE '*U*00200*'+RIGHT('0000000000'+h.PONumber,9) 
							  END +'*0*P*>~' +@CRLF
							+'GS*PO*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
							+'ST*850*000000003~' +@CRLF
							+'BEG*00*NE*'+h.PONumber+'**'+CONVERT(VARCHAR(6),h.IssueDate,12)+'**AC~' +@CRLF
							+'DTM*037*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'***'+LEFT(CONVERT(VARCHAR(4),year(h.IssueDate)),2)+'~' +@CRLF
							+'N1*BT**15*'+REPLACE(h.BillToSAN,'-','')+'~' +@CRLF
							+'N1*ST**15*'+REPLACE(h.ShipToSAN,'-','')+'~' +@CRLF
							+'N1*VN**15*'+REPLACE(h.ShipFromSAN,'-','')+'~' +@CRLF
							+ dbo.EDIfn_GetPODetails(h.PONumber)
							+'CTT*'+CONVERT(VARCHAR(4),h.TotalLines)+'*'+CONVERT(VARCHAR(10),h.TotalQty)+'~' +@CRLF
							+'SE*'+CONVERT(VARCHAR(10),(8+(CASE WHEN v.EDIVersion='3060' THEN h.TotalLines*2 ELSE h.TotalLines END)))+'*000000003~' +@CRLF
							+'GE*1*000000002~' +@CRLF
							+'IEA*1*'
							+ CASE WHEN h.ShipFromSAN IN ('8600023') 
									THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9) 
									ELSE RIGHT('0000000000'+h.PONumber,9) 
							  END +'~'  
					ELSE	CONVERT(VARCHAR(MAX),CONVERT(VARBINARY(MAX),CONVERT(VARCHAR(MAX),
							'ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*'
							+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
							+ CASE WHEN h.ShipFromSAN IN ('8600023') 
									THEN '*U*00200*'+RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9) 
									ELSE '*U*00200*'+RIGHT('0000000000'+h.PONumber,9) 
							  END +'*0*P*>~' +@CRLF
							+'GS*PO*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
							+'ST*850*000000003~' +@CRLF
							+'BEG*00*NE*'+h.PONumber+'**'+CONVERT(VARCHAR(6),h.IssueDate,12)+'**AC~' +@CRLF
							+'DTM*037*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'***'+LEFT(CONVERT(VARCHAR(4),year(h.IssueDate)),2)+'~' +@CRLF
							+'N1*BT**15*'+REPLACE(h.BillToSAN,'-','')+'~' +@CRLF
							+'N1*ST**15*'+REPLACE(h.ShipToSAN,'-','')+'~' +@CRLF
							+'N1*VN**15*'+REPLACE(h.ShipFromSAN,'-','')+'~' +@CRLF
							+ dbo.EDIfn_GetPODetails(h.PONumber)
							+'CTT*'+CONVERT(VARCHAR(4),h.TotalLines)+'*'+CONVERT(VARCHAR(10),h.TotalQty)+'~' +@CRLF
							+'SE*'+CONVERT(VARCHAR(10),(8+(CASE WHEN v.EDIVersion='3060' THEN h.TotalLines*2 ELSE h.TotalLines END)))+'*000000003~' +@CRLF
							+'GE*1*000000002~' +@CRLF
							+'IEA*1*'
							+ CASE WHEN h.ShipFromSAN IN ('8600023') 
									THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9) 
									ELSE RIGHT('0000000000'+h.PONumber,9) 
							  END +'~')),1)
				END AS [FileText]
			FROM [850_PO_Hdr] h WITH(NOLOCK) 
				INNER JOIN [850_PO_Dtl] d WITH(NOLOCK) ON h.OrdID=d.OrdID
				INNER JOIN Vendor_SAN_Codes v WITH(NOLOCK) ON h.VendorID=v.VendorID
			WHERE h.Processed=0 
				AND v.processor='SFTP' 
				AND h.VendorID=@curVend 
				AND h.PONumber NOT IN (SELECT DISTINCT PONumber FROM #ords)

		----update next
		if (SELECT COUNT(DISTINCT POnumber) FROM [850_PO_Hdr] WHERE Processed=0 AND VendorID=@curVend AND ProcessedDateTime IS NOT NULL AND PONumber NOT IN (SELECT DISTINCT PONumber FROM #ords))=0
			SET @curloop = @curloop+1
	END
	----get the results
	SELECT PONumber,ParentFolder,FileText 
	FROM #ords
	GROUP BY PONumber,ParentFolder,FileText 

	--clean up
	DROP TABLE #vends
	DROP TABLE #ords
END
GO
PRINT N'Altering [dbo].[ProcessSFTP_ResponseAck]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Builds a list of Invoice ACKs to be exported to SFPT folders thru EDI.....>
-- =============================================
ALTER PROCEDURE [dbo].[ProcessSFTP_ResponseAck]
AS

BEGIN
	SET NOCOUNT ON;
	DECLARE @CRLF VARCHAR(2) = CHAR(13) + CHAR(10)

	;WITH dataset AS
	( 
		SELECT	 h.ShipFromSAN
				,h.IssueDate
				,h.InsertDateTime
				,h.PONumber
				,h.AckId
				,v.ParentFolder
				,v.[Binary]
				,h.ReferenceNo
				,h.GSNo
		FROM dbo.[855_Ack_Hdr] h 
			INNER JOIN dbo.[855_Ack_Dtl] d 
				ON h.AckID=d.AckID
			INNER JOIN dbo.Vendor_SAN_Codes v 
				ON h.VendorID=v.VendorID
					AND v.Processor = 'SFTP'
					AND v.ACK997 = 1
		WHERE h.ResponseACKSent=0 
	)
	SELECT DISTINCT AckID,PONumber,ParentFolder,
		CASE WHEN [Binary]=0 
			THEN	'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(ShipFromSAN AS CHAR(15)) +'*'
					+ CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')
					+ CASE WHEN ShipFromSAN IN ('8600023') 
							THEN '*:*00200*'+right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9)  
							ELSE '*:*00200*'+RIGHT('0000000000'+PONumber,9) 
					 END +'*0*P*>~' +@CRLF
					+ 'GS*FA*760985X*'+ShipFromSAN+'*'
					+ CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
					+ 'ST*997*000000001~' +@CRLF
					+ 'AK1*PR*'+CONVERT(VARCHAR(12),CASE ShipFromSAN WHEN '2002442' THEN ReferenceNo WHEN '8600023' THEN ISNULL(GSNo,'') ELSE PONumber END)+'~' +@CRLF
					+ CASE WHEN ShipFromSAN NOT IN ('2002442') 
							THEN dbo.EDIfn_GetResponseACKDtls(PONumber) 
							ELSE '' 
					  END
					+ 'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
					+ 'SE*'
					+ CASE WHEN ShipFromSAN NOT IN ('2002442') 
							THEN CONVERT(VARCHAR(10),(('6'))) 
							ELSE CONVERT(VARCHAR(10),(('4'))) 
					  END + '*000000001~' +@CRLF
					+ 'GE*1*000000002~' +@CRLF
					+ 'IEA*1*'
					+ CASE WHEN ShipFromSAN IN ('8600023') 
							THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9)
							ELSE RIGHT('0000000000'+PONumber,9) 
					  END +'~'
			ELSE	CONVERT(VARCHAR(MAX),CONVERT(varbinary(MAX),CONVERT(VARCHAR(MAX), 'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(ShipFromSAN AS CHAR(15)) +'*'
					+ CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')
					+ CASE WHEN ShipFromSAN IN ('8600023') 
							THEN '*:*00200*'+right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9)  
					 		ELSE '*:*00200*'+RIGHT('0000000000'+PONumber,9) 
					  END +'*0*P*>~' +@CRLF
					+ 'GS*FA*760985X*'+ShipFromSAN+'*'
					+ CONVERT(VARCHAR(6),IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
					+ 'ST*997*000000001~' +@CRLF
					+ 'AK1*PR*'+CONVERT(VARCHAR(12),CASE ShipFromSAN WHEN '2002442' THEN ReferenceNo WHEN '8600023' THEN ISNULL(GSNo,'') ELSE PONumber END)+'~' +@CRLF
					+ CASE WHEN ShipFromSAN NOT IN ('2002442') 
							THEN dbo.EDIfn_GetResponseACKDtls(PONumber) 
							ELSE '' 
					  END
					+ 'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
					+ 'SE*'+CASE WHEN ShipFromSAN NOT IN ('2002442') THEN CONVERT(VARCHAR(10),(('6'))) ELSE CONVERT(VARCHAR(10),(('4'))) END
					+ '*000000001~' +@CRLF
					+ 'GE*1*000000002~' +@CRLF
					+ 'IEA*1*'
					+ CASE WHEN ShipFromSAN IN ('8600023') 
							THEN right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)),9)  
							ELSE RIGHT('0000000000'+PONumber,9) END +'~')),1)	
		END AS [FileText]
	FROM dataset

	/*
	SELECT DISTINCT AckID,h.PONumber,v.ParentFolder,
		CASE WHEN v.[Binary]=0 
			THEN	'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'
					+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN '*:*00200*'+right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)  
						ELSE '*:*00200*'+RIGHT('0000000000'+h.PONumber,9) END +'*0*P*>~' +@CRLF
					+'GS*FA*760985X*'+h.ShipFromSAN+'*'
					+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
					+'ST*997*000000001~' +@CRLF
					+'AK1*PR*'+CONVERT(VARCHAR(12),CASE h.ShipFromSAN WHEN '2002442' THEN h.ReferenceNo WHEN '8600023' THEN ISNULL(h.GSNo,'') ELSE h.PONumber END)+'~' +@CRLF
					+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN dbo.EDIfn_GetResponseACKDtls(h.PONumber) ELSE '' END
					+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
					+'SE*'+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN CONVERT(VARCHAR(10),(('6'))) ELSE CONVERT(VARCHAR(10),(('4'))) END+'*000000001~' +@CRLF
					+'GE*1*000000002~' +@CRLF
					+'IEA*1*'
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)   ELSE RIGHT('0000000000'+h.PONumber,9) END +'~'
		ELSE		CONVERT(VARCHAR(MAX),CONVERT(varbinary(MAX),CONVERT(VARCHAR(MAX),
					'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'
					+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN '*:*00200*'+right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)  
						ELSE '*:*00200*'+RIGHT('0000000000'+h.PONumber,9) END +'*0*P*>~' +@CRLF
					+'GS*FA*760985X*'+h.ShipFromSAN+'*'
					+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
					+'ST*997*000000001~' +@CRLF
					+'AK1*PR*'+CONVERT(VARCHAR(12),CASE h.ShipFromSAN WHEN '2002442' THEN h.ReferenceNo WHEN '8600023' THEN ISNULL(h.GSNo,'') ELSE h.PONumber END)+'~' +@CRLF
					+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN dbo.EDIfn_GetResponseACKDtls(h.PONumber) ELSE '' END
					+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
					+'SE*'+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN CONVERT(VARCHAR(10),(('6'))) ELSE CONVERT(VARCHAR(10),(('4'))) END
					+'*000000001~' +@CRLF
					+'GE*1*000000002~' +@CRLF
					+'IEA*1*'
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)  ELSE RIGHT('0000000000'+h.PONumber,9) END +'~')),1)	
		END AS [FileText]
	FROM dbo.[855_Ack_Hdr] h with(nolock) 
		INNER JOIN dbo.[855_Ack_Dtl] d with(nolock) on h.AckID=d.AckID
		INNER JOIN dbo.Vendor_SAN_Codes v with(nolock) on h.VendorID=v.VendorID
	WHERE h.ResponseACKSent=0 
		AND v.processor='SFTP' 
		AND h.VendorID IN (SELECT VendorID from dbo.Vendor_SAN_Codes where ACK997=1)
	*/
END
GO
PRINT N'Altering [dbo].[ProcessSFTP_ShipNoticeAck]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Builds a list of Invoice ACKs to be exported to SFPT folders thru EDI.....>
-- =============================================
ALTER PROCEDURE [dbo].[ProcessSFTP_ShipNoticeAck]
AS

BEGIN

	SET NOCOUNT ON;
	DECLARE @CRLF VARCHAR(2) = CHAR(13) + CHAR(10)
	
	SELECT DISTINCT h.ShipID,REPLACE(h.ASNNo,'|','')+'-'+h.PONumber,v.ParentFolder, 
		CASE WHEN v.[Binary]=0 
			THEN	'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(h.ShipFromSAN AS CHAR(15)) 
					+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN '*:*00200*'+right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)  ELSE '*:*00200*'+RIGHT('0000000000'+h.PONumber,9) END 
					+'*0*P*>~' +@CRLF
					+'GS*FA*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
					+'ST*997*000000001~' +@CRLF
					+'AK1*SH*'+CONVERT(VARCHAR(12),CASE h.ShipFromSAN WHEN '2002442' THEN h.ReferenceNo WHEN '8600023' THEN ISNULL(h.GSNo,'') ELSE h.ASNNo END)+'~' +@CRLF
					+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN dbo.EDIfn_GetShipNoticeACKDtls(h.PONumber,h.ASNNo) ELSE '' END
					+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' +@CRLF
					+'SE*'
					+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN CONVERT(VARCHAR(10),(('6'))) ELSE CONVERT(VARCHAR(10),(('4'))) END+'*000000001~' +@CRLF
					+'GE*1*000000002~' +@CRLF
					+'IEA*1*'
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9)  ELSE RIGHT('0000000000'+h.PONumber,9) END +'~'
			ELSE	 CONVERT(VARCHAR(MAX),CONVERT(varbinary(MAX),CONVERT(VARCHAR(MAX),
					'ISA*00*          *00*          *ZZ*760985X        *ZZ*'+ CAST(h.ShipFromSAN AS CHAR(15)) +'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN '*:*00200*'+right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9) ELSE '*:*00200*'+RIGHT('0000000000'+h.PONumber,9) END 
					+'*0*P*>~'+@CRLF
					+'GS*FA*760985X*'+h.ShipFromSAN+'*'+CONVERT(VARCHAR(6),h.IssueDate,12)+'*'+REPLACE(CONVERT(VARCHAR(5),h.InsertDateTime,108),':','')+'*000000002*X*003060~' +@CRLF
					+'ST*997*000000001~' +@CRLF
					+'AK1*SH*'+CONVERT(VARCHAR(12),CASE h.ShipFromSAN WHEN '2002442' THEN h.ReferenceNo WHEN '8600023' THEN ISNULL(h.GSNo,'') ELSE h.ASNNo END)+'~' +@CRLF
					+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN dbo.EDIfn_GetShipNoticeACKDtls(h.PONumber,h.ASNNo) ELSE '' END
					+'AK9*A*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'*'+CONVERT(VARCHAR(10),(('1')))+'~' 					+@CRLF
					+'SE*'+CASE WHEN h.ShipFromSAN NOT IN ('2002442') THEN CONVERT(VARCHAR(10),(('6'))) ELSE CONVERT(VARCHAR(10),(('4'))) END+'*000000001~' +@CRLF
					+'GE*1*000000002~' +@CRLF
					+'IEA*1*'
					+CASE WHEN h.ShipFromSAN IN ('8600023') THEN right('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(h.PONumber AS VARCHAR(10)),9) ELSE RIGHT('0000000000'+h.PONumber,9) END +'~')),1)		
		END AS [FileText]
	FROM dbo.[856_ASN_Hdr] h with(nolock) 
		INNER JOIN dbo.[856_ASN_Dtl] d with(nolock) on h.ShipID=d.ShipID
		INNER JOIN dbo.Vendor_SAN_Codes v with(nolock) on h.VendorID=v.VendorID
	WHERE h.ASNACKSent=0 
		AND v.processor='SFTP' 
		AND h.VendorID IN (SELECT VendorID from dbo.Vendor_SAN_Codes where ASN997=1)


END
GO
PRINT N'Altering [dbo].[RPT_Get_InvoiceDtls]...';


GO
-- =============================================
-- Author:		Joey B.
-- Create date: 4/8/14
-- Description:	Get EDI invoices details for reporting
-- =============================================
ALTER PROCEDURE [dbo].[RPT_Get_InvoiceDtls] 
	@ParamString VARCHAR(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM interfering WITH SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	/*
		TESTING:
			declare @ParamString VARCHAR(50)
			set @ParamString = '215993 | 0952543566'
	*/

	declare	 @PONo VARCHAR(8)
			,@InvoiceNo VARCHAR(12)
			,@z10 VARCHAR(10) = '0'

	SELECT	 @PONo = LTRIM(RTRIM(LEFT(@ParamString,CHARINDEX('|',@ParamString,0)-1)))
			,@InvoiceNo = LTRIM(RTRIM(RIGHT(@ParamString,LEN(@ParamString)-CHARINDEX('|',@ParamString,0))))

	/*
		SELECT h.InvoiceNo,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATETIME), 107)[IssueDateTime],h.ReferenceNo,h.ShipToSAN,h.TotalPayable,ISNULL('000000000000','Not Rcvd')[SR_ShipmentNo],
			h.PONumber,h.ShipToLoc,ISNULL('00000000000000000000','NA')[ItemCode],ISNULL('','')[ItemDescription],d.ItemIdentifier,d.InvoiceQty,ISNULL(2,0)[ReceivedQuantity],
			CAST(ISNULL(d.UnitPrice,rd.Cost)AS MONEY)[UnitPrice],d.DiscountCode,d.DiscountPct,CAST(ISNULL(d.UnitPrice,rd.Cost) AS MONEY)*CAST(ISNULL(d.InvoiceQty,0) AS INT) [ExtendedPrice],l.Name,l.MailToAddress1,l.MailToAddress2,l.MailToAddress3
			,'000000000000'+' | %' [ParamPO],'000000000000'+' | '+'00000000000000000000' [ParamItem],ISNULL((SELECT SUM(chargeamt) FROM  dbo.[810_Inv_Charges] WHERE h.PONumber=PONumber AND h.InvoiceNo=InvoiceNo),0)[AddCharges]
		FROM dbo.[810_Inv_Hdr] h WITH(NOLOCK) INNER JOIN dbo.[810_Inv_Dtl] d WITH(NOLOCK) ON h.InvoiceID=d.InvoiceID
			INNER JOIN dbo.HPB_SAN_Codes st WITH(NOLOCK) ON st.SANCode=h.ShipToSAN
			INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l WITH(NOLOCK) ON l.LocationNo=st.LocationNo
			--LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm WITH(NOLOCK) ON pm.ItemCode=sr.ItemCode
			LEFT OUTER JOIN Logistics_VXRequisitionDtl rd WITH(NOLOCK) ON rd.PONumber=h.PONumber AND rd.VendorItem=d.ItemIdentifier
			--LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm2 WITH(NOLOCK) ON pm2.ItemCode=rd.ItemCode
		WHERE h.InvoiceNo = @InvoiceNo
		ORDER BY d.[LineNo]
	 */ 	 

	-- Get received items for PO
	SELECT srh.ShipmentNo,srh.LocationNo,srd.ItemCode,srd.Qty,pm.ISBN 
	INTO #sr
	FROM StoreReceiving.dbo.SR_Header srh 
		INNER JOIN StoreReceiving.dbo.SR_Detail srd 
			ON srh.BatchID=srd.BatchID
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm 
			ON srd.ItemCode=pm.ItemCode
	WHERE srh.ShipmentNo=RIGHT(@z10+@PONo,10)
	ORDER BY srh.ShipmentNo,srh.LocationNo,srd.ItemCode

	-- Get the EDI invoice
	SELECT	 h.InvoiceNo
			,CONVERT(VARCHAR(12)
			,CAST(h.IssueDate AS DATETIME), 107) AS [IssueDateTime]
			,h.ReferenceNo
			,h.ShipToSAN
			,h.TotalPayable
			,ISNULL(sr.ShipmentNo,'Not Rcvd') AS [SR_ShipmentNo]
			,h.PONumber
			,h.ShipToLoc
			,ISNULL(sr.ItemCode,'NA') AS [ItemCode]
			,COALESCE(pm2.Title,pm.Title) AS [ItemDescription]
			,d.ItemIdentifier
			,d.InvoiceQty
			,ISNULL(sr.Qty,0) AS [ReceivedQuantity]
			,CAST(COALESCE(d.UnitPrice,rd.Cost) AS MONEY) AS [UnitPrice]
			,d.DiscountCode
			,d.DiscountPct
			,CAST(COALESCE(d.UnitPrice,rd.Cost) AS MONEY)*CAST(COALESCE(d.InvoiceQty,0) AS INT) AS [ExtendedPrice]
			,l.[Name]
			,l.MailToAddress1
			,l.MailToAddress2
			,l.MailToAddress3
	INTO #edi
	FROM dbo.[810_Inv_Hdr] h
		INNER JOIN dbo.[810_Inv_Dtl] d 
			ON h.InvoiceID=d.InvoiceID
		INNER JOIN dbo.HPB_SAN_Codes st 
			ON st.SANCode=h.ShipToSAN
		INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l 
			ON l.LocationNo=st.LocationNo
		LEFT OUTER JOIN #sr sr 
			ON sr.ShipmentNo=RIGHT(@z10+h.PONumber,10) 
				AND sr.LocationNo=st.LocationNo 
				AND sr.ISBN=d.ItemIdentifier 
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm 
			ON pm.ItemCode=sr.ItemCode
		LEFT OUTER JOIN Logistics_VXRequisitionDtl rd 
			ON rd.PONumber=h.PONumber 
				AND rd.VendorItem=d.ItemIdentifier
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm2 
			ON pm2.ItemCode=rd.ItemCode
	WHERE h.InvoiceNo = @InvoiceNo 
		AND h.PONumber=@PONo
	ORDER BY d.[LineNo]

	----added this section to include any items received that were not part of the actual ORDER.  
	INSERT INTO #edi
		SELECT	 h.InvoiceNo
				,CONVERT(VARCHAR(12)
				,CAST(h.IssueDate AS DATETIME), 107) AS [IssueDateTime]
				,h.ReferenceNo
				,h.ShipToSAN
				,h.TotalPayable
				,ISNULL(sr.ShipmentNo,'Not Rcvd') AS [SR_ShipmentNo]
				,h.PONumber
				,h.ShipToLoc
				,ISNULL(sr.ItemCode,'NA') AS [ItemCode]
				,COALESCE(pm2.Title,pm1.Title) AS [ItemDescription]
				,ISNULL(sr.isbn,d.ItemIdentifier)
				,d.InvoiceQty
				,ISNULL(sr.Qty,0) AS [ReceivedQuantity]
				,CAST(COALESCE(d.UnitPrice,rd.Cost) AS MONEY) AS [UnitPrice]
				,d.DiscountCode
				,d.DiscountPct
				,CAST(COALESCE(d.UnitPrice,rd.Cost) AS MONEY)*CAST(COALESCE(d.InvoiceQty,0) AS INT) AS [ExtendedPrice]
				,l.[Name]
				,l.MailToAddress1
				,l.MailToAddress2
				,l.MailToAddress3
		FROM dbo.[810_Inv_Hdr] h 
			INNER JOIN dbo.[810_Inv_Dtl] d 
				ON h.InvoiceID=d.InvoiceID
			INNER JOIN dbo.HPB_SAN_Codes st 
				ON st.SANCode=h.ShipToSAN
			INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l 
				ON l.LocationNo=st.LocationNo
			LEFT OUTER JOIN Logistics_VXRequisitionDtl rd 
				ON rd.PONumber=h.PONumber AND rd.VendorItem=d.ItemIdentifier
			LEFT OUTER JOIN Logistics_VXVendorKits vk 
				ON vk.ParentItem = rd.ItemCode
			LEFT OUTER JOIN #sr sr 
				ON sr.ShipmentNo=RIGHT(REPLICATE('0',10)+h.PONumber,10) 
					AND sr.LocationNo=st.LocationNo 
					AND sr.ItemCode=ISNULL(vk.KitItem,rd.ItemCode)
			LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm1 
				ON pm1.ItemCode=sr.ItemCode
			LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm2 
				ON pm2.ItemCode=rd.ItemCode
		WHERE h.InvoiceNo = @InvoiceNo 
			AND h.PONumber=@PONo 
			AND sr.ItemCode NOT IN (SELECT ItemCode FROM #edi WHERE SR_ShipmentNo=sr.ShipmentNo GROUP BY ItemCode)
		ORDER BY d.[LineNo]
	
	-- Get any duplicate items FROM backorders
	CREATE TABLE #ediItems(ID INT IDENTITY(1,1),POnumber VARCHAR(10),Item VARCHAR(20),Qty BIGINT)
	--
	INSERT INTO #ediItems
		SELECT b.PONumber,b.ItemCode,b.InvoiceQty
		FROM #edi b
		WHERE b.sr_shipmentno<>'Not Rcvd' 
			AND b.PONumber<>@PONo 
			AND b.ItemCode=(SELECT itemcode FROM #edi WHERE PONumber=@PONo AND ItemCode=b.ItemCode)
		GROUP BY b.PONumber,b.itemcode,b.InvoiceQty
		ORDER BY b.itemcode,b.PONumber desc

	-- Loop thru back-ordered items AND sync received quantities
	DECLARE	 @loop INT
			,@lastQty BIGINT
			,@lastItem VARCHAR(20)

	SELECT	 @loop = (SELECT MAX(ID) FROM #ediItems)
			,@lastQty = 0

	WHILE ISNULL(@loop,0) > 0
		BEGIN
			DECLARE	 @curPO VARCHAR(10)
					,@itemcode VARCHAR(20)
					,@invQty BIGINT
					,@rctQty BIGINT
			
			SELECT	 @curPO=POnumber
					,@itemcode=Item
					,@invQty=Qty 
			FROM #ediItems 
			WHERE ID=@loop
			
			SELECT @rctQty=Qty 
			FROM #sr 
			WHERE itemcode=@itemcode
			
			IF @lastItem<>@itemcode BEGIN SET @lastQty=0 end
			IF @rctQty-@lastQty>@invQty
				BEGIN
					UPDATE #edi 
						SET ReceivedQuantity = @invQty
					WHERE PONumber=@curPO 
						AND ItemCode=@itemcode
					
					UPDATE #edi 
						SET ReceivedQuantity = ReceivedQuantity-@invQty
					WHERE PONumber=@PONo 
						AND ItemCode=@itemcode 
				END
			IF @rctQty-@lastQty<=@invQty
				BEGIN
					UPDATE #edi 
						SET receivedquantity = CASE WHEN @rctQty-@lastQty < 0 THEN 0 ELSE @rctQty-@lastQty END
					WHERE PONumber=@curPO AND itemcode=@itemcode					
					UPDATE #edi 
					SET receivedquantity = 0
					WHERE PONumber=@PONo 
						AND itemcode=@itemcode 
				END			
			SET @lastQty=@invQty
			SET @loop = @loop - 1
		END

	SELECT DISTINCT b.InvoiceNo,CONVERT(VARCHAR(12),CAST(b.IssueDateTime AS DATETIME),107) AS [IssueDateTime],b.ReferenceNo,b.ShipToSAN
			,CAST(b.TotalPayable AS DECIMAL(12,4)) AS [TotalPayable],b.sr_ShipmentNo AS [SR_ShipmentNo],b.PONumber,b.ShipToLoc
			,ISNULL(RIGHT(b.ItemCode,8),'NA') AS [ItemCode],b.ItemDescription,b.ItemIdentifier,b.InvoiceQty
			,ISNULL(b.ReceivedQuantity,0) AS [ReceivedQuantity],CAST(b.UnitPrice AS decimal(12,2))[UnitPrice]
			,CAST(b.DiscountPct AS DECIMAL(12,2)) AS [DiscountPercentage],CAST(b.ExtendedPrice AS DECIMAL(12,2)) AS [ExtendedPrice]
			,b.[Name],b.MailToAddress1,b.MailToAddress2,b.MailToAddress3,b.sr_ShipmentNo+' | %' [ParamPO],b.sr_ShipmentNo+' | '+b.ItemCode AS [ParamItem]
			,ISNULL((SELECT SUM(chargeamt) FROM dbo.[810_Inv_Charges] WHERE b.PONumber=PONumber AND b.InvoiceNo=InvoiceNo),0)[AddCharges]
	FROM #edi b 
	ORDER BY b.itemdescription,b.PONumber

	DROP TABLE #sr
	DROP TABLE #edi
	DROP TABLE #ediItems
END
GO
PRINT N'Altering [dbo].[RPT_Get_InvoiceItemDtls]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <4/8/14>
-- Description:	<Get EDI invoice item details for reporting....>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_Get_InvoiceItemDtls] 
	@ParamString VARCHAR(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM interfering WITH SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	/*
		TESTING:
			declare @ParamString VARCHAR(50)
			set @ParamString = '0000151631 | %' 
	---------------------------------------------
	*/

	DECLARE	 @PO VARCHAR(10)
			,@Item VARCHAR(20)
	
	SELECT	 @PO = LTRIM(RTRIM(LEFT(@ParamString,CHARINDEX('|',@ParamString,0)-1)))
			,@Item = LTRIM(RTRIM(RIGHT(@ParamString,LEN(@ParamString)-CHARINDEX('|',@ParamString,0))))
	IF @Item = '' SET @Item = '%'
	
	SELECT RIGHT(sh.ShipmentNo,6) AS [PONumber],RIGHT(ss.ItemCode,8) AS [ItemCode],ss.Quantity,ss.ScanTime,ss.IP,ss.ReceivingUser,ss.ReceivingVersion
	FROM StoreReceiving.dbo.SR_Header sh 
		INNER JOIN StoreReceiving.dbo.SR_Item_Scan ss 
			ON sh.BatchID=ss.BatchID
	WHERE sh.ShipmentNo = @PO 
		AND ss.ItemCode LIKE @Item
	UNION
	SELECT RIGHT(sh.ShipmentNo,6) AS [PONumber],RIGHT(ss.ItemCode,8) AS [ItemCode],ss.Quantity,ss.ScanTime,ss.IP,ss.ReceivingUser,ss.ReceivingVersion
	FROM StoreReceiving.dbo.SR_Header sh 
		INNER JOIN StoreReceiving.dbo.SR_Item_Scan_History ss 
			ON sh.BatchID=ss.BatchID
	WHERE sh.ShipmentNo = @PO 
		AND ss.ItemCode LIKE @Item
	ORDER BY RIGHT(ss.ItemCode,8),ss.ScanTime
END
GO
PRINT N'Altering [dbo].[RPT_Get_InvoiceSummary]...';


GO

-- =============================================
-- Author:		<Joey B.>
-- Create date: <4/8/14>
-- Description:	<Get EDI invoice summary BY date range>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_Get_InvoiceSummary] 
	 @startdate DATETIME
	,@enddate DATETIME
	,@VendorID VARCHAR(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM interfering WITH SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED -- EQUIVALENT TO WITH(NOLOCK)
	
	DECLARE @TENZERO VARCHAR(10) = REPLICATE('0',10)

	/*
		TESTING:
			declare @startdate DATETIME
			declare @enddate DATETIME
			declare @VendorID VARCHAR(30)
			set @startdate = '9/20/2016'
			set @enddate = '9/30/2016'
			set @VendorID = 'IDRANDOMDI'
	*/
	
	SELECT h.VendorID, h.PONumber AS [PO], h.InvoiceNo
	INTO #POs
	FROM dbo.[810_Inv_Hdr] h 
		INNER JOIN dbo.[810_Inv_Dtl] d 
			ON h.InvoiceID=d.InvoiceID
	WHERE (h.IssueDate >= @startdate AND h.IssueDate <= @enddate)
		AND h.VendorID=@VendorID
	GROUP BY h.VendorID,h.InvoiceNo,h.PONumber
	
	----get received items for PO
	SELECT srh.ShipmentNo,srh.LocationNo,srd.ItemCode,srd.Qty,pm.ISBN
	INTO #sr
	FROM StoreReceiving_SRHeader srh 
		INNER JOIN StoreReceiving_SRDetail srd ON srh.BatchID=srd.BatchID
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm ON srd.ItemCode=pm.ItemCode
	WHERE srh.ShipmentNo in (SELECT RIGHT(@TENZERO+PO,10) FROM #POs GROUP BY PO)
	ORDER BY srh.ShipmentNo,srh.LocationNo,srd.ItemCode

	----get the EDI invoice
	SELECT	 h.VendorID,h.InvoiceNo,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATETIME), 107) AS [IssueDateTime],h.ReferenceNo,h.ShipToSAN,h.TotalPayable
			,ISNULL(sr.ShipmentNo,'Not Rcvd') AS [SR_ShipmentNo],h.PONumber,h.ShipToLoc,ISNULL(sr.ItemCode,'NA') AS [ItemCode],COALESCE(pm2.Title,pm1.Title) AS [ItemDescription]
			,d.ItemIdentifier,d.InvoiceQty,ISNULL(sr.Qty,0) AS [ReceivedQuantity],CAST(ISNULL(d.UnitPrice,rd.Cost) AS MONEY) AS [UnitPrice],d.DiscountCode,d.DiscountPct
			,CAST(ISNULL(d.UnitPrice,rd.Cost) AS MONEY)*CAST(ISNULL(d.InvoiceQty,0) AS INT) AS [ExtendedPrice],l.[Name],l.MailToAddress1,l.MailToAddress2,l.MailToAddress3
	INTO #edi
	FROM dbo.[810_Inv_Hdr] h 
		INNER JOIN dbo.[810_Inv_Dtl] d ON h.InvoiceID=d.InvoiceID
		INNER JOIN dbo.HPB_SAN_Codes st ON st.SANCode=h.ShipToSAN
		INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l ON l.LocationNo=st.LocationNo
		LEFT OUTER JOIN #sr sr ON sr.ShipmentNo=RIGHT(@TENZERO+h.PONumber,10) AND sr.ISBN=d.ItemIdentifier AND sr.LocationNo=st.LocationNo
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm1 ON pm1.ItemCode=sr.ItemCode
		LEFT OUTER JOIN Logistics_VXRequisitionDtl rd ON rd.PONumber=h.PONumber AND rd.VendorItem=d.ItemIdentifier
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm2 ON pm2.ItemCode=rd.ItemCode
	WHERE h.InvoiceNo in (SELECT InvoiceNo FROM #POs GROUP BY InvoiceNo)
	ORDER BY d.[LineNo]
	
	----added this section to include any items received that were not part of the actual ORDER. 
	INSERT INTO #edi
	SELECT h.VendorID,h.InvoiceNo,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATETIME), 107) AS [IssueDateTime],h.ReferenceNo,h.ShipToSAN,h.TotalPayable
		,ISNULL(sr.ShipmentNo,'Not Rcvd') AS [SR_ShipmentNo],h.PONumber,h.ShipToLoc,ISNULL(sr.ItemCode,'NA') AS [ItemCode],COALESCE(pm2.Title,pm1.Title) AS [ItemDescription]
		,ISNULL(sr.isbn,d.ItemIdentifier) AS [ItemIdentifier],0,ISNULL(sr.Qty,0) AS [ReceivedQuantity],CAST(COALESCE(pm1.Cost,rd.Cost) AS MONEY) AS [UnitPrice],d.DiscountCode,d.DiscountPct
		,CAST(ISNULL(pm1.Cost,rd.Cost) AS MONEY)*CAST(ISNULL(sr.Qty,0) AS INT) AS [ExtendedPrice],l.[Name],l.MailToAddress1,l.MailToAddress2,l.MailToAddress3
	FROM dbo.[810_Inv_Hdr] h 
		INNER JOIN dbo.[810_Inv_Dtl] d  ON h.InvoiceID=d.InvoiceID
		INNER JOIN dbo.HPB_SAN_Codes st ON st.SANCode=h.ShipToSAN
		INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l ON l.LocationNo=st.LocationNo
		LEFT OUTER JOIN Logistics_VXRequisitionDtl rd ON rd.PONumber=h.PONumber AND rd.VendorItem=d.ItemIdentifier
		LEFT OUTER JOIN Logistics_VXVendorKits vk ON vk.ParentItem = rd.ItemCode
		LEFT OUTER JOIN #sr sr ON sr.ShipmentNo=RIGHT(@TENZERO+h.PONumber,10) AND sr.LocationNo=st.LocationNo AND sr.ItemCode=ISNULL(vk.KitItem,rd.ItemCode)
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm1 ON pm1.ItemCode=sr.ItemCode
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm2 ON pm2.ItemCode=rd.ItemCode
	WHERE h.InvoiceNo IN (SELECT InvoiceNo FROM #POs GROUP BY InvoiceNo) AND sr.ItemCode NOT IN (SELECT ItemCode FROM #edi WHERE SR_ShipmentNo=sr.ShipmentNo GROUP BY ItemCode)
	ORDER BY d.[LineNo]

	----get first run of groupings
	SELECT b.VendorID,b.PONumber AS [PONumber], b.ShipToLoc AS [Store],CONVERT(VARCHAR(12),CAST(b.IssueDateTime AS DATETIME),107) AS [InvoiceDate],b.InvoiceNo,
		CAST(b.TotalPayable AS decimal(12,4)) AS [TotalPayable],CAST(0 AS MONEY) AS [ChargeAmountExcludingTax],
		SUM(CAST(ISNULL(b.InvoiceQty,0) AS INT)) AS [InvoicedQuantity],SUM(CAST(ISNULL(b.ReceivedQuantity,0) AS INT)) AS [ReceivedQuantity],
		SUM(CAST(ISNULL(b.InvoiceQty,0) AS INT))*CAST(ISNULL(b.UnitPrice,0) AS MONEY) AS [InvoiceAmt],
		SUM(CAST(ISNULL(b.ReceivedQuantity,0) AS INT))*CAST(ISNULL(b.UnitPrice,0) AS MONEY) AS [ReceivedAmt],
		SUM(CAST(ISNULL(b.InvoiceQty,0) AS INT))-SUM(CAST(ISNULL(b.ReceivedQuantity,0) AS INT)) AS [CountVariance],
		CAST(ISNULL(b.UnitPrice,0) AS MONEY)*(SUM(CAST(ISNULL(b.InvoiceQty,0) AS INT))-SUM(CAST(ISNULL(b.ReceivedQuantity,0) AS INT))) AS [CostVariance]
	INTO #final
	FROM #edi b 
	GROUP BY b.VendorID,b.ShipToLoc,CONVERT(VARCHAR(12),CAST(b.IssueDateTime AS DATETIME),107),b.InvoiceNo,CAST(b.TotalPayable AS decimal(12,4)),CAST(ISNULL(b.UnitPrice,0) AS MONEY)
			,b.PONumber 
	ORDER BY b.VendorID,b.ShipToLoc,ponumber
	
	----do final groupings for report results
	SELECT f.VendorID,f.PONumber AS [PONumber],f.Store,f.InvoiceDate,f.InvoiceNo,f.TotalPayable,
		ISNULL((SELECT SUM(chargeamt) FROM  dbo.[810_Inv_Charges] WHERE f.PONumber=PONumber AND f.InvoiceNo=InvoiceNo),0) AS [AdditionalCharges],
		SUM(f.InvoiceAmt) AS [InvoiceAmt],SUM(CAST(ISNULL(f.InvoicedQuantity,0) AS INT)) AS [InvoicedQuantity],
		SUM(f.ReceivedAmt) AS [ReceivedAmt],SUM(CAST(ISNULL(f.ReceivedQuantity,0) AS INT)) AS [ReceivedQuantity],
		SUM(f.CountVariance) AS [CountVariance],CAST(SUM(f.CostVariance)AS MONEY) AS [CostVariance],
		MAX(f.PONumber)+' | '+f.InvoiceNo AS [ParamString]
	FROM #final f
	GROUP BY f.VendorID,f.Store,f.InvoiceDate,f.InvoiceNo,f.TotalPayable,f.PONumber
	ORDER BY f.VendorID,CAST(f.InvoiceDate AS DATE),f.Store,f.PONumber,f.InvoiceNo

	DROP TABLE #final
	DROP TABLE #sr
	DROP TABLE #edi
	DROP TABLE #POs
END
GO
PRINT N'Altering [dbo].[RPT_Get_Loc_Invoices]...';


GO
/*
	====================================================================================================================================================================================
	RPT_Get_Loc_Invoices

	Example Run:
		declare @Location char(5),@VendorID varchar(30)
		set @Location='00944'
		set @VendorID='IDHACHDIST'

	Author		Date			Description
	----------- --------------- --------------------------------------------------------------------------------------------------------------------------------------------------------
	Joey B		04/08/2014		Get EDI invoices by location for reporting
	Andrew B	08/29/2019		Updated to include vendors that use vendor location table instead of hpb san codes			
	====================================================================================================================================================================================
*/
ALTER PROCEDURE [dbo].[RPT_Get_Loc_Invoices] 
	@Location char(5), @VendorID varchar(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	----get location invoices
	/*
		CODE FROM 04/2014:

		select distinct h.PONumber[PONumber],h.InvoiceNo,convert(varchar(12), cast(h.IssueDate as datetime), 107)[IssueDateTime],
			ltrim(rtrim(cast(max(h.PONumber)as varchar(10))))+' | '+ltrim(rtrim(cast(h.InvoiceNo as varchar(20)))) [Params],
			'PONumber: ' + max(h.PONumber) + ' - InvoiceNo: ' + h.InvoiceNo + ' - InvoiceDate: ' + convert(varchar(12), cast(h.IssueDate as datetime), 107)[InvoiceLabel]
		from Dbo.[810_Inv_Hdr] h with(nolock) inner join dbo.[810_Inv_Dtl] d with(nolock) on h.InvoiceID=d.InvoiceID
			inner join dbo.HPB_SAN_Codes c on c.SANCode=h.ShipToSAN
			inner join dbo.Vendor_SAN_Codes v on v.SANCode=h.ShipFromSAN
		where h.ShipToLoc = @Location and h.VendorID = @VendorID
		group by h.InvoiceNo,convert(varchar(12), cast(h.IssueDate as datetime), 107),h.PONumber
		order by h.InvoiceNo desc,h.PONumber
	*/
	
	-- Update code from 08/2019
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	-- for new/updated vendors that use the vendor lcoation table instead of the hpb san codes table
	SELECT	 h.PONumber[PONumber]
			,h.InvoiceNo
			,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATE), 107) AS [IssueDateTime]
			,LTRIM(RTRIM(CAST(MAX(h.PONumber) AS VARCHAR(10)))) +' | '+ LTRIM(RTRIM(CAST(h.InvoiceNo AS VARCHAR(20)))) AS [Params]
			,'PONumber: ' + MAX(h.PONumber) + ' - InvoiceNo: ' + h.InvoiceNo + ' - InvoiceDate: ' + CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATE), 107) AS [InvoiceLabel]
	FROM dbo.[810_Inv_Hdr] h 
		INNER JOIN dbo.[810_Inv_Dtl] d 
			ON h.InvoiceID=d.InvoiceID
		INNER JOIN MetaData.VendorLocations vl
			ON cast(ltrim(rtrim(vl.LocationNumber)) as char(5)) = cast(ltrim(rtrim(h.ShipToLoc)) as char(5))
	WHERE h.ShipToLoc = @Location 
		AND h.VendorID = @VendorID
	GROUP BY h.InvoiceNo,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATE), 107),h.PONumber, ShipToSAN

	UNION 
	-- for old vendors that still use the hpb san codes table
	SELECT	 h.PONumber[PONumber]
			,h.InvoiceNo
			,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATE), 107) AS [IssueDateTime]
			,LTRIM(RTRIM(CAST(MAX(h.PONumber) AS VARCHAR(10)))) +' | '+ LTRIM(RTRIM(CAST(h.InvoiceNo AS VARCHAR(20)))) AS [Params]
			,'PONumber: ' + MAX(h.PONumber) + ' - InvoiceNo: ' + h.InvoiceNo + ' - InvoiceDate: ' + CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATE), 107) AS [InvoiceLabel]
	FROM dbo.[810_Inv_Hdr] h 
		INNER JOIN dbo.[810_Inv_Dtl] d 
			ON h.InvoiceID=d.InvoiceID
		INNER JOIN dbo.HPB_SAN_Codes c 
			on c.SANCode=h.ShipToSAN
			AND h.VendorId NOT IN (SELECT VendorID FROM MetaData.VendorLocations GROUP BY VendorID)
		INNER JOIN dbo.Vendor_SAN_Codes v 
			on v.SANCode=h.ShipFromSAN
	WHERE h.ShipToLoc = @Location 
		AND h.VendorID = @VendorID
	GROUP BY h.InvoiceNo,CONVERT(VARCHAR(12), CAST(h.IssueDate AS DATE), 107),h.PONumber
	ORDER BY h.InvoiceNo desc,h.PONumber
END
GO
PRINT N'Altering [dbo].[RPT_Get_Locations]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <4/8/14>
-- Description:	<Get EDI locations for reporting....>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_Get_Locations] 
	@VendorID varchar(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	----get locations
	SELECT DISTINCT 
		 l.LocationNo
		,l.[Name]
		,RIGHT(l.locationno,3)+ ' - ' + l.[Name] AS [Store]
	FROM [$(HPB_Prime)].[dbo].[Locations] l 
		INNER JOIN dbo.HPB_SAN_Codes s ON l.LocationNo=s.LocationNo
		INNER JOIN dbo.[810_Inv_Hdr] h ON l.LocationNo=h.ShipToLoc
	WHERE ISNUMERIC(s.LocationNo)=1 
		AND (CAST(s.LocationNo as int)< 200 
		OR s.LocationNo='00944') 
		AND h.VendorID=@VendorID
	ORDER BY l.LocationNo,l.[Name]
			
END
GO
PRINT N'Altering [dbo].[RPT_Get_Vendors]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <4/8/14>
-- Description:	<Get EDI Vendors for reporting....>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_Get_Vendors] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	----get vendors
	SELECT DISTINCT 
		v.VendorID
		,v.VendorName
		,v.VendorID + '  -  ' + v.VendorName AS [VendorLabel]
	FROM dbo.Vendor_SAN_Codes v 
		INNER JOIN [$(HPB_Prime)].[dbo].[VendorMaster] vm 
			ON v.VendorID=vm.VendorID
		INNER JOIN HPB_EDI.dbo.[810_Inv_Hdr] h 
			ON h.ShipFromSAN=v.SANCode
	ORDER BY v.VendorID				
END
GO
PRINT N'Altering [dbo].[UpdateProcessedAckACK]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Update PO processed flag and date......>
-- =============================================
ALTER PROCEDURE [dbo].[UpdateProcessedAckACK]
	@ponum VARCHAR(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE BLK.AcknowledgeHeader
		SET responseacksent=1
    WHERE PONumber = @ponum
		OR (GSNo IN (SELECT DISTINCT GSNo FROM dbo.[855_Ack_Hdr] WHERE PONumber=@ponum)
			AND VendorID IN ('IDSCHOLDIS'))
END
GO
PRINT N'Altering [dbo].[UpdateProcessedASNACK]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<UPDATE PO processed flag and date......>
-- =============================================
ALTER PROCEDURE [dbo].[UpdateProcessedASNACK]
	@asnNo VARCHAR(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	DECLARE	 @asn VARCHAR(20)
			,@po VARCHAR(10)

	SELECT	 @asn=REPLACE(SUBSTRING(@asnNo,1,CHARINDEX('-',@asnNo,0)-1),'-','')
			,@po=REPLACE(SUBSTRING(@asnNo,CHARINDEX('-',@asnNo,0),LEN(@asnNo)-CHARINDEX('-',@asnNo,0)+1),'-','')

	UPDATE BLK.ShipmentHeader
		SET ASNACKSent=1
    WHERE ASNNo = @asn 
		AND PONumber = @po
		OR (GSNo IN (SELECT DISTINCT GSNo FROM dbo.[856_ASN_Hdr] WHERE ASNNo=@asnNo AND PONumber=@po)
			AND VendorID in ('IDSCHOLDIS'))    
END
GO
PRINT N'Altering [dbo].[UpdateProcessedInvACK]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <5/8/2015>
-- Description:	<Update PO processed flag and date......>
-- =============================================
ALTER PROCEDURE [dbo].[UpdateProcessedInvACK]
	@invoiceno varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE BLK.InvoiceHeader
		SET InvoiceACKSent=1
    WHERE InvoiceNo = @invoiceno 
		OR (ReferenceNo IN (SELECT ReferenceNo FROM dbo.[810_Inv_Hdr] WHERE InvoiceNo=@invoiceno GROUP BY ReferenceNo)
		AND VendorID IN (SELECT VendorID FROM dbo.[810_Inv_Hdr] WHERE InvoiceNo=@invoiceno GROUP BY VendorID))
    
END
GO
PRINT N'Altering [dbo].[UpdateProcessedPO]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <10/9/2013>
-- Description:	<Update PO processed flag and date......>
-- =============================================
ALTER PROCEDURE [dbo].[UpdateProcessedPO]
	@PONumber char(6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE BLK.PurchaseOrderHeader
		SET	 Processed = 1
			,ProcessedDateTime = GETDATE()
    WHERE PONumber = @PONumber    
END
GO
PRINT N'Creating [BLK].[uspAcknowledge_Insert]...';


GO
CREATE PROCEDURE [BLK].[uspAcknowledge_Insert]
(
	
	 @header AS BLK.TypeAcknowledgeHeader READONLY
	,@detail AS BLK.TypeAcknowledgeDetail READONLY
	,@ediver AS TINYINT
)
AS
BEGIN
	DECLARE	 @success BIT = 0
			,@message VARCHAR(2500)
	CREATE TABLE #inserted ( id INT,po VARCHAR(22))

	
	BEGIN TRY
		BEGIN TRANSACTION acknowledge_insert
		INSERT INTO blk.AcknowledgeHeader ([PONumber], [IssueDate], [VendorId], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [ShipFromSAN], [TotalLines], [TotalQuantity], [CurrencyCode], [InsertDateTime], [Processed], [ProcessedDateTime], [ResponseACKSent], [ResponseAckNo], [GSNo], [EDISourceTypeId], [VendorMessage])
			OUTPUT inserted.AckId, inserted.ponumber INTO #inserted(id, po)
			SELECT [PONumber], [IssueDate], [VendorId], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [ShipFromSAN], [TotalLines], [TotalQuantity], [CurrencyCode], [InsertDateTime], [Processed], [ProcessedDateTime], [ResponseACKSent], [ResponseAckNo], [GSNo], @ediver, [VendorMessage]
			FROM @header

		IF EXISTS(SELECT 1 from #inserted)
			BEGIN
				-- must have both header and detail data to be a valid record
				INSERT INTO blk.AcknowledgeDetail ([AckId], [LineNo], [LineStatusCode], [ItemStatusCode], [UnitOfMeasure], [QuantityOrdered], [QuantityShipped], [QuantityCancelled], [QuantityBackordered], [UnitPrice], [PriceCode], [CurrencyCode], [ItemIdCode], [ItemIdentifier], [ItemDesc], [EDIFileID], [EDILineNumber], [VendorStatus])
					SELECT i.id, [LineNo], [LineStatusCode], [ItemStatusCode], [UnitOfMeasure], [QuantityOrdered], [QuantityShipped], [QuantityCancelled], [QuantityBackordered], [UnitPrice], [PriceCode], [CurrencyCode], [ItemIdCode], [ItemIdentifier], [ItemDesc], [EDIFileID], [EDILineNumber], [VendorStatus]
					FROM @detail d
						INNER JOIN #inserted i		
							 ON LTRIM(RTRIM(d.[PoNumber])) =  LTRIM(RTRIM(i.po))
					SET @success = 1
				COMMIT TRANSACTION acknowledge_insert
			END
		ELSE	
			BEGIN
				SELECT	 @success = 0
						,@message = 'Could not get detail data'		
			END
	END TRY
	BEGIN CATCH
		SELECT	 @success = 0
				,@message = CAST(ERROR_NUMBER() AS VARCHAR(10)) + ' ' + CAST(ERROR_LINE() AS VARCHAR(10)) + ' ' +  ERROR_MESSAGE()
		ROLLBACK TRANSACTION acknowledge_insert
	END CATCH

	IF @success = 1
		IF @@TRANCOUNT > 0 COMMIT TRANSACTION acknowledge_insert
	ELSE
		BEGIN
			IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK TRANSACTION acknowledge_insert
			END
			INSERT INTO Logging.SQLMessages(ProcedureName, ErrorMessage) VALUES ('uspAcknowledge_Insert', @message)
		END
	SELECT @success AS [Successful],@message as StatusMessage
END
GO
PRINT N'Creating [BLK].[uspInvoice_Insert]...';


GO
CREATE PROCEDURE [BLK].[uspInvoice_Insert]
(
	 @header AS BLK.TypeInvoiceHeader READONLY
	,@detail AS BLK.TypeInvoiceDetail READONLY
	,@ediver AS TINYINT
)
AS
BEGIN
	DECLARE  @success BIT = 0
			,@message  VARCHAR(2500)
	CREATE TABLE #inserted (id INT, po VARCHAR(22))
	
	BEGIN TRANSACTION invoice_insert
	BEGIN TRY
		INSERT INTO blk.InvoiceHeader ([PONumber], [InvoiceNo], [IssueDate], [VendorId], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [ShipFromSAN], [TotalLines], [TotalQuantity], [TotalPayable], [CurrencyCode], [InsertDateTime], [Processed], [ProcessedDateTime], [InvoiceACKSent], [InvoiceAckNo], [GSNo], [EDISourceTypeId])
			OUTPUT inserted.invoiceid, inserted.ponumber INTO #inserted(id, po)
			SELECT [PONumber], [InvoiceNo], [IssueDate], [VendorId], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [ShipFromSAN], [TotalLines], [TotalQuantity], [TotalPayable], [CurrencyCode], [InsertDateTime], [Processed], [ProcessedDateTime], [InvoiceACKSent], [InvoiceAckNo], [GSNo], @ediver
			FROM @header

		IF EXISTS(SELECT 1 FROM @detail d INNER JOIN #inserted i ON d.[ponumber] = i.po)
			BEGIN
				-- must have both header and detail data to be a valid record
				INSERT INTO blk.InvoiceDetail ([InvoiceId], [LineNo], [ItemIdCode], [ItemIdentifier], [ItemDesc], [InvoiceQty], [UnitPrice], [DiscountPrice], [DiscountCode], [DiscountPct], [RetailPrice])
					SELECT i.id, [LineNo], [ItemIdCode], [ItemIdentifier], [ItemDesc], [InvoiceQty], [UnitPrice], [DiscountPrice], [DiscountCode], [DiscountPct], [RetailPrice]
					FROM @detail d
						INNER JOIN #inserted i		
							 ON LTRIM(RTRIM(d.[ponumber])) =  LTRIM(RTRIM(i.po))
				SET @success = 1
			END
		ELSE
			BEGIN
				SELECT	 @success = 0
						,@message = 'Could not get detail data'			
			END	
	END TRY
	BEGIN CATCH		
		SELECT	 @success = 0
				,@message = CAST(ERROR_NUMBER() AS VARCHAR(10)) + ' ' + CAST(ERROR_LINE() AS VARCHAR(10)) + ' ' +  ERROR_MESSAGE()
	END CATCH

	IF @success = 1
		COMMIT TRANSACTION invoice_insert
	ELSE
		BEGIN
			ROLLBACK TRANSACTION invoice_insert
			INSERT INTO Logging.SQLMessages(ProcedureName, ErrorMessage) VALUES ('uspInvoice_Insert', @message)
		END
	SELECT @success AS [Successful]
END
GO
PRINT N'Creating [BLK].[uspPurchaseOrder_Retrieve]...';


GO
CREATE PROCEDURE [BLK].[uspPurchaseOrder_Retrieve] 
(
	@ponumber VARCHAR(10)
)
AS
BEGIN
	SELECT	 [OrderId]
			,[PONumber]
			,[IssueDate]
			,[VendorID]
			,[ShipToLoc]
			,[ShipToSAN]
			,[BillToLoc]
			,[BillToSAN]
			,[ShipFromLoc]
			,[ShipFromSAN]
			,[TotalLines]
			,[TotalQuantity]
			,[InsertDateTime]
			,[ShippingMethod]
			,[Processed]
			,[ProcessedDateTime]
	FROM blk.PurchaseOrderHeader
	WHERE PONumber = @ponumber


	SELECT	 d.[OrderItemId]
			,d.[OrderId]
			,d.[LineNo]
			,d.[Quantity]
			,d.[UnitOfMeasure]
			,d.[UnitPrice]
			,d.[PriceCode]
			,d.[ItemIdCode]
			,d.[ItemIdentifier]
			,d.[ItemFillTerms]
			,d.[XActionCode]
			,d.[FillAmount]
	FROM blk.PurchaseOrderDetail d
		INNER JOIN blk.PurchaseOrderHeader h
			ON d.OrderId = h.OrderId
	WHERE h.PONumber = @ponumber
END
GO
PRINT N'Creating [BLK].[uspShipment_Insert]...';


GO
CREATE PROCEDURE [BLK].[uspShipment_Insert]
(
	 @header AS BLK.TypeShipmentHeader READONLY
	,@detail AS BLK.TypeShipmentDetail READONLY
	,@ediver AS TINYINT
)
AS
BEGIN
	DECLARE  @success BIT = 0
			,@message  VARCHAR(2500)
	CREATE TABLE #inserted (id INT,po VARCHAR(22))

	BEGIN TRANSACTION shipment_insert
	BEGIN TRY
		INSERT INTO BLK.ShipmentHeader ([PONumber], [ASNNo], [IssueDate], [VendorID], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [ShipFromSAN], [Carrier], [TotalLines], [TotalQuantity], [CurrencyCode], [InsertDateTime], [Processed], [ProcessedDateTime], [ASNACKSent], [ASNAckNo], [GSNo], [EDISourceTypeId], [PackageWeight], [NumberOfUnits], [ShipmentDate])
			OUTPUT inserted.ShipmentID, inserted.ponumber into #inserted(id, po)
			SELECT [PONumber], [ASNNo], [IssueDate], [VendorID], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [ShipFromSAN], [Carrier], [TotalLines], [TotalQuantity], [CurrencyCode], [InsertDateTime], [Processed], [ProcessedDateTime], [ASNACKSent], [ASNAckNo], [GSNo], @ediver, [PackageWeight], [NumberOfUnits], [ShipmentDate]
			FROM @header

		IF EXISTS(SELECT 1 FROM @detail d INNER JOIN #inserted i ON d.[ponumber] = i.po)
			BEGIN
				-- must have both header and detail data to be a valid record
				INSERT INTO BLK.ShipmentDetail ([ShipmentID], [LineNo], [ItemIdCode], [ItemIdentifier], [ItemDesc], [QuantityShipped], [PackageNo], [TrackingNo], [ReferenceNumber], [QuantityPredicted], [VendorPriceList], [VendorPriceNetDiscounted] )
					SELECT i.id, [LineNo], [ItemIdCode], [ItemIdentifier], [ItemDesc], [QuantityShipped], [PackageNo], [TrackingNo], ReferenceNumber, [QuantityPredicted], [VendorPriceList], [VendorPriceNetDiscounted] 
					FROM @detail d
						INNER JOIN #inserted i		
							 ON LTRIM(RTRIM(d.[PoNumber])) =  LTRIM(RTRIM(i.po))
				SET @success = 1
			END
		ELSE	
			BEGIN
				SELECT	 @success = 0
						,@message = 'Could not get detail data'			
			END	
	END TRY
	BEGIN CATCH
		SELECT	 @success = 0
				,@message = CAST(ERROR_NUMBER() AS VARCHAR(10)) + ' ' + CAST(ERROR_LINE() AS VARCHAR(10)) + ' ' +  ERROR_MESSAGE()
	END CATCH

	IF @success = 1
		COMMIT TRANSACTION shipment_insert
	ELSE
		BEGIN
			ROLLBACK TRANSACTION shipment_insert
			INSERT INTO Logging.SQLMessages(ProcedureName, ErrorMessage ) VALUES ('uspShipment_Insert', @message)
		END

	SELECT @success AS [Successful]
END
GO
PRINT N'Creating [BLK].[uspGetUnprocessedOrders]...';


GO
CREATE PROCEDURE BLK.uspGetUnprocessedOrders
AS
BEGIN
	SELECT PONumber
	FROM blk.PurchaseOrderHeader
	WHERE processed = 0
END
GO
PRINT N'Creating [BLK].[uspVXtoEDIOrders]...';


GO
CREATE PROCEDURE [BLK].[uspVXtoEDIOrders]
(
	@polist as dbo.TypeListString25 readonly
)
AS
BEGIN
	DECLARE @POID AS TABLE (PO VARCHAR(50), ID INT)

	BEGIN TRANSACTION insert_records
	BEGIN TRY
		INSERT INTO BLK.PurchaseOrderHeader ([PONumber], [IssueDate], [VendorID], [ShipToLoc], [ShipToSAN], [BillToLoc], [BillToSAN], [ShipFromLoc], [TotalLines], [TotalQuantity]
											,[InsertDateTime], [Processed], [ShippingMethod], [RequestedBy], [ApprovedBy], [DateApproved])
		OUTPUT Inserted.[PONumber], Inserted.[OrderId] INTO @POID (PO, ID)
			SELECT	 h.[PONumber]
					,h.[RequisitionDate]
					,h.[VendorID]
					,h.[LocationNo] AS [ShipToLoc]
					,s.[SANCode] AS [ShipToSan]
					,'HPBCA' AS [BillToLoc]
					,'760-9876' AS [BillToSan]
					,CASE WHEN ISNULL(wr.Warehouse1,'NA') != 'NA' THEN wr.Warehouse1 ELSE 'VEND' END AS [ShipFromLoc]
					,COUNT(1) AS TotalLines
					,SUM(d.RequestedQty) AS TotalQuantity
					,GETDATE() AS InsertDateTime
					,0 AS Processed
					,NULL AS ShippingMethod
					,h.RequestBy
					,h.ApprovedBy
					,h.ApprovedDate
			FROM Logistics_VXRequisitionHdr h
				INNER JOIN Logistics_VXRequisitionDtl d
					ON h.RequisitionNo = d.RequisitionNo
				INNER JOIN dbo.HPB_SAN_Codes s
					ON h.LocationNo = s.LocationNo
				INNER JOIN Logistics_VXReorderControl rc
					ON rc.PONumber = h.PONumber
						AND rc.Locked = 'Y'
				INNER JOIN @polist po
					ON rc.PONumber = LTRIM(RTRIM(po.Strings))
				LEFT JOIN Logistics_VXWhseRef wr
					ON wr.VendorID = h.VendorID
						AND wr.StoreNo = h.LocationNo
			WHERE NOT EXISTS (SELECT 1 FROM BLK.PurchaseOrderHeader poh WHERE poh.PONumber = rc.PONumber AND CAST(poh.DateApproved AS DATE) = CAST(rc.LockedDate AS DATE))
			GROUP BY h.PONumber,h.RequisitionDate,h.VendorID,h.LocationNo,s.SanCode,CASE WHEN ISNULL(wr.Warehouse1,'NA') != 'NA' THEN wr.Warehouse1 ELSE 'VEND' END , h.ReqQty,h.RequestBy,h.ApprovedBy,h.ApprovedDate
		
		INSERT INTO BLK.PurchaseOrderDetail (OrderId, [LineNo], HPBItemCode, ItemIdentifier, Quantity, UnitPrice, FillAmount, XActionCode, UnitOfMeasure, PriceCode, ItemIdCode, ItemFillTerms)
			SELECT	 p.Id
					,RIGHT(REPLICATE('0', 4) + CAST(d.LineNum AS VARCHAR(4)), 4) AS [LineNo]
					,d.ItemCode AS HPBItemCode
					,d.VendorItem AS ItemIdentifier
					,d.RequestedQty
					,d.Cost AS UnitPrice
					,d.RequestedQty * d.Cost AS FillAmount
					,0 AS XActionCode
					,'UN' AS UnitOfMeausre
					,'NT' AS PriceCode
					,'EN' AS ItemIDCode
					,'N' AS ItemFillTerms
			FROM Logistics_VXRequisitionHdr h
				INNER JOIN Logistics_VXRequisitionDtl d
					ON h.RequisitionNo = d.RequisitionNo
				INNER JOIN Logistics_VXReorderControl rc
					ON rc.PONumber = h.PONumber
						AND rc.Locked = 'Y'
				INNER JOIN @polist po
					ON rc.PONumber = LTRIM(RTRIM(po.Strings))
				INNER JOIN @POID p 	
					ON h.PONumber = p.PO
			ORDER BY p.id, CAST(LineNum AS INT)
		COMMIT TRANSACTION insert_records
		SELECT 'SUCCESS'
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION insert_records
		SELECT 'ROLLEDBACK'
	END CATCH
END
GO
PRINT N'Creating [CDF].[uspPurchaseOrder_Retrieve]...';


GO
CREATE PROCEDURE [CDF].[uspPurchaseOrder_Retrieve] 
(
	 @ordernumber VARCHAR(22)
	,@DateIsCentral BIT = 0
	,@DateStart DATE = null
	,@DateEnd DATE = null
)
AS
BEGIN
	if LEFT(@ordernumber,1) = '*'
		BEGIN
			IF @ordernumber ='* INSERT'
				BEGIN
					SELECT	 f.[Id],f.[LastTransactionId],f.[VendorId],f.[SourceApplication],f.[OrderNumber],f.[QuantityOrdered],f.[QuantityConfirmed]
							,f.[QuantityBackordered],f.[QuantityCancelled],f.[QuantitySlashed],f.[QuantityShipped],f.[QuantityInvoiced],f.[LastModifiedDateUTC]
							,f.[LastModifiedUTCOffset],f.[RequestedShipMethod],f.[ReferenceNumber]
							,o.[Id] AS OrderId,o.[DateOrderRecorded],o.[OrderStatusId],o.[AllowBackorder],o.[AllowDistributionSplits]
							,o.[OrderProductTypeId],o.[OrderProductId],o.[OrderProductDescription],o.[PromotionCode],o.[GreenLight],o.[VendorOrderType]
							,o.[OrderTaxSales],o.[OrderTaxFreight],o.[BillToName],o.[BillToPhone],o.[BillToAddress],o.[BillToCity],o.[BillToState],o.[BillToZip]
							,o.[BillToCountryCode],o.[ShipToName],o.[ShipToPhone],o.[ShipToAddress],o.[ShipToCity],o.[ShipToState],o.[ShipToZip],o.[ShipToCountryCode]
							,o.[GiftWrap],o.[GiftWrapFee],o.[SuppressPrice],o.[GiftMessage],o.[SpecialDeliveryInstructions],o.[MarketingMessage],o.[ImprintBook]
							,o.[ImprintIndexCode],o.[ImprintText],o.[ImprintFont],o.[ImprintColor],o.[ImprintPosition],o.[OrderUnitPrice], o.[DistributionCenterOverride]
						,o.[DateTimeInsertedUTC]
					FROM cdf.Fulfillment f
						INNER JOIN cdf.Orders o
							ON f.id = o.FulfillmentId
					WHERE f.[LastTransactionId]=0
				END
			ELSE IF @ordernumber = '* DATES' 
				BEGIN
					IF @DateIsCentral = 1
						SELECT	 f.[Id],f.[LastTransactionId],f.[VendorId],f.[SourceApplication],f.[OrderNumber],f.[QuantityOrdered],f.[QuantityConfirmed]
								,f.[QuantityBackordered],f.[QuantityCancelled],f.[QuantitySlashed],f.[QuantityShipped],f.[QuantityInvoiced],f.[LastModifiedDateUTC]
								,f.[LastModifiedUTCOffset],f.[RequestedShipMethod],f.[ReferenceNumber]
								,o.[Id] AS OrderId,o.[DateOrderRecorded],o.[OrderStatusId],o.[AllowBackorder],o.[AllowDistributionSplits]
								,o.[OrderProductTypeId],o.[OrderProductId],o.[OrderProductDescription],o.[PromotionCode],o.[GreenLight],o.[VendorOrderType]
								,o.[OrderTaxSales],o.[OrderTaxFreight],o.[BillToName],o.[BillToPhone],o.[BillToAddress],o.[BillToCity],o.[BillToState],o.[BillToZip]
								,o.[BillToCountryCode],o.[ShipToName],o.[ShipToPhone],o.[ShipToAddress],o.[ShipToCity],o.[ShipToState],o.[ShipToZip],o.[ShipToCountryCode]
								,o.[GiftWrap],o.[GiftWrapFee],o.[SuppressPrice],o.[GiftMessage],o.[SpecialDeliveryInstructions],o.[MarketingMessage],o.[ImprintBook]
								,o.[ImprintIndexCode],o.[ImprintText],o.[ImprintFont],o.[ImprintColor],o.[ImprintPosition],o.[OrderUnitPrice],o.[DistributionCenterOverride]
							,o.[DateTimeInsertedUTC]
						FROM cdf.Fulfillment f
							INNER JOIN cdf.Orders o
								ON f.id = o.FulfillmentId
						WHERE CAST(DATEADD(MINUTE, f.LastModifiedUTCOffset, f.LastModifiedDateUTC) AS DATE) >= @DateStart AND CAST(DATEADD(MINUTE, f.LastModifiedUTCOffset, f.LastModifiedDateUTC) AS DATE) <= @DateEnd
					ELSE
						SELECT	 f.[Id],f.[LastTransactionId],f.[VendorId],f.[SourceApplication],f.[OrderNumber],f.[QuantityOrdered],f.[QuantityConfirmed]
								,f.[QuantityBackordered],f.[QuantityCancelled],f.[QuantitySlashed],f.[QuantityShipped],f.[QuantityInvoiced],f.[LastModifiedDateUTC]
								,f.[LastModifiedUTCOffset],f.[RequestedShipMethod],f.[ReferenceNumber]
								,o.[Id] AS OrderId,o.[DateOrderRecorded],o.[OrderStatusId],o.[AllowBackorder],o.[AllowDistributionSplits]
								,o.[OrderProductTypeId],o.[OrderProductId],o.[OrderProductDescription],o.[PromotionCode],o.[GreenLight],o.[VendorOrderType]
								,o.[OrderTaxSales],o.[OrderTaxFreight],o.[BillToName],o.[BillToPhone],o.[BillToAddress],o.[BillToCity],o.[BillToState],o.[BillToZip]
								,o.[BillToCountryCode],o.[ShipToName],o.[ShipToPhone],o.[ShipToAddress],o.[ShipToCity],o.[ShipToState],o.[ShipToZip],o.[ShipToCountryCode]
								,o.[GiftWrap],o.[GiftWrapFee],o.[SuppressPrice],o.[GiftMessage],o.[SpecialDeliveryInstructions],o.[MarketingMessage],o.[ImprintBook]
								,o.[ImprintIndexCode],o.[ImprintText],o.[ImprintFont],o.[ImprintColor],o.[ImprintPosition],o.[OrderUnitPrice],o.[DistributionCenterOverride]
							,o.[DateTimeInsertedUTC]
						FROM cdf.Fulfillment f
							INNER JOIN cdf.Orders o
								ON f.id = o.FulfillmentId
						WHERE CAST(LastModifiedDateUTC AS DATE) >= @DateStart AND CAST(LastModifiedDateUTC AS DATE) <= @DateEnd
				END
			ELSE
				SELECT 'Bad Command' AS Error
		END
	ELSE 
		BEGIN
			SELECT	 f.[Id],f.[LastTransactionId],f.[VendorId],f.[SourceApplication],f.[OrderNumber],f.[QuantityOrdered],f.[QuantityConfirmed]
					,f.[QuantityBackordered],f.[QuantityCancelled],f.[QuantitySlashed],f.[QuantityShipped],f.[QuantityInvoiced],f.[LastModifiedDateUTC]
					,f.[LastModifiedUTCOffset],f.[RequestedShipMethod],f.[ReferenceNumber]
					,o.[Id] AS OrderId,o.[DateOrderRecorded],o.[OrderStatusId],o.[AllowBackorder],o.[AllowDistributionSplits]
					,o.[OrderProductTypeId],o.[OrderProductId],o.[OrderProductDescription],o.[PromotionCode],o.[GreenLight],o.[VendorOrderType]
					,o.[OrderTaxSales],o.[OrderTaxFreight],o.[BillToName],o.[BillToPhone],o.[BillToAddress],o.[BillToCity],o.[BillToState],o.[BillToZip]
					,o.[BillToCountryCode],o.[ShipToName],o.[ShipToPhone],o.[ShipToAddress],o.[ShipToCity],o.[ShipToState],o.[ShipToZip],o.[ShipToCountryCode]
					,o.[GiftWrap],o.[GiftWrapFee],o.[SuppressPrice],o.[GiftMessage],o.[SpecialDeliveryInstructions],o.[MarketingMessage],o.[ImprintBook]
					,o.[ImprintIndexCode],o.[ImprintText],o.[ImprintFont],o.[ImprintColor],o.[ImprintPosition],o.[OrderUnitPrice],o.[DistributionCenterOverride]
			FROM cdf.Fulfillment f
				INNER JOIN cdf.Orders o
					ON f.id = o.FulfillmentId
			WHERE OrderNumber = @ordernumber
		END
END
GO
PRINT N'Creating [CDF].[uspOrdersMissingShipment]...';


GO
CREATE PROCEDURE [CDF].[uspOrdersMissingShipment]
(
	 @DateStart DATE
	,@DateEnd DATE
	,@IsUTC BIT = 1
)
AS
BEGIN
	IF @IsUTC = 1
		 SELECT	  [Id], [VendorId], [SourceApplication], [OrderNumber], [QuantityRemaining], [QuantityOrdered], [QuantityConfirmed]
				, [QuantityBackordered], [QuantityCancelled], [QuantitySlashed], [QuantityShipped], [QuantityInvoiced], [LastModifiedDateUTC]
				, [LastModifiedUTCOffset], [LastModifiedDateCentral]
				, [HasOrder], [OrderInsertedUTC] AS OrderInserted
				, [BillToName], [BillToAddress], [BillToCity], [BillToState], [BillToZip], [BillToCountryCode], [ShipToName], [ShipToAddress]
				, [ShipToCity], [ShipToState], [ShipToZip], [ShipToCountryCode], [GiftMessage], [MarketingMessage], [OrderProductId], [OrderProductTypeId]
				, [OrderProductDescription], [SpecialDeliveryInstructions]
				, [HasAcknowledgement], [AcknowledgementInsertedUTC] AS AcknowledgementInserted
				, [HasShipment], [ShipmentInsertedUTC] AS ShipmentInserted
				, [CarrierName], [CarrierType], [PackageNumberTracking], [PackageNumberSecondary], [PackageWeight], [ShipmentNumber]
				, [ShipmentISBNorEAN]
				, [HasInvoice], [InvoiceInsertedUTC] AS InvoiceInserted
		 FROM CDF.vueFulfillmentStatus
		 WHERE HasOrder = 1
			AND HasShipment = 0
			AND (CAST(OrderInsertedUTC AS DATE)>=@DateStart AND CAST(OrderInsertedUTC AS DATE)<=@DateEnd)
	ELSE
		 SELECT	  [Id], [VendorId], [SourceApplication], [OrderNumber], [QuantityRemaining], [QuantityOrdered], [QuantityConfirmed]
				, [QuantityBackordered], [QuantityCancelled], [QuantitySlashed], [QuantityShipped], [QuantityInvoiced], [LastModifiedDateUTC]
				, [LastModifiedUTCOffset], [LastModifiedDateCentral]
				, [HasOrder], DATEADD(MINUTE, LastModifiedUTCOffset, [OrderInsertedUTC]) AS OrderInserted
				, [BillToName], [BillToAddress], [BillToCity], [BillToState], [BillToZip], [BillToCountryCode], [ShipToName], [ShipToAddress]
				, [ShipToCity], [ShipToState], [ShipToZip], [ShipToCountryCode], [GiftMessage], [MarketingMessage], [OrderProductId], [OrderProductTypeId]
				, [OrderProductDescription], [SpecialDeliveryInstructions]
				, [HasAcknowledgement], DATEADD(MINUTE, LastModifiedUTCOffset, [AcknowledgementInsertedUTC]) AS AcknowledgementInserted
				, [HasShipment], DATEADD(MINUTE, LastModifiedUTCOffset, [ShipmentInsertedUTC] ) AS ShipmentInserted
				, [CarrierName], [CarrierType], [PackageNumberTracking], [PackageNumberSecondary], [PackageWeight], [ShipmentNumber]
				, [ShipmentISBNorEAN]
				, [HasInvoice], DATEADD(MINUTE, LastModifiedUTCOffset, [InvoiceInsertedUTC]) AS InvoiceInserted
		 FROM CDF.vueFulfillmentStatus
		 WHERE HasOrder = 1
			AND HasShipment = 0
			AND (CAST(OrderInsertedUTC AS DATE)>=@DateStart AND CAST(OrderInsertedUTC AS DATE)<=@DateEnd)
END
GO
PRINT N'Creating [CDF].[uspOrdersShipmentStatus]...';


GO
CREATE PROCEDURE [CDF].[uspOrdersShipmentStatus]
(
	 @LastDateTime DATETIME2
	,@IsUTC BIT = 1
	,@WithShipmentOnly BIT = 0
	,@findkey VARCHAR(50) = 'CDFL-ORD-ORDER-CREATE'

)
AS
BEGIN
	DECLARE @UseDateTime DATETIME2

	IF @IsUTC = 1
		BEGIN
			SET @UseDateTime = @LastDateTime
			SELECT	  fs.[Id], fs.[VendorId], fs.[SourceApplication], fs.[OrderNumber]
					, fs.[QuantityRemaining], fs.[QuantityOrdered], fs.[QuantityConfirmed], fs.[QuantityBackordered], fs.[QuantityCancelled], fs.[QuantitySlashed]
					, fs.[QuantityShipped], fs.[QuantityInvoiced]
					, fs.[LastModifiedDateUTC], fs.[LastModifiedUTCOffset], fs.[LastModifiedDateCentral]
					, fs.[HasOrder], fs.[OrderInsertedUTC] AS OrderInserted		
					, fs.[ShipToName], fs.[ShipToAddress], fs.[ShipToCity], fs.[ShipToState], fs.[ShipToZip], fs.[ShipToCountryCode]
					, fs.[GiftMessage], fs.[MarketingMessage], fs.[OrderProductId] , fs.[OrderProductTypeId], fs.[OrderProductDescription]
					, fs.[SpecialDeliveryInstructions]
					, fs.[HasAcknowledgement], fs.[AcknowledgementInsertedUTC] AS AcknowledgementInserted
					, fs.[HasShipment], fs.[ShipmentInsertedUTC] AS ShipmentInserted
					, fs.[CarrierName], fs.[CarrierType], fs.[PackageNumberTracking], fs.[PackageNumberSecondary], fs.[PackageWeight], fs.[ShipmentNumber]
					, fs.[ShipmentISBNorEAN]
					, fs.[HasInvoice], fs.[InvoiceInsertedUTC] AS InvoiceInserted
					, CAST(CASE WHEN tl.id IS NOT NULL
						   THEN 1 
						   ELSE 0
					  END AS BIT) AS ShipNoticedReceived
					,tl.DateTransmittedUTC AS DateTransmitted
					,tl.Method, tl.Direction, tl.Successful
					,DATEDIFF(MINUTE, tl.DateTransmittedUTC, GETUTCDATE()) AS ShipNotificationAge
			FROM CDF.vueFulfillmentStatus fs
				LEFT JOIN (	select tli.*, ton.OrderNumber, ton.id as TransactionOrderNumberId , case when tlm.TransLogID is not null then 1 else 0 end as Successful
							from edi.TransactionLog tli
								left join edi.TransactionLogOrderNumbers ton
									on tli.id = ton.TransactionLogId
								left join edi.TransactionLogMessages tlm
									on tlm.TransLogID = tli.id
										and tlm.KeyValue ='True'
										and tlm.KeyName = @findkey
						  ) tl
					ON fs.OrderNumber= tl.OrderNumber
						AND tl.DateTransmittedUTC >= @UseDateTime
						AND tl.TransactionTypeId = 4 -- ASN/Ship Notie						
						AND tl.Successful = 1
			WHERE fs.HasOrder = 1
				AND CASE WHEN @WithShipmentOnly =1 
						 THEN CASE WHEN tl.DateTransmittedUTC >= @UseDateTime 
								   THEN 1 
								   ELSE 0
							  END
						ELSE CASE WHEN fs.LastModifiedDateUTC >= @UseDateTime
								  THEN 1
								  ELSE 0
							 END
					END = 1
		END
	ELSE
		BEGIN
			SET @UseDateTime = DATEADD(MINUTE, DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()), @LastdateTime)

			SELECT	  fs.[Id], fs.[VendorId], fs.[SourceApplication], fs.[OrderNumber]
					, fs.[QuantityRemaining], fs.[QuantityOrdered], fs.[QuantityConfirmed], fs.[QuantityBackordered], fs.[QuantityCancelled], fs.[QuantitySlashed]
					, fs.[QuantityShipped], fs.[QuantityInvoiced]
					, fs.[LastModifiedDateUTC], fs.[LastModifiedUTCOffset], fs.[LastModifiedDateCentral]
					, fs.[HasOrder], DATEADD(MINUTE, LastModifiedUTCOffset, fs.[OrderInsertedUTC]) AS OrderInserted		
					, fs.[ShipToName], fs.[ShipToAddress], fs.[ShipToCity], fs.[ShipToState], fs.[ShipToZip], fs.[ShipToCountryCode]
					, fs.[GiftMessage], fs.[MarketingMessage], fs.[OrderProductId] , fs.[OrderProductTypeId], fs.[OrderProductDescription]
					, fs.[SpecialDeliveryInstructions]
					, fs.[HasAcknowledgement], DATEADD(MINUTE, LastModifiedUTCOffset, fs.[AcknowledgementInsertedUTC]) AS AcknowledgementInserted
					, fs.[HasShipment], fs.[ShipmentInsertedUTC] AS ShipmentInserted
					, fs.[CarrierName], fs.[CarrierType], fs.[PackageNumberTracking], fs.[PackageNumberSecondary], fs.[PackageWeight], fs.[ShipmentNumber]
					, fs.[ShipmentISBNorEAN]
					, fs.[HasInvoice], DATEADD(MINUTE, fs.LastModifiedUTCOffset, fs.[InvoiceInsertedUTC]) AS InvoiceInserted
					, CAST(CASE WHEN tl.id IS NOT NULL
						   THEN 1 
						   ELSE 0
					  END AS BIT) AS ShipNoticedReceived
					,tl.DateTransmittedUTC, tl.Method, tl.Direction, tl.Successful
			FROM CDF.vueFulfillmentStatus fs
				LEFT JOIN (	select tli.*, ton.OrderNumber, ton.id as TransactionOrderNumberId , case when tlm.TransLogID is not null then 1 else 0 end as Successful
							from edi.TransactionLog tli
								left join edi.TransactionLogOrderNumbers ton
									on tli.id = ton.TransactionLogId
								left join edi.TransactionLogMessages tlm
									on tlm.TransLogID = tli.id
										and tlm.KeyValue ='True'
										and tlm.KeyName = @findkey
						  ) tl
					ON fs.OrderNumber = tl.OrderNumber
						AND tl.DateTransmittedUTC >= @UseDateTime
						AND tl.TransactionTypeId = 4 -- ASN/Ship Notie						
						AND tl.Successful = 1
			WHERE fs.HasOrder = 1
				AND CASE WHEN @WithShipmentOnly =1 
						 THEN CASE WHEN DATEADD(MINUTE, fs.LastModifiedUTCOffset,  tl.DateTransmittedUTC) >= @UseDateTime 
								   THEN 1 
								   ELSE 0
							  END
						ELSE CASE WHEN DATEADD(MINUTE, fs.LastModifiedUTCOffset, fs.LastModifiedDateUTC) >= @UseDateTime
								  THEN 1
								  ELSE 0
							  END
					END = 1
		END		
END
GO
PRINT N'Creating [CDF].[uspUpdateOrderStatus]...';


GO
CREATE PROCEDURE [CDF].[uspUpdateOrderStatus]
(
	 @OrderList AS TypeListString250 READONLY
	,@Method VARCHAR(3) = 'FTP'
)
AS 
BEGIN
	DECLARE  @status BIT = 0
			,@message VARCHAR(500)
			,@modifiedUTC DATETIME2
			,@modified DATETIME
			,@Offset INT
	BEGIN TRANSACTION update_orders

	SET @Offset = DATEDIFF(MINUTE, GETUTCDATE(), GETDATE())
	SET @modifiedUTC = GETUTCDATE()


	BEGIN TRY
		UPDATE  f
			SET	 LastModifiedDateUTC = @modifiedUTC
				,LastModifiedUTCOffset = @Offset
				,LastTransactionId = 2 -- Ordered
	
		FROM cdf.Fulfillment f
			INNER JOIN  @OrderList l
				ON f.OrderNumber = LTRIM(RTRIM(l.strings))

		UPDATE o
			SET o.OrderStatusId = 2				
		FROM cdf.Orders o
			INNER JOIN cdf.Fulfillment f
				ON o.FulfillmentId = f.Id
			INNER JOIN @OrderList l
				ON f.OrderNumber = LTRIM(RTRIM(l.strings))

		INSERT INTO CDF.TransmissionLog (FulfillmentId, DateTransmittedUTC, Method, Successful)
			SELECT f.id, @modifiedUTC, @method, 1
			FROM cdf.Orders o
				INNER JOIN cdf.Fulfillment f
					ON o.FulfillmentId = f.Id
				INNER JOIN @OrderList l
					ON f.OrderNumber = LTRIM(RTRIM(l.strings))
		SELECT	 @message = 'Records updated successfully'
				,@status = 1
	END TRY
	BEGIN CATCH
		SELECT   @message = CAST(ERROR_NUMBER() AS VARCHAR(50)) + ' ' + CAST(ERROR_MESSAGE() AS VARCHAR(300)) + ' @ '+  CAST(ERROR_LINE() AS VARCHAR(25))
				,@status = 0
	END CATCH

	IF @status = 1
		COMMIT TRANSACTION update_orders
	else
		ROLLBACK TRANSACTION update_orders

	SELECT @status AS Stauts, @message AS ResultMessage
END
GO
PRINT N'Creating [cdf].[uspGetFulfillmentByOrderNumber]...';


GO
CREATE PROCEDURE cdf.[uspGetFulfillmentByOrderNumber] (@ordernumber VARCHAR(22))
AS
BEGIN
	SELECT	 [Id]
			,[LastTransactionId]
			,[VendorId]
			,[SourceApplication]
			,[OrderNumber]
			,[QuantityOrdered]
			,[QuantityConfirmed]
			,[QuantityBackordered]
			,[QuantityCancelled]
			,[QuantitySlashed]
			,[QuantityShipped]
			,[QuantityInvoiced]
			,[LastModifiedDateUTC]
			,[LastModifiedUTCOffset]
			,[RequestedShipMethod]
	FROM cdf.Fulfillment
	WHERE OrderNumber = @ordernumber
END
GO
PRINT N'Creating [CDF].[uspAcknowledge_Insert]...';


GO
CREATE PROCEDURE [CDF].[uspAcknowledge_Insert]
(
	 @fulfillment AS CDF.TypeFulfillment READONLY
	,@acknowledgement AS CDF.TypeAcknowledgements READONLY
	,@ediver TINYINT
)
AS
BEGIN 
	DECLARE @mods AS TABLE (id BIGINT, ordernumber VARCHAR(22))
	DECLARE @inst AS TABLE (id BIGINT, linkid BIGINT)
	DECLARE @succ BIT = 0




	BEGIN TRANSACTION insert_ack
	BEGIN TRY
		IF EXISTS( SELECT 1 FROM @Fulfillment f0 INNER JOIN cdf.Fulfillment f1 ON f0.Id = f1.Id )
			UPDATE f				
				SET  LastModifiedDateUTC = GETUTCDATE()
					,LastModifiedUTCOffset = DATEDIFF(MINUTE, GETUTCDATE(), GETDATE())
					,LastTransactionId = f0.LastTransactionId
					,OrderNumber = f0.OrderNumber
					,QuantityBackordered = f0.QuantityBackordered
					,QuantityCancelled = f0.QuantityCancelled
					,QuantityConfirmed = f0.QuantityConfirmed
					,QuantityInvoiced = f0.QuantityInvoiced
					,QuantityOrdered = f0.QuantityOrdered
					,QuantityShipped = f0.QuantityShipped
					,QuantitySlashed = f0.QuantitySlashed
					,RequestedShipMethod = f0.RequestedShipMethod
					,SourceApplication = f0.SourceApplication
					,VendorId = f0.VendorId
			OUTPUT inserted.Id,inserted.OrderNumber INTO @mods(id,ordernumber)
			FROM CDF.Fulfillment f
				INNER JOIN @Fulfillment f0
					ON f.Id = f0.Id
		ELSE
			BEGIN
				INSERT INTO cdf.Fulfillment (LastTransactionId, VendorId, SourceApplication, OrderNumber, QuantityOrdered, QuantityConfirmed, QuantityBackordered, QuantityCancelled
											,QuantitySlashed,QuantityShipped, QuantityInvoiced, LastModifiedDateUTC, LastModifiedUTCOffset,RequestedShipMethod)
				OUTPUT inserted.id INTO @mods (id)
					SELECT	 f0.LastTransactionId, f0.VendorId, f0.SourceApplication, f0.OrderNumber, f0.QuantityOrdered ,f0.QuantityConfirmed, f0.QuantityBackordered,f0.QuantityCancelled
							,f0.QuantitySlashed,f0.QuantityShipped, f0.QuantityInvoiced, f0.LastModifiedDateUTC, DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()) ,f0.RequestedShipMethod				
					FROM @Fulfillment f0
			END

		INSERT INTO cdf.Acknowledgements ([FulfillmentId], [DateAcknowledgementRecorded], [AcknowledgementNumber], [DatePurchaseOrder], [DateOrderCancellation], [AcknowledgementId]
										, [VendorReferenceNumberType], [VendorReferenceNumber], [TerminalOrderControl], [POStatus], [VendorAcknowledgeMessage], [ModifiedShipToName]
										, [ModifiedShipToAddress], [ModifiedShipToCity], [ModifiedShipToState], [ModifiedShipToZip], [ModdifiedShipToCountry], [AcknowledgementStatusCode]
										, [AcknowledgementDistributionCenter]
										, [DateAvailable]
										, [DistrbutionInventory], [Publisher], [Title], [Author], [BindingCode], [QuantityPredicted]
										, [PriceNet], [PriceDiscountedList], [DateTimeInsertedUTC])
		OUTPUT inserted.id, inserted.FulfillmentId into @inst (id, linkid)
			SELECT	 m.id, a.[DateAcknowledgementRecorded], a.[AcknowledgementNumber], a.[DatePurchaseOrder],a.[DateOrderCancellation], a.[AcknowledgementId]
					,a.[VendorReferenceNumberType], a.[VendorReferenceNumber] ,a.[TerminalOrderControl], LEFT(a.[POStatus],1), a.[VendorAcknowledgeMessage], a.[ModifiedShipToName]
					,a.[ModifiedShipToAddress], a.[ModifiedShipToCity], a.[ModifiedShipToState], a.[ModifiedShipToZip],a.[ModdifiedShipToCountry], a.[AcknowledgementStatusCode]
					,LEFT(a.[AcknowledgementDistributionCenter],1)
					,CASE WHEN ISDATE(a.[DateAvailable]) = 1 THEN CAST(CAST(a.[DateAvailable] AS DATE) AS VARCHAR(10)) ELSE a.[DateAvailable] END
					,a.[DistrbutionInventory], a.[Publisher], a.[Title], a.[Author], LEFT(a.[BindingCode],1),a.[QuantityPredicted]
					, a.[PriceNet], a.[PriceDiscountedList], ISNULL(a.[DateTimeInsertedUTC],GETUTCDATE())
			FROM @acknowledgement  a
				INNER JOIN @mods m
					ON a.OrderNumber = m.ordernumber

		UPDATE f
			SET QuantityConfirmed = a.QuantityPredicted
		FROM cdf.Fulfillment f
			INNER JOIN @mods m
				ON f.OrderNumber = m.ordernumber 
			INNER JOIN @acknowledgement a
				ON a.OrderNumber = m.ordernumber

			IF @@TRANCOUNT > 0 COMMIT TRANSACTION insert_ack
			SET @succ = 1
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION insert_ack
	END CATCH

	IF @succ = 1
		SELECT 'Success' AS [Status], m.OrderNumber, m.id AS FulfillmentId, i.id AS AcknowledgeId
		FROM @mods m
			INNER JOIN @inst i
				ON m.id = i.linkid
	ELSE
		SELECT 'FAIL' As Status, '' AS ordernumnber, -1 AS FulfillmentId, -1 AS AcknowledgeId
END
GO
PRINT N'Creating [CDF].[uspFulfillment_Insert]...';


GO
CREATE PROCEDURE CDF.uspFulfillment_Insert (@Fulfillment AS dbo.TypeListString250 readonly)
AS
BEGIN
	DECLARE @mods AS TABLE 
	(
		id BIGINT
		,ordernumber VARCHAR(22)
	)

	IF EXISTS (SELECT 1 FROM @Fulfillment f0 INNER JOIN cdf.Fulfillment f1 ON f0.Strings = f1.Id )
	BEGIN
		UPDATE f
		SET	 LastModifiedDateUTC = ISNULL(f0.strings, GETUTCDATE())
			,LastModifiedUTCOffset = DATEDIFF(minute, getutcdate(), getdate())
			,LastTransactionId = f0.Strings
			,OrderNumber = f0.Strings
			,QuantityBackordered = f0.Strings
			,QuantityCancelled = f0.Strings
			,QuantityConfirmed = f0.Strings
			,QuantityInvoiced = f0.Strings
			,QuantityOrdered = f0.Strings
			,QuantityShipped = f0.Strings
			,QuantitySlashed = f0.Strings
			,RequestedShipMethod = f0.Strings
			,SourceApplication = f0.Strings
			,VendorId = f0.Strings
		OUTPUT inserted.Id
			,inserted.OrderNumber
		INTO @mods(id, ordernumber)
		FROM CDF.Fulfillment f
			INNER JOIN @Fulfillment f0
				ON f.Id = f0.Strings
	END
	ELSE
	BEGIN
		INSERT INTO cdf.Fulfillment (LastTransactionId,VendorId,SourceApplication,OrderNumber,QuantityOrdered,QuantityConfirmed,QuantityBackordered,QuantityCancelled
									,QuantitySlashed,QuantityShipped,QuantityInvoiced,LastModifiedDateUTC,LastModifiedUTCOffset,RequestedShipMethod)
		OUTPUT inserted.id INTO @mods(id)
		SELECT f0.strings AS LastTransactionId
			,f0.strings AS VendorId
			,f0.strings AS SourceApplication
			,f0.strings AS OrderNumber
			,f0.strings AS QuantityOrdered
			,f0.strings AS QuantityConfirmed
			,f0.strings AS QuantityBackordered
			,f0.strings AS QuantityCancelled
			,f0.strings AS QuantitySlashed
			,f0.strings AS QuantityShipped
			,f0.strings AS QuantityInvoiced
			,f0.strings AS LastModifiedDateUTC
			,f0.strings AS LastModifiedUTCOffset
			,f0.strings AS RequestedShipMethod
		FROM @Fulfillment f0
	END

	SELECT	 id
			,ordernumber
	FROM @mods
END
GO
PRINT N'Creating [CDF].[uspGetUnprocessedOrders]...';


GO
CREATE PROCEDURE [CDF].[uspGetUnprocessedOrders]
AS
BEGIN
	SELECT f.OrderNumber
		,f.VendorId
	FROM cdf.Fulfillment f
	WHERE LastTransactionId = 0
END
GO
PRINT N'Creating [CDF].[uspInvoice_Insert]...';


GO
CREATE PROCEDURE [CDF].[uspInvoice_Insert]
(
	 @fulfillment AS CDF.TypeFulfillment READONLY
	,@invoices AS CDF.TypeInvoices READONLY
	,@ediver TINYINT
)
AS
BEGIN
	DECLARE @mods AS TABLE (id BIGINT, ordernumber VARCHAR(22))
	DECLARE @inst AS TABLE (id BIGINT, linkid BIGINT)
	DECLARE @succ BIT = 0

	BEGIN TRANSACTION insert_inv
	BEGIN TRY
		IF EXISTS( SELECT 1 FROM @Fulfillment f0 INNER JOIN cdf.Fulfillment f1 ON f0.Id = f1.Id )
			UPDATE f				
				SET  LastModifiedDateUTC = ISNULL(f0.LastModifiedDateUTC,GETUTCDATE())
					,LastModifiedUTCOffset = DATEDIFF(MINUTE, GETUTCDATE(), GETDATE())
					,LastTransactionId = f0.LastTransactionId
					,OrderNumber = f0.OrderNumber
					,QuantityBackordered = f0.QuantityBackordered
					,QuantityCancelled = f0.QuantityCancelled
					,QuantityConfirmed = f0.QuantityConfirmed
					,QuantityInvoiced = f0.QuantityInvoiced
					,QuantityOrdered = f0.QuantityOrdered
					,QuantityShipped = f0.QuantityShipped
					,QuantitySlashed = f0.QuantitySlashed
					,RequestedShipMethod = f0.RequestedShipMethod
					,SourceApplication = f0.SourceApplication
					,VendorId = f0.VendorId
			OUTPUT inserted.Id,inserted.OrderNumber INTO @mods(id,ordernumber)
			FROM CDF.Fulfillment f
				INNER JOIN @Fulfillment f0
					ON f.Id = f0.Id
		ELSE
			INSERT INTO cdf.Fulfillment (LastTransactionId, VendorId, SourceApplication, OrderNumber, QuantityOrdered, QuantityConfirmed, QuantityBackordered, QuantityCancelled
										,QuantitySlashed,QuantityShipped, QuantityInvoiced, LastModifiedDateUTC, LastModifiedUTCOffset,RequestedShipMethod)
			OUTPUT inserted.id, inserted.OrderNumber INTO @mods (id, ordernumber)
				SELECT	 f0.LastTransactionId, f0.VendorId, f0.SourceApplication, f0.OrderNumber, f0.QuantityOrdered,f0.QuantityConfirmed, f0.QuantityBackordered,f0.QuantityCancelled
						,f0.QuantitySlashed,f0.QuantityShipped, f0.QuantityInvoiced, f0.LastModifiedDateUTC, f0.LastModifiedUTCOffset,f0.RequestedShipMethod				
				FROM @Fulfillment f0

		INSERT INTO cdf.Invoices ([FulfillmentId], [DateTimeInvoiceRecorded], [InvoiceNumber], [CurrencyCode], [CountryCode], [InvoicePriceList], [InvoiceDiscount], [InvoicePriceNet]
								 ,[InvoicePriceShipping], [InvoicePriceHAndling], [InvoicePriceGiftWrapFee], [InvoiceAmountDue], [DateMetered], [InvoiceTitle], [InvoiceClientOrderNumber]
								 ,[LineItemNumber], [BillOfLadingNumber], [DateTimeInsertedUTC])
		OUTPUT inserted.id, inserted.FulfillmentId into @inst (id, linkid)
			SELECT	 m.id as [FulfillmentId], i.[DateTimeInvoiceRecorded], i.[InvoiceNumber], i.[CurrencyCode], i.[CountryCode],i.[InvoicePriceList], i.[InvoiceDiscount], i.[InvoicePriceNet]
					,i.[InvoicePriceShipping],i.[InvoicePriceHAndling], i.[InvoicePriceGiftWrapFee], i.[InvoiceAmountDue], i.[DateMetered],i.[InvoiceTitle], i.[InvoiceClientOrderNumber]
					,i.[LineItemNumber], i.[BillOfLadingNumber],ISNULL(i.[DateTimeInsertedUTC],GETUTCDATE())
			FROM @invoices i
				INNER JOIN @mods m
					ON i.OrderNumber= m.ordernumber
		IF @@TRANCOUNT > 0 COMMIT TRANSACTION insert_inv
		SET @succ = 1
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION insert_inv
	END CATCH


	IF @succ = 1
		SELECT 'Success' AS Status, m.ordernumber, m.id AS FulfillmentId, i.id AS InvoiceID
		FROM @mods m
			INNER JOIN @inst i
				ON m.id = i.linkid
	ELSE
		SELECT 'Failed' AS Status, m.ordernumber, ISNULL(m.id,-1) AS FulfillmentId, ISNULL(i.id,-1) AS InvoiceID
		FROM @mods m
			LEFT JOIN @inst i
				ON m.id = i.linkid
END
GO
PRINT N'Creating [CDF].[uspOrderFulfillment_Insert]...';


GO
CREATE  PROCEDURE [CDF].[uspOrderFulfillment_Insert]
(
	@orders as CDF.TypeOrderFulfillment READONLY
)
AS
BEGIN
	DECLARE @Success BIT = 0
	DECLARE @ids AS TABLE (id INT, ordernumber VARCHAR(25))
	DECLARE @DTUTC DATETIME 
			,@DT DATETIME 

	SELECT @DTUTC = GETUTCDATE(), @DT = GETDATE()

	BEGIN TRANSACTION cdf_orderfulfillment_insert
	BEGIN TRY
		IF EXISTS(SELECT 1 FROM @orders o INNER JOIN cdf.Fulfillment f on o.Id = f.Id)
			BEGIN
				UPDATE f				
				SET  LastModifiedDateUTC = ISNULL(@DTUTC,GETUTCDATE())
					,LastModifiedUTCOffset = DATEDIFF(MINUTE, GETUTCDATE(), GETDATE())
					,LastTransactionId = o.LastTransactionId
					,OrderNumber = o.OrderNumber
					,QuantityBackordered = 0
					,QuantityCancelled = 0
					,QuantityConfirmed = 0
					,QuantityInvoiced = 0
					,QuantityOrdered = o.QuanityOrdered
					,QuantityShipped = 0
					,QuantitySlashed = 0
					,RequestedShipMethod = o.TransportMethod
					,SourceApplication = o.SourceApplication
					,VendorId = o.VendorId
				OUTPUT inserted.Id,inserted.OrderNumber INTO @ids(id,ordernumber)
				FROM CDF.Fulfillment f
					INNER JOIN @orders o
						ON f.Id = o.Id
			END
		ELSE
			BEGIN
				INSERT INTO cdf.Fulfillment ([LastTransactionId], [VendorId], [SourceApplication], [OrderNumber], [QuantityOrdered], [QuantityConfirmed], [QuantityBackordered], [QuantityCancelled], [QuantitySlashed], [QuantityShipped], [QuantityInvoiced], [LastModifiedDateUTC], [LastModifiedUTCOffset], [RequestedShipMethod],[ReferenceNumber] )
				OUTPUT inserted.Id, inserted.OrderNumber INTO @ids (id, ordernumber)
					SELECT ISNULL(o.[LastTransactionId],0), o.[VendorId], o.[SourceApplication], o.[OrderNumber], o.[QuanityOrdered], 0, 0, 0, 0, 0, 0, @DTUTC, DATEDIFF(MINUTE, @DTUTC, @DT), o.[TransportMethod], o.ReferenceNumber
					FROM @orders o
			END
		
		INSERT into cdf.Orders ([FulfillmentId], [DateOrderRecorded], [OrderStatusId], [AllowBackorder], [AllowDistributionSplits], [OrderProductTypeId], [OrderProductId], [OrderProductDescription], [PromotionCode], [VendorOrderType], [OrderTaxSales], [OrderTaxFreight], [BillToName], [BillToPhone], [BillToAddress], [BillToCity], [BillToState], [BillToZip], [BillToCountryCode], [ShipToName], [ShipToPhone], [ShipToAddress], [ShipToCity], [ShipToState], [ShipToZip], [ShipToCountryCode], [GiftWrap], [GiftWrapFee], [SuppressPrice], [GiftMessage], [SpecialDeliveryInstructions], [MarketingMessage], [ImprintBook], [ImprintIndexCode], [ImprintText], [ImprintFont], [ImprintColor], [ImprintPosition], [OrderUnitPrice], [DateTimeInsertedUTC], [GreenLight],[DistributionCenterOverride])
		SELECT i.id, o.[DateOrderRecorded], o.[OrderStatusId], o.[AllowBackorder], o.[AllowDistriubtionSplits], o.[OrderProductType], o.[OrderProduct], o.[OrderProductDescription], o.[PromotionCode], o.[VendorOrderType], o.[OrderTaxSales], o.[OrderTaxFreight], o.[BillToName], o.[BillToPhone], o.[BillToAddress], o.[BillToCity], o.[BillToState], o.[BillToZip], o.[BillToCountryCode], o.[ShipToName], o.[ShipToPhone], o.[ShipToAddress], o.[ShipToCity], o.[ShipToState], o.[ShipToZip], o.[ShipToCountryCode], o.[GiftWrap], o.[GiftWrapFee], o.[SuppressPrice], o.[GiftMessage], o.[SpecialDeliveryInstructions], o.[MarketingMessage], o.[ImprintBook], o.[ImprintIndexCode], o.[ImprintText], o.[ImprintFont], o.[ImprintColor], o.[ImprintPosition], o.[OrderUnitPrice], @DTUTC, o.[GreenLight], o.[DistributionCenterOverride]
		FROM @ids i
			INNER JOIN @orders o
				ON o.OrderNumber = i.ordernumber
		SET @Success = 1
	
		COMMIT TRANSACTION cdf_orderfulfillment_insert
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION cdf_orderfulfillment_insert
		SET @Success = 0		
	END CATCH

	IF @Success =1
		SELECT i.Id, i.OrderNumber
		FROM @ids i
	ELSE
		SELECT -1 AS ID, '' AS OrderNumber
END
GO
PRINT N'Creating [CDF].[uspShipment_Insert]...';


GO
CREATE PROCEDURE [CDF].[uspShipment_Insert]
(
	 @fulfillment AS CDF.TypeFulfillment READONLY
	,@shipment AS CDF.TypeShipments READONLY
	,@ediver TINYINT
)
AS
BEGIN
	DECLARE @mods AS TABLE (id BIGINT, ordernumber VARCHAR(22))
	DECLARE @inst AS TABLE (id BIGINT, linkid BIGINT)
	DECLARE @succ BIT = 0

	BEGIN TRANSACTION insert_asn
	BEGIN TRY
		IF EXISTS( SELECT 1 FROM @Fulfillment f0 INNER JOIN cdf.Fulfillment f1 ON f0.Id = f1.Id )
			UPDATE f				
				SET  LastModifiedDateUTC = ISNULL(f0.LastModifiedDateUTC, GETUTCDATE())
					,LastModifiedUTCOffset = DATEDIFF(MINUTE, GETUTCDATE(), GETDATE())
					,LastTransactionId = f0.LastTransactionId
					,OrderNumber = f0.OrderNumber
					,QuantityBackordered = f0.QuantityBackordered
					,QuantityCancelled = f0.QuantityCancelled
					,QuantityConfirmed = f0.QuantityConfirmed
					,QuantityInvoiced = f0.QuantityInvoiced
					,QuantityOrdered = f0.QuantityOrdered
					,QuantityShipped = f0.QuantityShipped
					,QuantitySlashed = f0.QuantitySlashed
					,RequestedShipMethod = f0.RequestedShipMethod
					,SourceApplication = f0.SourceApplication
					,VendorId = f0.VendorId
			OUTPUT inserted.Id,inserted.OrderNumber into @mods(id,ordernumber)
			FROM CDF.Fulfillment f
				INNER JOIN @fulfillment f0
					ON f.Id = f0.id
		ELSE
			INSERT INTO CDF.Fulfillment (LastTransactionId, VendorId, SourceApplication, OrderNumber, QuantityOrdered, QuantityConfirmed, QuantityBackordered, QuantityCancelled
										,QuantitySlashed,QuantityShipped, QuantityInvoiced, LastModifiedDateUTC, LastModifiedUTCOffset,RequestedShipMethod)
			OUTPUT inserted.id, inserted.OrderNumber INTO @mods (id, ordernumber)
				SELECT	 f0.LastTransactionId, f0.VendorId, f0.SourceApplication, f0.OrderNumber, f0.QuantityOrdered,f0.QuantityConfirmed, f0.QuantityBackordered,f0.QuantityCancelled
						,f0.QuantitySlashed,f0.QuantityShipped, f0.QuantityInvoiced, f0.LastModifiedDateUTC, f0.LastModifiedUTCOffset,f0.RequestedShipMethod				
				FROM @Fulfillment f0

		INSERT INTO cdf.Shipments ([FulfillmentId], [DateTimeShipmentRecorded], [ShipmentNumber], [ShipmentSubtotal], [ShipmentDiscount], [ShipmentTaxSales], [ShipmentFees]
								  ,[ShipmentFreight], [ShipmentTotal], [DateOrderShipped], [CustomerOrderReference], [CarrierType], [CarrierName], [PackageNumberTracking], [PackageNumberSecondary]
								  ,[ShipmentPriceList], [ShipmentPriceNet], [PackageWeight], [ReasonCode], [ShipmentISBNorEAN], [DateTimeInsertedUTC], [WarehouseCode])
		OUTPUT inserted.id, inserted.FulfillmentId into @inst (id, linkid)
			SELECT	 m.id, s.[DateTimeShipmentRecorded], s.[ShipmentNumber], s.[ShipmentSubtotal],s.[ShipmentDiscount], s.[ShipmentTaxSales], s.[ShipmentFees]
					,s.[ShipmentFreight], s.[ShipmentTotal],s.[DateOrderShipped], s.[CustomerOrderReference], s.[CarrierType], s.[CarrierName],s.[PackageNumberTracking], s.[PackageNumberSecondary]
					,s.[ShipmentPriceList], s.[ShipmentPriceNet],s.[PackageWeight], s.[ReasonCode], s.[ShipmentISBNorEAN], s.[DateTimeInsertedUTC], s.[WarehouseCode]			
			FROM @shipment s
				INNER JOIN @mods m
					ON s.OrderNumber = m.ordernumber

		UPDATE f
			SET	 QuantityShipped = ISNULL(s.QuantityShipped,0)
				,QuantitySlashed = ISNULL(s.QuantitySlashed,0)
		FROM cdf.Fulfillment f
			INNER JOIN @mods m
				ON f.OrderNumber = m.ordernumber 
			INNER JOIN @shipment s
				ON s.OrderNumber = m.ordernumber

		IF @@TRANCOUNT > 0 COMMIT TRANSACTION insert_asn
		SET @succ = 1
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION insert_asn
	END CATCH


	IF @succ = 1
		SELECT 'Success' AS Status, m.OrderNumber, m.id as FulfillmentId, i.id AS ShipmentsId
		FROM @mods m
			INNER JOIN @inst i
				ON m.id = i.linkid
	ELSE
		SELECT 'FAILED' AS Status, m.OrderNumber, -1 as FullfilmentId, -1 as ShipmentsId
		FROM @mods m

END
GO
PRINT N'Creating [cdf].[uspVendorForOrderNumber]...';


GO
CREATE PROCEDURE cdf.uspVendorForOrderNumber
(
	@ordernumber VARCHAR(22)
)
AS
BEGIN
	SELECT VendorId
	FROM cdf.Fulfillment
	WHERE OrderNumber = @ordernumber
END
GO
PRINT N'Creating [CDF].[uspWebOrderStatus]...';


GO
CREATE PROCEDURE CDF.[uspWebOrderStatus]
(
	 @DateStart DATE  = NULL
	,@DateEnd DATE = NULL
	,@isUTC BIT = 1
)
AS
BEGIN
	IF @DateStart IS NULL AND @DateEnd IS NULL
	BEGIN
		SELECT * 
		FROM CDF.vueFulfillmentStatus
		WHERE HasOrder= 1 
			AND HasShipment = 0
	END
	ELSE IF @DateStart IS NOT NULL AND @DateEnd IS NULL
	BEGIN
		IF @isUTC = 1
			SELECT *
			FROM CDF.vueFulfillmentStatus
			WHERE HasOrder = 1
				AND HasShipment = 0
				AND  LastModifiedDateUTC >= @DateStart
		ELSE
			SELECT *
			FROM CDF.vueFulfillmentStatus
			WHERE HasOrder = 1
				AND HasShipment = 0
				AND  LastModifiedDateCentral >= @DateStart

	END
	ELSE IF @DateStart IS NULL AND @DateEnd IS NOT NULL
	BEGIN
		IF @isUTC = 1
			SELECT *
			FROM CDF.vueFulfillmentStatus
			WHERE HasOrder = 1
				AND HasShipment = 0
				AND  LastModifiedDateUTC <= @DateEnd
		ELSE
			SELECT *
			FROM CDF.vueFulfillmentStatus
			WHERE HasOrder = 1
				AND HasShipment = 0
				AND  LastModifiedDateCentral <= @DateEnd
	END
	ELSE IF @DateStart IS NOT NULL AND @DateEnd IS NOT NULL
	BEGIN		
		IF @isUTC = 1
			SELECT *
			FROM CDF.vueFulfillmentStatus
			WHERE HasOrder = 1
				AND HasShipment = 0
				AND  (LastModifiedDateUTC <= @DateEnd AND LastModifiedDateUTC >= @DateStart)
		ELSE
			SELECT *
			FROM CDF.vueFulfillmentStatus
			WHERE HasOrder = 1
				AND HasShipment = 0
				AND  (LastModifiedDateCentral<= @DateEnd AND LastModifiedDateCentral >= @DateStart)
	END

END
GO
PRINT N'Creating [EDI].[uspCreateBatch]...';


GO

CREATE PROCEDURE [EDI].[uspCreateBatch]
(
	 @method varchar(5)
	,@file VARCHAR(255)
	,@vend VARCHAR(20)
	,@type TINYINT
)
AS
BEGIN
	DECLARE  @Message VARCHAR(2500)	
			,@Success BIT = 0
	DECLARE @Inserted TABLE ( Id INT, BatchItemID TINYINT, VendorID VARCHAR(20))

	BEGIN TRANSACTION insert_batch
	BEGIN TRY
		IF @method = 'BBV3'
			INSERT INTO ImportBBV3.Batch(batchitemid, VendorID, [Filename])
				OUTPUT inserted.Id, inserted.BatchItemId, inserted.VendorID INTO @Inserted (id, BatchItemID, VendorID)
				VALUES (@type, @vend,@file)
				SET @Success = 1
		IF @method = 'CDFL'
			INSERT INTO importCDFL.Batch(batchitemid, VendorID, [Filename])
				OUTPUT inserted.Id, inserted.BatchItemId, inserted.VendorID INTO @Inserted (id, BatchItemID, VendorID)
				VALUES (@type, @vend,@file)
				SET @Success = 1
	END TRY
	BEGIN CATCH
		SELECT	 @Success = 0
				,@Message = CAST(ERROR_NUMBER() AS VARCHAR(50))  + ' ' + CAST(ERROR_LINE() AS VARCHAR(50)) + ' ' + CAST(ERROR_MESSAGE() AS VARCHAR(2500))
	END CATCH

	IF @Success = 1
		BEGIN
			COMMIT TRANSACTION insert_batch

			SELECT id from @Inserted
		END
	ELSE
		BEGIN
			ROLLBACK TRANSACTION insert_batch
			INSERT INTO Logging.SQLMessages (ProcedureName, ErrorMessage)
				VALUES ('EDI.uspCreateBatch', @Message)
			SELECT -1 AS id
		END
END
GO
PRINT N'Creating [EDI].[uspTransactionLogEntryInitialize]...';


GO
CREATE PROCEDURE [EDI].[uspTransactionLogEntryInitialize] 
(
	 @filename VARCHAR(255)
	,@vendor VARCHAR(20)
	,@source TINYINT
	,@uid UNIQUEIDENTIFIER
)
AS
BEGIN
	DECLARE @ids AS TABLE 
	(
		 Id INT
		,[Filename] VARCHAR(255)
		,[UID] UNIQUEIDENTIFIER
		,DateGeneratedUTC DATETIME2
	)

	INSERT INTO edi.TransactionLog (SourceTypeId,[Filename],VendorId,TransactionTypeId,Direction,[uid])
		OUTPUT inserted.id ,inserted.[Filename],inserted.[Uid],inserted.DateRecordInsertedUTC INTO @ids
			SELECT	 @source
					,@filename
					,@vendor
					,0
					,' '
					,@uid
	SELECT	 tl.Id
			,tl.[Filename]
			,tl.[uid]
			,DateGeneratedUTC			
	FROM @ids i
		INNER JOIN EDI.TransactionLog tl
			ON i.Id = tl.Id
END
GO
PRINT N'Creating [EDI].[uspTransactionLogEntryUpdate]...';


GO
CREATE PROCEDURE [EDI].[uspTransactionLogEntryUpdate]
(
	 @id INT
	,@type TINYINT
	,@time DATETIME2
	,@mthd CHAR(3)
	,@dirc CHAR(1)
	,@vend VARCHAR(20)
	,@mesg VARCHAR(255)
	,@succ AS dbo.TypeKeyValue1024 READONLY
	,@refs AS dbo.TypeListString25 READONLY
)
AS
BEGIN
	DECLARE @errors BIT = 1

	BEGIN TRANSACTION updatelog	
	BEGIN TRY
		UPDATE tl
			SET	 TransactionTypeId = @type
				,DateTransmittedUTC = @time
				,Method = @mthd
				,Direction = @dirc
				,VendorId= @vend
				,VendorMesage = @mesg
		FROM EDI.TransactionLog tl
		WHERE tl.Id = @id

		IF EXISTS(SELECT 1 FROM @succ)
			INSERT INTO edi.TransactionLogMessages (TransLogId, keyname, keyvalue)
				SELECT @id, s.KeyName, s.KeyValue
				FROM @succ s

		IF EXISTS(SELECT 1 FROM @refs)
			INSERT INTO EDI.TransactionLogOrderNumbers (TransactionLogId, OrderNumber)
				SELECT @id, r.Strings
				from @refs r

		SET @errors  = 0
		COMMIT TRANSACTION updatelog
	END TRY
	BEGIN CATCH
		SET @errors = 1
		ROLLBACK TRANSACTION updatelog
	END CATCH

	SELECT @errors AS Result
END
GO
PRINT N'Creating [EDI].[uspTransactionLogEntryCreate]...';


GO
CREATE procedure [EDI].[uspTransactionLogEntryCreate]
(
	 @type TINYINT
	,@time DATETIME2
	,@mthd CHAR(3)
	,@dirc CHAR(1)
	,@vend VARCHAR(20)
	,@file VARCHAR(255)
	,@mesg VARCHAR(255)
	,@succ AS dbo.TypeKeyValue1024 READONLY
	,@refs AS dbo.TypeListString25 READONLY
	,@uid AS UNIQUEIDENTIFIER
)
as
begin
	DECLARE @ids AS TABLE (id INT,refid VARCHAR(50))
	DECLARE @errors BIT = 1

	BEGIN TRANSACTION updatelog

	BEGIN TRY
		INSERT INTO edi.TransactionLog(TransactionTypeId, DateTransmittedUTC, Method, Direction, [Filename], VendorId, VendorMesage, [uid])
			OUTPUT Inserted.Id, inserted.[uid] into @ids (id, refid)
		VALUES(@type, @time, @mthd, @dirc, @file, @vend, @mesg, @uid)

			IF EXISTS(SELECT 1 FROM @succ)
				INSERT INTO edi.TransactionLogMessages (TransLogId, keyname, keyvalue)
					SELECT i.id, s.KeyName, s.KeyValue
					FROM @succ s
						CROSS JOIN @ids i

			IF EXISTS(SELECT 1 FROM @refs)
				INSERT INTO EDI.TransactionLogOrderNumbers (TransactionLogId, OrderNumber)
					SELECT i.Id, r.Strings
					FROM @refs r
						CROSS JOIN @ids i
		SET @errors = 0
	END TRY
	BEGIN CATCH
	 	SET @errors = 1
	END CATCH

	if @errors = 0
		COMMIT TRANSACTION updatelog
	ELSE
		ROLLBACK TRANSACTION updatelog

	SELECT refid, id
	FROM @ids
end
GO
PRINT N'Creating [EDI].[RPT_OrderStatus]...';


GO
CREATE procedure [EDI].[RPT_OrderStatus]
(
	 @vendor varchar(20)
	,@IssueDate date
)
as
begin
	;with 
	po as
	(
		select ph.PONumber, pd.ItemIdentifier, pd.Quantity, ph.VendorID, ph.IssueDate, ph.ShipToLoc
		from blk.PurchaseOrderHeader ph
			inner join blk.PurchaseOrderDetail pd
				on ph.OrderId=pd.OrderId
		where pd.Quantity > 0
	)
	,poa as
	(
		select ah.PONumber, ad.ItemIdentifier, ad.QuantityOrdered, ad.QuantityShipped, ad.QuantityCancelled, ad.QuantityBackordered, ad.ItemDesc
		from blk.AcknowledgeHeader ah
			inner join blk.AcknowledgeDetail ad
				on ah.AckId = ad.AckId
	)
	,asn as
	(
		select sh.PONumber, sd.ItemIdentifier, sd.QuantityPredicted, sd.QuantityShipped as ASNQuantiyShiped, sd.TrackingNo, sh.ShipmentDate
		from blk.ShipmentHeader sh
			inner join blk.ShipmentDetail sd
				on sh.ShipmentID = sd.ShipmentID
	)
	,totals as
	(
		select po.VendorID, po.PONumber, po.ShipToLoc, po.IssueDate, po.ItemIdentifier, po.Quantity
				,case when po.Quantity <> poa.QuantityShipped then 'Y' else '' END AS Problem
				,poa.ItemDesc ,poa.QuantityShipped, poa.QuantityCancelled, poa.QuantityBackordered
				,asn.QuantityPredicted, asn.ASNQuantiyShiped, asn.TrackingNo, asn.ShipmentDate
		from po	
			left join poa
				on po.PONumber = poa.PONumber
					and po.ItemIdentifier = poa.ItemIdentifier
			left join asn
				on po.PONumber = asn.PONumber
					and po.ItemIdentifier = asn.ItemIdentifier
	)
	select VendorID, PONumber, ShipToLoc, IssueDate, ItemIdentifier, Quantity, Problem, ItemDesc, QuantityShipped, QuantityCancelled, QuantityBackordered, QuantityPredicted, QuantityShipped, TrackingNo, ShipmentDate
	from totals
		where vendorid = @vendor
			and cast(IssueDate as date) >= @issuedate
	group by  VendorID, PONumber, ShipToLoc, IssueDate, ItemIdentifier, Quantity, Problem, ItemDesc, QuantityShipped, QuantityCancelled, QuantityBackordered, QuantityPredicted, QuantityShipped, TrackingNo, ShipmentDate
	order by ShipToLoc, ItemIdentifier
end
GO
PRINT N'Creating [importcdfl].[uspViewImport]...';


GO
create procedure importcdfl.uspViewImport
(
	 @source tinyint
	,@action varchar(4)
	,@batchid bigint
)
AS
BEGIN
	IF @source=3
	BEGIN

		IF @action = 'inv'
		BEGIN
			SELECT * FROM ImportBBV3.Invoice_R01_InvoiceFileHeader WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R15_InvoiceHeader WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R16_InvoiceVendorDetail WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R45_InvoiceDetail WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R46_DetailISBN13EAN WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R48_DetailTotal WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R55_InvoiceTotals WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R57_InvoiceTrailer WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.Invoice_R95_InvoiceFileTrailer WHERE BatchId = @batchid
		END

		IF @action = 'poa' or @action='ack'
		BEGIN
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R02_FileHeader WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R11_PurchaseOrderHeader WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R21_FreeFormVendor WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R40_LineItem WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R41_AdditionalDetail WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R42_AdditionalLineItem WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R43_AdditionalLineItem WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R44_ItemNumberOrPrice WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R45_AdditionalLineItem WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R59_PurchaseOrderControlTotals WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseAcknowledgement_R91_FileTrailer WHERE BatchId = @batchid
		END

		IF @action = 'ord'
		BEGIN
			SELECT * FROM ImportBBV3.PurchaseOrder_R00_ClientFileHeader WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R10_ClientHeader WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R20_FixedSpecialHandlingInstructions WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R21_PurchaseOrderOptions WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R40_LineItemDetail WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R41_AdditionalLineItemDetail WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R45_Imprint WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R46_StickerBarcode WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R46_StickerTextLines WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R50_PurchaseOrderTrailer WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.PurchaseOrder_R90_FileTrailer WHERE BatchId = @batchid
		END

		IF @action = 'asn' or @action = 'shp'
		BEGIN
			SELECT * FROM ImportBBV3.ShipNotice_CR_ASNCompany WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.ShipNotice_OD_ASNShipmentDetail WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.ShipNotice_OP_ASNPack WHERE BatchId = @batchid
			SELECT * FROM ImportBBV3.ShipNotice_OR_ASNShipment WHERE BatchId = @batchid
		END
	END
	

	IF @source= 4
	BEGIN
		IF @action = 'inv'
		BEGIN
			SELECT * FROM importCDFL.Invoice_R01_InvoiceFileHeader WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R15_InvoiceHeader WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R45_InvoiceDetail WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R46_InvoiceDetail WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R48_DetailTotal WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R49_DetailTotalOrFreightAndFees WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R55_InvoiceTotals WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R57_InvoiceTrailer WHERE BatchId = @batchid
			SELECT * FROM importCDFL.Invoice_R95_InvoiceFileTrailer WHERE BatchId = @batchid
		END

		IF @action = 'poa' or @action='ack'
		BEGIN
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R02_FileHeader WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R11_PurchaseOrderHeader WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R21_FreeFormVendor WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R30_RecipientShipToNameAndAddress WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R32_RecipientShipToAdditionalShippingInformation WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R34_RecipientShipToCityStateAndZip WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R40_LineItem WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R41_AdditionalDetail WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R42_AdditionalLineItem WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R43_AdditionalLineItem WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R44_ItemNumberOrPrice WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R59_PurchaseOrderControlTotals WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseAcknowledgement_R91_FileTrailer WHERE BatchId = @batchid
		END

		IF @action ='ord' 
		BEGIN
			SELECT * FROM importCDFL.PurchaseOrder_R00_FileHeader WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R10_ClientHeader WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R20_FixedSpecialHandlingInstructions WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R21_PurchaseOrderOptions WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R24_CustomerCost WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R25_CustomerBillToName WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R26_CustomerBillToPhoneNumber WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R27_CustomerBillToAddressLine WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R29_CustomerBillToCityStateZip WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R30_RecipientShipToName WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R31_RecipientShipToPhone WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R32_ShippingRecordRecipientAddressLine WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R34_RecipientShippingRecordCityStateZip WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R35_DropShipDetail WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R36_SpecialDeliveryInstructions WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R37_MArketingMessage WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R38_GiftMessage WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R40_LineItem WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R41_AdditionalLineItem WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R42_LineItemGiftMessage WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R45_Imprint WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R50_PurchaseOrderControl WHERE BatchId = @batchid
			SELECT * FROM importCDFL.PurchaseOrder_R90_FileTrailer WHERE BatchId = @batchid
		END

		IF @action = 'asn' or @action='shp'
		BEGIN
			SELECT * FROM importCDFL.ShipNotice_CR_CompanyRecord WHERE BatchId = @batchid
			SELECT * FROM importCDFL.ShipNotice_OD_OrderDetailRecord WHERE BatchId = @batchid
			SELECT * FROM importCDFL.ShipNotice_OR_OrderRecord WHERE BatchId = @batchid
		END
	END
END
GO
PRINT N'Creating [MetaData].[uspGetCodes]...';


GO
CREATE PROCEDURE [MetaData].[uspGetCodes]
(
	 @VendorID varchar(20)  = null
	,@FileFormat VARCHAR(50) = null
	,@Vers VARCHAR(10) = null
	,@AssocColumn VARCHAR(100) = NULL
)
AS
BEGIN
	IF @VendorID IS NULL
		BEGIN
			SELECT	 ff.id as FileFormatId, ct.Id as CodeTypeId,  c.Id as CodesId
					,ff.FileFormat, ff.Vers, ff.Active
					,ct.VendorID, ct.CodeType, ct.AssociatedColumn, ct.MaxChars
					,c.Code, c.CodeName, c.CodeDescription
			FROM MetaData.Codes c
				INNER JOIN MetaData.CodeTypes ct
					ON c.CodeTypeId = ct.Id
				INNER JOIN MetaData.FileFormats ff
					ON ct.FileFormatId = ff.Id
			ORDER BY ct.VendorID, ff.FileFormat, ff.Vers, ct.CodeType, c.CodeName
		END
	ELSE IF @VendorID IS NOT NULL AND @FileFormat IS NULL AND @Vers IS NULL AND @AssocColumn IS NULL
		BEGIN
			SELECT	 ff.id as FileFormatId, ct.Id as CodeTypeId,  c.Id as CodesId
					,ff.FileFormat, ff.Vers, ff.Active
					,ct.VendorID, ct.CodeType, ct.AssociatedColumn, ct.MaxChars
					,c.Code, c.CodeName, c.CodeDescription
			FROM MetaData.Codes c
				INNER JOIN MetaData.CodeTypes ct
					ON c.CodeTypeId = ct.Id
				INNER JOIN MetaData.FileFormats ff
					ON ct.FileFormatId = ff.Id
			WHERE @VendorID = @VendorID
			ORDER BY ff.FileFormat, ff.Vers, ct.CodeType, c.CodeName
		END	
	ELSE IF @VendorID IS NOT NULL AND @FileFormat IS NOT NULL AND @Vers IS NOT NULL AND @AssocColumn IS NULL
		SELECT	 ff.id as FileFormatId, ct.Id as CodeTypeId,  c.Id as CodesId
				,ff.FileFormat, ff.Vers, ff.Active
				,ct.VendorID, ct.CodeType, ct.AssociatedColumn, ct.MaxChars
				,c.Code, c.CodeName, c.CodeDescription
		FROM MetaData.Codes c
			INNER JOIN MetaData.CodeTypes ct
				ON c.CodeTypeId = ct.Id
			INNER JOIN MetaData.FileFormats ff
				ON ct.FileFormatId = ff.Id
		WHERE ct.VendorID = @VendorID
			AND FileFormat = @FileFormat	
			AND Vers = @Vers
		ORDER BY ct.CodeType, c.CodeName
	ELSE IF @VendorID IS NOT NULL AND @FileFormat IS NOT NULL AND @Vers IS NOT NULL AND @AssocColumn IS NOT NULL
		SELECT	 ff.id as FileFormatId, ct.Id as CodeTypeId,  c.Id as CodesId
				,ff.FileFormat, ff.Vers, ff.Active
				,ct.VendorID, ct.CodeType, ct.AssociatedColumn, ct.MaxChars
				,c.Code, c.CodeName, c.CodeDescription
		FROM MetaData.Codes c
			INNER JOIN MetaData.CodeTypes ct
				ON c.CodeTypeId = ct.Id
			INNER JOIN MetaData.FileFormats ff
				ON ct.FileFormatId = ff.Id
		WHERE ct.VendorID = @VendorID
			AND FileFormat = @FileFormat
			AND Vers = @Vers
			AND AssociatedColumn= @AssocColumn
		ORDER BY ct.CodeType, c.CodeName
END
GO
PRINT N'Creating [MetaData].[uspVendorStoreData]...';


GO
CREATE PROCEDURE [MetaData].[uspVendorStoreData]
(
	 @Vendor VARCHAR(20)
	,@locations AS TypeListString250 READONLY
)
AS 
BEGIN
	IF EXISTS(SELECT 1 FROM @locations)
		SELECT Id, VendorId, LocationId, LocationNumber, VendorBillTo, VendorShipTo, SanAccount,LocationDescription, Active, ShipToPassword, Program
		FROM MetaData.VendorLocations vl
			INNER JOIN @locations l
				ON vl.LocationNumber = LEFT(LTRIM(RTRIM(l.Strings)),5)
		WHERE vendorid = @Vendor
	ELSE
		SELECT Id, VendorId, LocationId, LocationNumber, VendorBillTo, VendorShipTo, SanAccount,LocationDescription, Active, ShipToPassword, Program
		FROM MetaData.VendorLocations vl
		WHERE vendorid = @Vendor
END
GO
PRINT N'Creating [MetaData].[uspContentErrors]...';


GO
CREATE PROCEDURE MetaData.uspContentErrors
AS
	SELECT	 id
			,vendorid
			,SourceTypeId
			,ErrorMessage
			,ErrorDescription
			,ErrorAction
			,ErrorProtocol
			,Resendable
			,ModifyBeforeResend
	FROM MetaData.ContentErrors
GO
PRINT N'Creating [MetaData].[uspShipTransformations]...';


GO
CREATE PROCEDURE MetaData.[uspShipTransformations]
AS
BEGIN

	SELECT	 h.id as HPBcomID
			,h.Code as HPBcomCode
			,h.CodeDescription as HPBcomCodeDescription
			,h.MediaType as HPBcomMediaType
			,h.CarrierScope as HPBcomCarrierScope
			,c.id as CodeCodeId
			,c.CodeTypeId as CodeCodeTypeId 
			,c.Code as CodeCode
			,c.CodeName as CodeCodeName
			,c.CodeDescription as CodeCodeDescription
			,t.id as TransId
			,t.MetaDataCodeId as TransMetaDataCodeId
			,t.HPBcomCarrierId as TransHPBcomCarrierID
			,t.VendorId as TransVendorID
	FROM MetaData.VendorCarrierTransformation t
		INNER JOIN MetaData.Codes c
			ON t.MetaDataCodeId = c.Id
		INNER JOIN MetaData.CarrierCodesFromHPBcom h
			ON h.id = t.HPBcomCarrierId
END
GO
PRINT N'Creating [MetaData].[uspGetCustomTypeDefinition]...';


GO
CREATE PROCEDURE MetaData.uspGetCustomTypeDefinition
(
	@typename VARCHAR(255)
)
AS
BEGIN
	SELECT	 c.[column_id] AS [ColumnOrder]
			,c.[name] AS [ColumnName]
			,UPPER(st.[name]) AS [DataType]
			,c.[max_length] AS [Length]
			,c.[precision] AS [Precision]
			,c.[scale] AS [Scale]
			,CASE c.Is_Nullable WHEN 1 THEN 'NULL' ELSE 'NOT NULL' END AS [Nullable]
			,ISNULL(st.[collation],'') AS [Collation]
	FROM sys.table_types tt
		INNER JOIN sys.columns c
			ON tt.type_table_object_id = c.object_id
		INNER JOIN sys.systypes st
			ON st.xtype = c.system_type_id
		INNER JOIN sys.schemas s
			ON tt.schema_id = s.schema_id
	WHERE tt.[is_user_defined] = 1
		AND tt.[name] = @typename
	ORDER BY [ColumnOrder]
END
GO
PRINT N'Creating [metadata].[uspCodesInfo]...';


GO
create procedure metadata.uspCodesInfo
(
	@formatstring varchar(10)
)
as
begin
	select *
	from  MetaData.FileFormats f
		inner join MetaData.CodeTypes ct
			on f.id = ct.FileFormatId
		inner join MetaData.Codes c
			on c.CodeTypeId = ct.Id
	where f.FileFormat = @formatstring
	order by codetype, code
end
GO
PRINT N'Creating [metadata].[uspShippingTranslation]...';


GO
	create procedure metadata.uspShippingTranslation
	(
		@vendorid varchar(20)
	)

	as
	begin
		select hpb.code as HPBCode, hpb.CodeDescription as HPBDescription, hpb.MediaType, hpb.CarrierScope,  c.code, c.CodeName, c.CodeDescription
			from MetaData.CarrierCodesFromHPBcom hpb
				inner join MetaData.VendorCarrierTransformation vct
					on hpb.id = vct.HPBcomCarrierId
						and vct.VendorId = @vendorid
				inner join MetaData.Codes c
					on c.id = vct.MetaDataCodeId
	end
GO
PRINT N'Creating [dbo].[ProcessSFTP_POFiles_2019]...';


GO
---- =============================================
---- Author:		<Joey B.>
---- Create date: <1/24/2015>
--				2019-02-11  Updated script to be more efficient
---- Description:	<Builds a list of PO's to be exported to SFPT folders thru EDI.....>
---- =============================================
CREATE PROCEDURE [dbo].[ProcessSFTP_POFiles_2019]
AS

--BEGIN

	SET NOCOUNT ON;

	--ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*7214119        *130904*1312*U*00306*000145888*1*T*>~
	--GS*Test0002*760985X*7214119*20130904*1312*000000002*X*003060~
	--ST*850*000000003~
	--BEG*00*NE*Test0002**130904**AC~
	--DTM*037*130904*2013~
	
	--N1*BT**15*7609876~
	--N1*ST**15*1506951~
	--N1*VN**15*7214119~
	
	--PO1*1*24*EA*7.475*NT*EN*9780062024046*UP*07863569142~
	--IT8*N**~
	--PO1*2*48*EA*5.975*NT*EN*9780553593716*UP*73145140152~
	--IT8*N**~
	--PO1*3*48*EA*8.475*NT*EN*9780142410707*UP*74041707882~
	--IT8*N**~
	
	--CTT*3*120~
	--SE*14*000000003~
	--GE*1*000000002~
	--IEA*1*000145888~

	--SE total = 8 + (TotalLines*2).......	

	DECLARE	@curVend VARCHAR(20)
			,@LineFeed CHAR(2) = CHAR(13)+CHAR(10)
	
	CREATE TABLE #ords
	(
		 PONumber VARCHAR(20)
		,ParentFolder VARCHAR(20)
		,FileText VARCHAR(MAX)
	)	

	CREATE TABLE #vends 
	(
		 RowID INT IDENTITY(1,1)
		,VendorID VARCHAR(20)
		,VendProcessed BIT DEFAULT(0)
	)

	CREATE TABLE #dataset
	(
		 id INT IDENTITY(1,1)
		,[VendorID] VARCHAR(10)
		,[Binary] bit
		,EDIVersion NVARCHAR(10)
		,PONumber VARCHAR(20)
		,ParentFolder VARCHAR(20)
		,ShipFromSAN NVARCHAR(12)
		,IssueDate DATETIME
		,InsertDateTime DATETIME
		,BillToSAN NVARCHAR(12)
		,ShipToSAN NVARCHAR(12)
		,PODetails VARCHAR(max)
		,TotalLines INT
		,TotalQty INT
	)
	
	CREATE NONCLUSTERED INDEX IX_tempDataSet_VendorID ON #dataset (VendorID)
	CREATE NONCLUSTERED INDEX IX_tempVends_VendorID ON #vends (VendorID)


	INSERT INTO #vends (VendorID, VendProcessed)
		SELECT h.VendorID, 0
		FROM [850_PO_Hdr] h
			INNER JOIN [850_PO_Dtl] d
				ON h.OrdID=d.OrdID
			INNER JOIN Vendor_SAN_Codes v
				ON h.VendorID=v.VendorID
					AND v.Processor ='SFTP'
		WHERE h.Processed=0
		GROUP BY h.VendorID

	INSERT INTO #dataset ([Binary],VendorID,EDIVersion,PONumber,ParentFolder,ShipFromSAN,IssueDate,InsertDateTime,BillToSAN,ShipToSAN
						 ,PODetails,TotalLines,TotalQty)
		SELECT	 v.[Binary],v.VendorID,v.EDIVersion,h.PONumber,v.ParentFolder,h.ShipFromSAN,h.IssueDate,h.InsertDateTime,h.BillToSAN,h.ShipToSAN
				,dbo.EDIfn_GetPODetails(h.PONumber),h.TotalLines,h.TotalLines
		FROM [850_PO_Hdr] h 
			INNER JOIN [850_PO_Dtl] d 
				ON h.OrdID=d.OrdID
			INNER JOIN Vendor_SAN_Codes v 
				ON h.VendorID=v.VendorID
					AND v.Processor='SFTP'
		WHERE h.Processed=0 

	WHILE (SELECT COUNT(1) FROM #vends WHERE VendProcessed=0) > 0
	BEGIN

		SELECT TOP 1 @curVend = v.[VendorID]
		FROM #vends v
		WHERE v.[VendProcessed]=0
		ORDER BY v.[VendorID]

		INSERT INTO #ords
			SELECT	 ds.ponumber
					,ds.ParentFolder
					,CASE WHEN ds.[Binary]=0 
							THEN	'ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*'
									+ CAST(ds.ShipFromSAN as CHAR(15)) 
									+'*'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'*'+REPLACE(CONVERT(VARCHAR(5),ds.[InsertDateTime],108),':','')
									+CASE WHEN ds.[ShipFromSAN] in ('8600023') 
										THEN '*U*00200*'+RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(ds.[PONumber] AS VARCHAR(10)),9)  
										ELSE '*U*00200*'+RIGHT('0000000000'+ds.[PONumber],9) 
									 END +'*0*P*>~'
									+@LineFeed
									+'GS*PO*760985X*'+ds.[ShipFromSAN]+'*'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'*'+REPLACE(CONVERT(VARCHAR(5),ds.[InsertDateTime],108),':','')+'*000000002*X*003060~'
									+@LineFeed
									+'ST*850*000000003~'
									+@LineFeed
									+'BEG*00*NE*'+ds.[PONumber]+'**'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'**AC~'
									+@LineFeed
									+'DTM*037*'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'***'+LEFT(CONVERT(VARCHAR(4),YEAR(ds.[IssueDate])),2)+'~'
									+@LineFeed
									+'N1*BT**15*'+REPLACE(ds.[BillToSAN],'-','')+'~'
									+@LineFeed
									+'N1*ST**15*'+REPLACE(ds.[ShipToSAN],'-','')+'~'
									+@LineFeed
									+'N1*VN**15*'+REPLACE(ds.[ShipFromSAN],'-','')+'~'
									+@LineFeed
									+ds.[PODetails]
									+'CTT*'+CONVERT(VARCHAR(4),ds.[TotalLines])+'*'+CONVERT(VARCHAR(10),ds.[TotalQty])+'~'
									+@LineFeed
									+'SE*'+CONVERT(VARCHAR(10),(8+(CASE WHEN ds.[EDIVersion]='3060' THEN ds.[TotalLines]*2 ELSE ds.[TotalLines] END)))+'*000000003~'
									+@LineFeed
									+'GE*1*000000002~'
									+@LineFeed
									+'IEA*1*'
									+CASE WHEN ds.[ShipFromSAN] in ('8600023') 
											THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(ds.[PONumber] as varchar(10)),9) 
											ELSE RIGHT('0000000000'+ds.[PONumber],9) 
									 END +'~'  
							ELSE	CONVERT(VARCHAR(MAX),CONVERT(VARBINARY(MAX),CONVERT(VARCHAR(MAX),
									'ISA*00*850BK3060 *00*          *ZZ*760985X        *ZZ*'
									+CAST(ds.[ShipFromSAN] AS CHAR(15))
									+'*'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'*'+REPLACE(CONVERT(VARCHAR(5),ds.[InsertDateTime],108),':','')
									+CASE WHEN ds.[ShipFromSAN] IN ('8600023') 
											THEN '*U*00200*'+RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(ds.[PONumber] AS VARCHAR(10)),9) 
											ELSE '*U*00200*'+RIGHT('0000000000'+ds.[PONumber],9) 
									 END +'*0*P*>~'
									+@LineFeed
									+'GS*PO*760985X*'+ds.[ShipFromSAN]+'*'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'*'+REPLACE(CONVERT(VARCHAR(5),ds.[InsertDateTime],108),':','')+'*000000002*X*003060~'
									+@LineFeed
									+'ST*850*000000003~'
									+@LineFeed
									+'BEG*00*NE*'+ds.[PONumber]+'**'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'**AC~'
									+@LineFeed
									+'DTM*037*'+CONVERT(VARCHAR(6),ds.[IssueDate],12)+'***'+LEFT(CONVERT(VARCHAR(4),YEAR(ds.[IssueDate])),2)+'~'
									+@LineFeed
									+'N1*BT**15*'+REPLACE(ds.[BillToSAN],'-','')+'~'
									+@LineFeed
									+'N1*ST**15*'+REPLACE(ds.[ShipToSAN],'-','')+'~'
									+@LineFeed
									+'N1*VN**15*'+REPLACE(ds.[ShipFromSAN],'-','')+'~'
									+@LineFeed
									+ds.[PODetails]
									+'CTT*'+convert(varchar(4),ds.[TotalLines])+'*'+convert(varchar(10),ds.[TotalQty])+'~'
									+@LineFeed
									+'SE*'+CONVERT(VARCHAR(10),(8+(CASE WHEN ds.[EDIVersion]='3060' THEN ds.[TotalLines]*2 ELSE ds.[TotalLines] END)))+'*000000003~'
									+@LineFeed
									+'GE*1*000000002~'
									+@LineFeed
									+'IEA*1*'+
									CASE WHEN ds.ShipFromSAN in ('8600023') 
										THEN RIGHT('000000000'+CAST(DATEPART(dy, GETDATE()) AS VARCHAR(5)) + CAST(ds.[PONumber] AS VARCHAR(10)),9) 
										ELSE RIGHT('0000000000'+ds.[PONumber],9) 
									END +'~')),1)
						END [FileText]
			FROM #dataset ds
				LEFT JOIN #ords o
					ON ds.[PONumber] = o.[PONumber]
						AND ds.[VendorID]=@curVend
						AND o.[PONumber] IS NULL

		UPDATE #vends
		SET VendProcessed=1
		WHERE VendorID=@curVend
	END
	
	----get the results
	SELECT	 PONumber
			,ParentFolder
			,FileText
	FROM #ords
	GROUP BY PONumber, ParentFolder, FileText
		
	--clean up........
	DROP TABLE #vends
	DROP TABLE #ords
	DROP TABLE #dataset
--END
GO
PRINT N'Creating [dbo].[ProcessSFTP_ResponseAck_2019]...';


GO
-- =============================================
-- Author:		Joey B.
-- Create date: 5/8/2015
-- Description:	Builds a list of Invoice ACKs to be exported to SFPT folders thru EDI
-- =============================================
CREATE PROCEDURE [dbo].[ProcessSFTP_ResponseAck_2019]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE	 @CRLF VARCHAR(2) = CHAR(13) + CHAR(10)
			,@Z09 VARCHAR(9) = REPLICATE('0',9)
			,@Z10 VARCHAR(10) = REPLICATE('0',10)

	;WITH dataset AS
	(
		SELECT	 h.ShipFromSAN 
				,h.IssueDate
				,h.InsertDateTime
				,h.PONumber
				,h.AckID
				,v.ParentFolder
				,v.[Binary]
				,h.ReferenceNo
				,h.GSNo
				,dbo.EDIfn_GetResponseACKDtls(PONumber) AS ResponseACKDtls
		FROM dbo.[855_Ack_Hdr] h 
			INNER JOIN dbo.[855_Ack_Dtl] d 
				ON h.AckID = d.AckID
			INNER JOIN dbo.Vendor_SAN_Codes v
				ON h.VendorID = v.VendorID
					AND v.Processor = 'SFTP'
					AND v.ACK997=1
		WHERE h.ResponseACKSent = 0
	)
	SELECT DISTINCT AckID
		,PONumber
		,ParentFolder
		,CASE 
			WHEN [BINARY] = 0
				THEN 
					'ISA*00*          *00*          *ZZ*760985X        *ZZ*' 
					+ CAST(ShipFromSAN AS CHAR(15)) + '*' + CONVERT(VARCHAR(6), IssueDate, 12) + '*' + REPLACE(CONVERT(VARCHAR(5), InsertDateTime, 108), ':', '') 
					+ CASE WHEN ShipFromSAN IN ('8600023')
								THEN '*:*00200*' + RIGHT(@Z09  + CAST(DATEPART(DY, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)), 9)
								ELSE '*:*00200*' + RIGHT(@Z10 + PONumber, 9)
							END + '*0*P*>~'  + @CRLF 
					+ 'GS*FA*760985X*' + ShipFromSAN + '*' + CONVERT(VARCHAR(6), IssueDate, 12) + '*' + REPLACE(CONVERT(VARCHAR(5), InsertDateTime, 108), ':', '') + '*000000002*X*003060~'  + @CRLF 
					+ 'ST*997*000000001~'  + @CRLF 
					+ 'AK1*PR*' + CONVERT(VARCHAR(12), CASE ShipFromSAN  WHEN '2002442'  THEN ReferenceNo WHEN '8600023' THEN ISNULL(GSNo, '') ELSE PONumber END) + '~' + @CRLF 
					+ CASE WHEN ShipFromSAN NOT IN ('2002442')
							THEN ResponseACKDtls
							ELSE ''
					 END + 'AK9*A*' + CONVERT(VARCHAR(10), (('1'))) + '*' + CONVERT(VARCHAR(10), (('1'))) + '*' + CONVERT(VARCHAR(10), (('1'))) + '~' + @CRLF
					+ 'SE*' 
					+ CASE  WHEN ShipFromSAN NOT IN ('2002442')
							THEN CONVERT(VARCHAR(10), (('6')))
							ELSE CONVERT(VARCHAR(10), (('4')))
						END + '*000000001~' + @CRLF 
					+ 'GE*1*000000002~' + @CRLF 
					+ 'IEA*1*' 
					+ CASE  WHEN ShipFromSAN IN ('8600023')
							THEN RIGHT(@Z09 + CAST(DATEPART(DY, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)), 9)
							ELSE RIGHT(@Z10 + PONumber, 9)
					END + '~'
			ELSE 
					CONVERT(VARCHAR(MAX), CONVERT(VARBINARY(MAX), CONVERT(VARCHAR(MAX), 'ISA*00*          *00*          *ZZ*760985X        *ZZ*' + CAST(ShipFromSAN AS CHAR(15)) + '*' + CONVERT(VARCHAR(6), IssueDate, 12) + '*' + REPLACE(CONVERT(VARCHAR(5), InsertDateTime, 108), ':', '') 
					+ CASE WHEN ShipFromSAN IN ('8600023')
							THEN '*:*00200*' + RIGHT(@Z09 + CAST(DATEPART(DY, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)), 9)
							ELSE '*:*00200*' + RIGHT(@Z10 + PONumber, 9)
					   END + '*0*P*>~' + @CRLF 
					+ 'GS*FA*760985X*' + ShipFromSAN + '*' + CONVERT(VARCHAR(6), IssueDate, 12) + '*' + REPLACE(CONVERT(VARCHAR(5), InsertDateTime, 108), ':', '') + '*000000002*X*003060~' + @CRLF 
					+ 'ST*997*000000001~' + @CRLF 
					+ 'AK1*PR*' + CONVERT(VARCHAR(12), CASE ShipFromSAN WHEN '2002442' THEN ReferenceNo WHEN '8600023' THEN ISNULL(GSNo, '') ELSE PONumber END) + '~' + @CRLF 
					+ CASE  WHEN ShipFromSAN NOT IN ('2002442')
							THEN ResponseACKDtls
							ELSE ''
							END + 'AK9*A*' 
					+ CONVERT(VARCHAR(10), (('1'))) + '*' + CONVERT(VARCHAR(10), (('1'))) + '*' + CONVERT(VARCHAR(10), (('1'))) + '~' + @CRLF 
					+ 'SE*' 
					+ CASE  WHEN ShipFromSAN NOT IN ('2002442')
						THEN CONVERT(VARCHAR(10), (('6')))
						ELSE CONVERT(VARCHAR(10), (('4')))
					 END + '*000000001~' + @CRLF 
					+ 'GE*1*000000002~' + @CRLF 
					+ 'IEA*1*' 
					+ CASE  WHEN ShipFromSAN IN ('8600023')
									THEN RIGHT(@Z09 + CAST(DATEPART(DY, GETDATE()) AS VARCHAR(5)) + CAST(PONumber AS VARCHAR(10)), 9)
									ELSE RIGHT(@Z10 + PONumber, 9)
					   END + '~')), 1)
			END AS [FileText]
	FROM dataset
END
GO
PRINT N'Creating [CDF].[vueFulfillmentOrders].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'CDF', @level1type = N'VIEW', @level1name = N'vueFulfillmentOrders';


GO
PRINT N'Creating [CDF].[vueFulfillmentOrders].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "f"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 317
               Right = 251
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "o"
            Begin Extent = 
               Top = 35
               Left = 414
               Bottom = 312
               Right = 644
            End
            DisplayFlags = 280
            TopColumn = 30
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'CDF', @level1type = N'VIEW', @level1name = N'vueFulfillmentOrders';


GO
PRINT N'Creating [CDF].[vueFulfillments].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'CDF', @level1type = N'VIEW', @level1name = N'vueFulfillments';


GO
PRINT N'Creating [CDF].[vueFulfillments].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N'
', @level0type = N'SCHEMA', @level0name = N'CDF', @level1type = N'VIEW', @level1name = N'vueFulfillments';


GO
PRINT N'Creating [CDF].[vueFulfillments].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = -416
         Left = 0
      End
      Begin Tables = 
         Begin Table = "f"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 251
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "o"
            Begin Extent = 
               Top = 43
               Left = 474
               Bottom = 173
               Right = 704
            End
            DisplayFlags = 280
            TopColumn = 38
         End
         Begin Table = "a"
            Begin Extent = 
               Top = 45
               Left = 900
               Bottom = 245
               Right = 1186
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "s"
            Begin Extent = 
               Top = 402
               Left = 38
               Bottom = 703
               Right = 279
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "i"
            Begin Extent = 
               Top = 445
               Left = 479
               Bottom = 575
               Right = 711
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End', @level0type = N'SCHEMA', @level0name = N'CDF', @level1type = N'VIEW', @level1name = N'vueFulfillments';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [BLK].[PurchaseOrderDetail] WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderDetail~PurchaseOrderHeader];

ALTER TABLE [BLK].[InvoiceDetail] WITH CHECK CHECK CONSTRAINT [FK_InvoiceDetail~InvoiceHeader];

ALTER TABLE [BLK].[AcknowledgeDetail] WITH CHECK CHECK CONSTRAINT [FK_AcknowledgeDetail~AcknowledgeHeader];

ALTER TABLE [BLK].[ShipmentDetail] WITH CHECK CHECK CONSTRAINT [FK_ShipmentDetail~AcknowledgeHeader];

ALTER TABLE [CDF].[Acknowledgements] WITH CHECK CHECK CONSTRAINT [FK_Acknowledgements_Fulfillment];

ALTER TABLE [CDF].[Fulfillment] WITH CHECK CHECK CONSTRAINT [FK_Fulfillment_TransactionType];

ALTER TABLE [CDF].[Invoices] WITH CHECK CHECK CONSTRAINT [FK_Invoices_Fulfillment];

ALTER TABLE [CDF].[Orders] WITH CHECK CHECK CONSTRAINT [FK_Orders_Fulfillment];

ALTER TABLE [CDF].[Orders] WITH CHECK CHECK CONSTRAINT [FK_Orders_OrderStatus];

ALTER TABLE [CDF].[Shipments] WITH CHECK CHECK CONSTRAINT [FK_Shipment_Fulfillment];

ALTER TABLE [EDI].[TransactionLogMessages] WITH CHECK CHECK CONSTRAINT [FK_TransacdtionLogMessages~TransactionLog];

ALTER TABLE [EDI].[TransactionLogOrderNumbers] WITH CHECK CHECK CONSTRAINT [FK_TransactionLogOrderNumbers~TransctionLog];

ALTER TABLE [ImportBBV3].[Batch] WITH CHECK CHECK CONSTRAINT [FK_Batch~BatchItem];

ALTER TABLE [importCDFL].[Batch] WITH CHECK CHECK CONSTRAINT [FK_Batch~BatchItem];

ALTER TABLE [MetaData].[VendorCarrierTransformation] WITH CHECK CHECK CONSTRAINT [FK_VendorCarrierTransformation~CarrierCodesFromHPBcom];

ALTER TABLE [MetaData].[VendorCarrierTransformation] WITH CHECK CHECK CONSTRAINT [FK_VendorCarrierTransformation~Codes];


GO
PRINT N'Update complete.';


GO
