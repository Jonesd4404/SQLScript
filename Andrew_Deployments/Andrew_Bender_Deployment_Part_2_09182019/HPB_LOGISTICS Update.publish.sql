/*
Deployment script for HPB_Logistics_STG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar BakerTaylor "BakerTaylor"
:setvar HPB_EDI "HPB_EDI"
:setvar HPB_Prime "HPB_Prime"
:setvar DatabaseName "HPB_Logistics"
:setvar DefaultFilePrefix "HPB_Logistics_STG"
:setvar DefaultDataPath "F:\MSSQL\Data\"
:setvar DefaultLogPath "e:\SQLLogs\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[vw_WEB_Invoices].[MS_DiagramPane1]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPane1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vw_WEB_Invoices';


GO
PRINT N'Dropping [dbo].[vw_WEB_Invoices].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPaneCount', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vw_WEB_Invoices';


GO
PRINT N'Dropping [dbo].[vwSTOC_WeeklySMT].[MS_DiagramPane1]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPane1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwSTOC_WeeklySMT';


GO
PRINT N'Dropping [dbo].[vwSTOC_WeeklySMT].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_DiagramPaneCount', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwSTOC_WeeklySMT';


GO
PRINT N'Dropping <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_datareader', @membername = N'HPB\dist users';


GO
PRINT N'Dropping <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_datareader', @membername = N'HPB\Tracy_Dennis';


GO
PRINT N'Dropping <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_datawriter', @membername = N'HPB\dist users';


GO
PRINT N'Dropping <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_owner', @membername = N'HPB\jblalock';


GO
PRINT N'Dropping <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_owner', @membername = N'reportreader';


GO
PRINT N'Dropping <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_owner', @membername = N'CDCToolBoxUser';


GO
PRINT N'Creating [meta]...';


GO
CREATE SCHEMA [meta]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [staging]...';


GO
CREATE SCHEMA [staging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[TypeListInt]...';


GO
CREATE TYPE [dbo].[TypeListInt] AS TABLE (
    [Ints] INT NULL);


GO
PRINT N'Creating [dbo].[TypeListString25]...';


GO
CREATE TYPE [dbo].[TypeListString25] AS TABLE (
    [Strings] VARCHAR (25) NULL);


GO
PRINT N'Creating [dbo].[TypeListString250]...';


GO
CREATE TYPE [dbo].[TypeListString250] AS TABLE (
    [Strings] VARCHAR (250) NULL);


GO
PRINT N'Creating [dbo].[TypeListString500]...';


GO
CREATE TYPE [dbo].[TypeListString500] AS TABLE (
    [Strings] VARCHAR (500) NULL);


GO
PRINT N'Creating [meta].[CurrentTitleStockInventoryEAN]...';


GO
CREATE TABLE [meta].[CurrentTitleStockInventoryEAN] (
    [EAN]                   VARCHAR (13) NOT NULL,
    [LVTN_On_Hand_Quantity] INT          NULL,
    [RBOR_On_Hand_Quantity] INT          NULL,
    [FWIN_On_Hand_Quantity] INT          NULL,
    [ATPA_On_Hand_Quantity] INT          NULL,
    [FOCA_On_Hand_Quantity] INT          NULL,
    [CBPA_On_Hand_Quantity] INT          NULL,
    CONSTRAINT [PK_CurrentTitleStockInventoryEAN] PRIMARY KEY CLUSTERED ([EAN] ASC)
);


GO
PRINT N'Creating [meta].[IngramContentDCQuantities]...';


GO
CREATE TABLE [meta].[IngramContentDCQuantities] (
    [ISBNUPC]     VARCHAR (30) NOT NULL,
    [LVTN_OnHand] INT          NULL,
    [LVTN_Flag]   CHAR (1)     NULL,
    [ATPA_OnHand] INT          NULL,
    [ATPA_Flag]   CHAR (1)     NULL,
    [CBPA_OnHand] INT          NULL,
    [CBPA_Flag]   CHAR (1)     NULL,
    [FWIN_OnHand] INT          NULL,
    [FWIN_Flag]   CHAR (1)     NULL,
    [RBOR_OnHand] INT          NULL,
    [RBOR_Flag]   CHAR (1)     NULL,
    [FOCA_OnHand] INT          NULL,
    [FOCA_Flag]   CHAR (1)     NULL,
    CONSTRAINT [PK_IngramContentDCQuantities] PRIMARY KEY CLUSTERED ([ISBNUPC] ASC)
);


GO
PRINT N'Creating [meta].[CurrentTitleStockInventory]...';


GO
CREATE TABLE [meta].[CurrentTitleStockInventory] (
    [GTIN14]                                VARCHAR (14)    NULL,
    [EAN]                                   VARCHAR (13)    NULL,
    [ISBN13]                                VARCHAR (13)    NULL,
    [UPC]                                   VARCHAR (12)    NULL,
    [ISBN10]                                VARCHAR (10)    NULL,
    [LVTN_On_Hand_Quantity]                 INT             NULL,
    [RBOR_On_Hand_Quantity]                 INT             NULL,
    [FWIN_On_Hand_Quantity]                 INT             NULL,
    [CBPA_On_Hand_Quantity]                 INT             NULL,
    [ATPA_On_Hand_Quantity]                 INT             NULL,
    [FOCA_On_Hand_Quantity]                 INT             NULL,
    [FFOH_On_Hand_Quantity]                 INT             NULL,
    [WADC_On_Hand_Quantity]                 INT             NULL,
    [LVTN_On_Order_Quantity]                INT             NULL,
    [RBOR_On_Order_Quantity]                INT             NULL,
    [FWIN_On_Order_Quantity]                INT             NULL,
    [CBPA_On_Order_Quantity]                INT             NULL,
    [ATPA_On_Order_Quantity]                INT             NULL,
    [FOCA_On_Order_Quantity]                INT             NULL,
    [FFOH_On_Order_Quantity]                INT             NULL,
    [WADC_On_Order_Quantity]                INT             NULL,
    [Total_Quantity_On_Hand]                INT             NULL,
    [Price]                                 DECIMAL (18, 2) NULL,
    [Discount_Level_Original_Value]         VARCHAR (3)     NULL,
    [CDF_Discount_Pct]                      DECIMAL (18, 2) NULL,
    [Bulk_Discount_Pct]                     DECIMAL (18, 2) NULL,
    [Publisher_Status_Code]                 VARCHAR (2)     NULL,
    [Publisher_Status_Description]          VARCHAR (60)    NULL,
    [LVTN_Stock_Flag]                       VARCHAR (7)     NULL,
    [RBOR_Stock_Flag]                       VARCHAR (7)     NULL,
    [FWIN_Stock_Flag]                       VARCHAR (7)     NULL,
    [CBPA_Stock_Flag]                       VARCHAR (7)     NULL,
    [ATPA_Stock_Flag]                       VARCHAR (7)     NULL,
    [FOCA_Stock_Flag]                       VARCHAR (7)     NULL,
    [FFOH_Stock_Flag]                       VARCHAR (7)     NULL,
    [WADC_Stock_Flag]                       VARCHAR (7)     NULL,
    [Publication_Date]                      DATE            NULL,
    [On_Sale_Date]                          DATE            NULL,
    [Returnable_Indicator]                  CHAR (1)        NULL,
    [Return_Date]                           DATE            NULL,
    [Backorder_Only_Indicator]              CHAR (1)        NULL,
    [Media_Mail_Indicator]                  CHAR (1)        NULL,
    [Ingram_Product_Type]                   CHAR (1)        NULL,
    [Ingram_Product_Type_Description]       VARCHAR (60)    NULL,
    [Imprintable_Indicator]                 CHAR (1)        NULL,
    [Indexable_Indicator]                   CHAR (1)        NULL,
    [Weight]                                DECIMAL (22, 6) NULL,
    [Ingram_Publisher_Number]               VARCHAR (4)     NULL,
    [Ingram_Publisher_Number_Description]   VARCHAR (30)    NULL,
    [Restricted_Code]                       CHAR (1)        NULL,
    [Restricted_Code_Description]           VARCHAR (70)    NULL,
    [Discount_Category_Code]                VARCHAR (5)     NULL,
    [Product_Availability_Code]             VARCHAR (2)     NULL,
    [Product_Availability_Code_Description] VARCHAR (50)    NULL,
    [Ingram_Title_Code]                     VARCHAR (9)     NULL,
    [Product_Classification_Type]           VARCHAR (12)    NULL,
    [Last_Modified_Date]                    DATETIME2 (7)   NULL
);


GO
PRINT N'Creating [meta].[LastRun]...';


GO
CREATE TABLE [meta].[LastRun] (
    [TableName]   VARCHAR (255) NOT NULL,
    [DateRun]     DATE          NOT NULL,
    [DateTimeRun] DATETIME2 (7) NULL,
    CONSTRAINT [PK_LastRun] PRIMARY KEY CLUSTERED ([TableName] ASC, [DateRun] ASC)
);


GO
PRINT N'Creating [meta].[IngramContentTitlesActive]...';


GO
CREATE TABLE [meta].[IngramContentTitlesActive] (
    [EAN]                                   VARCHAR (17)    NULL,
    [ISBN_10]                               VARCHAR (10)    NULL,
    [Ingram_Product_Type_Code]              CHAR (1)        NULL,
    [Ingram_Product_Type]                   VARCHAR (60)    NULL,
    [Accessory_Code]                        VARCHAR (31)    NULL,
    [Product_Classification_Type]           VARCHAR (12)    NOT NULL,
    [Product_Form_Code]                     VARCHAR (2)     NULL,
    [Product_Form]                          VARCHAR (60)    NULL,
    [Product_Form_Detail]                   VARCHAR (60)    NULL,
    [Title]                                 VARCHAR (150)   NULL,
    [Edition_Description]                   VARCHAR (15)    NULL,
    [Contributor_1_Role]                    VARCHAR (30)    NULL,
    [Contributor_1]                         VARCHAR (40)    NULL,
    [Contributor_2_Role]                    VARCHAR (30)    NULL,
    [Contributor_2]                         VARCHAR (40)    NULL,
    [Contributor_3_Role]                    VARCHAR (30)    NULL,
    [Contributor_3]                         VARCHAR (40)    NULL,
    [Publisher]                             VARCHAR (45)    NULL,
    [BISAC_Binding_Type]                    VARCHAR (30)    NULL,
    [BISAC_Childrens_Book_Type]             VARCHAR (30)    NULL,
    [Ingram_Subject_Code]                   VARCHAR (60)    NULL,
    [BISAC_Subject_Code_1]                  VARCHAR (9)     NULL,
    [BISAC_Subject_Heading_Description_1]   VARCHAR (60)    NULL,
    [BISAC_Subject_Code_2]                  VARCHAR (9)     NULL,
    [BISAC_Subject_Heading_Description_2]   VARCHAR (60)    NULL,
    [BISAC_Subject_Code_3]                  VARCHAR (9)     NULL,
    [BISAC_Subject_Heading_Description_3]   VARCHAR (60)    NULL,
    [Audience_Age_Minimum]                  VARCHAR (2)     NULL,
    [Audience_Age_Maximum]                  VARCHAR (2)     NULL,
    [Audience_Grade_Minimum]                VARCHAR (2)     NULL,
    [Audience_Grade_Minimum_Desc]           VARCHAR (50)    NULL,
    [Audience_Grade_Maximum]                VARCHAR (2)     NULL,
    [Audience_Grade_Maximum_Desc]           VARCHAR (50)    NULL,
    [Lexile_Reading_Level]                  VARCHAR (4)     NULL,
    [LCCN]                                  VARCHAR (12)    NULL,
    [Dewey_Decimal_Classification]          VARCHAR (7)     NULL,
    [Library_of_Congress_Subject_Heading_1] VARCHAR (45)    NULL,
    [Library_of_Congress_Subject_Heading_2] VARCHAR (45)    NULL,
    [Number_Pages]                          INT             NULL,
    [Playing_Time]                          VARCHAR (3)     NULL,
    [Number_Of_Items]                       INT             NULL,
    [Weight_In_Pounds]                      DECIMAL (12, 4) NULL,
    [Length_In_Inches]                      DECIMAL (12, 4) NULL,
    [Width_In_Inches]                       DECIMAL (12, 4) NULL,
    [Height_In_Inches]                      DECIMAL (12, 4) NULL,
    [Dump_Display_Flag]                     CHAR (1)        NULL,
    [Illustration_Flag]                     CHAR (1)        NULL,
    [Spring_Arbor_Division_Flag]            CHAR (1)        NULL,
    [Language]                              VARCHAR (30)    NULL,
    [Spring_Arbor_Product_Type]             VARCHAR (30)    NULL,
    [Spring_Arbor_Subject_Code_Major]       VARCHAR (60)    NULL,
    [Spring_Arbor_Subject_Code_Minor]       VARCHAR (60)    NULL,
    [Publisher_Price]                       DECIMAL (12, 4) NULL,
    [Publication_Date]                      DATE            NULL,
    [Title_Last_Updated]                    SMALLDATETIME   NULL
);


GO
PRINT N'Creating [meta].[IngramContentTitlesActive].[IX_IngramContentTitlesActive_EAN]...';


GO
CREATE NONCLUSTERED INDEX [IX_IngramContentTitlesActive_EAN]
    ON [meta].[IngramContentTitlesActive]([EAN] ASC);


GO
PRINT N'Creating [meta].[IngramContentTitlesActive].[IXU_IngramContentTitlesActive_Contributor1]...';


GO
CREATE NONCLUSTERED INDEX [IXU_IngramContentTitlesActive_Contributor1]
    ON [meta].[IngramContentTitlesActive]([Contributor_1_Role] ASC, [Contributor_1] ASC)
    INCLUDE([EAN], [ISBN_10], [Ingram_Product_Type_Code], [Ingram_Product_Type], [Accessory_Code], [Product_Classification_Type], [Product_Form_Code], [Product_Form_Detail], [Title], [Edition_Description], [Contributor_2_Role], [Contributor_2], [Contributor_3_Role], [Contributor_3], [Publisher], [BISAC_Binding_Type], [Audience_Age_Minimum], [Audience_Age_Maximum], [Audience_Grade_Minimum], [Audience_Grade_Maximum], [Dewey_Decimal_Classification], [Library_of_Congress_Subject_Heading_1], [Library_of_Congress_Subject_Heading_2], [Number_Pages], [Playing_Time], [Number_Of_Items], [Weight_In_Pounds], [Length_In_Inches], [Width_In_Inches], [Dump_Display_Flag], [Illustration_Flag], [Language], [Publisher_Price], [Publication_Date], [Title_Last_Updated]);


GO
PRINT N'Creating [staging].[ISBNList]...';


GO
CREATE TABLE [staging].[ISBNList] (
    [Id]      INT          IDENTITY (1, 1) NOT NULL,
    [ISBNUPC] VARCHAR (30) NULL
);


GO
PRINT N'Creating [staging].[IngramContentTitlesActive]...';


GO
CREATE TABLE [staging].[IngramContentTitlesActive] (
    [EAN]                                   VARCHAR (17)    NULL,
    [ISBN_10]                               VARCHAR (10)    NULL,
    [Ingram_Product_Type_Code]              CHAR (1)        NULL,
    [Ingram_Product_Type]                   VARCHAR (60)    NULL,
    [Accessory_Code]                        VARCHAR (31)    NULL,
    [Product_Classification_Type]           VARCHAR (12)    NOT NULL,
    [Product_Form_Code]                     VARCHAR (2)     NULL,
    [Product_Form]                          VARCHAR (60)    NULL,
    [Product_Form_Detail]                   VARCHAR (60)    NULL,
    [Title]                                 VARCHAR (150)   NULL,
    [Edition_Description]                   VARCHAR (15)    NULL,
    [Contributor_1_Role]                    VARCHAR (30)    NULL,
    [Contributor_1]                         VARCHAR (40)    NULL,
    [Contributor_2_Role]                    VARCHAR (30)    NULL,
    [Contributor_2]                         VARCHAR (40)    NULL,
    [Contributor_3_Role]                    VARCHAR (30)    NULL,
    [Contributor_3]                         VARCHAR (40)    NULL,
    [Publisher]                             VARCHAR (45)    NULL,
    [BISAC_Binding_Type]                    VARCHAR (30)    NULL,
    [BISAC_Childrens_Book_Type]             VARCHAR (30)    NULL,
    [Ingram_Subject_Code]                   VARCHAR (60)    NULL,
    [BISAC_Subject_Code_1]                  VARCHAR (9)     NULL,
    [BISAC_Subject_Heading_Description_1]   VARCHAR (60)    NULL,
    [BISAC_Subject_Code_2]                  VARCHAR (9)     NULL,
    [BISAC_Subject_Heading_Description_2]   VARCHAR (60)    NULL,
    [BISAC_Subject_Code_3]                  VARCHAR (9)     NULL,
    [BISAC_Subject_Heading_Description_3]   VARCHAR (60)    NULL,
    [Audience_Age_Minimum]                  VARCHAR (2)     NULL,
    [Audience_Age_Maximum]                  VARCHAR (2)     NULL,
    [Audience_Grade_Minimum]                VARCHAR (2)     NULL,
    [Audience_Grade_Minimum_Desc]           VARCHAR (50)    NULL,
    [Audience_Grade_Maximum]                VARCHAR (2)     NULL,
    [Audience_Grade_Maximum_Desc]           VARCHAR (50)    NULL,
    [Lexile_Reading_Level]                  VARCHAR (4)     NULL,
    [LCCN]                                  VARCHAR (12)    NULL,
    [Dewey_Decimal_Classification]          VARCHAR (7)     NULL,
    [Library_of_Congress_Subject_Heading_1] VARCHAR (45)    NULL,
    [Library_of_Congress_Subject_Heading_2] VARCHAR (45)    NULL,
    [Number_Pages]                          INT             NULL,
    [Playing_Time]                          VARCHAR (3)     NULL,
    [Number_Of_Items]                       INT             NULL,
    [Weight_In_Pounds]                      DECIMAL (12, 4) NULL,
    [Length_In_Inches]                      DECIMAL (12, 4) NULL,
    [Width_In_Inches]                       DECIMAL (12, 4) NULL,
    [Height_In_Inches]                      DECIMAL (12, 4) NULL,
    [Dump_Display_Flag]                     CHAR (1)        NULL,
    [Illustration_Flag]                     CHAR (1)        NULL,
    [Spring_Arbor_Division_Flag]            CHAR (1)        NULL,
    [Language]                              VARCHAR (30)    NULL,
    [Spring_Arbor_Product_Type]             VARCHAR (30)    NULL,
    [Spring_Arbor_Subject_Code_Major]       VARCHAR (60)    NULL,
    [Spring_Arbor_Subject_Code_Minor]       VARCHAR (60)    NULL,
    [Publisher_Price]                       DECIMAL (12, 4) NULL,
    [Publication_Date]                      DATE            NULL,
    [Title_Last_Updated]                    SMALLDATETIME   NULL
);


GO
PRINT N'Creating [staging].[CurrentTitleStockInventory]...';


GO
CREATE TABLE [staging].[CurrentTitleStockInventory] (
    [GTIN14]                                VARCHAR (14)    NULL,
    [EAN]                                   VARCHAR (13)    NULL,
    [ISBN13]                                VARCHAR (13)    NULL,
    [UPC]                                   VARCHAR (12)    NULL,
    [ISBN10]                                VARCHAR (10)    NULL,
    [LVTN_On_Hand_Quantity]                 INT             NULL,
    [RBOR_On_Hand_Quantity]                 INT             NULL,
    [FWIN_On_Hand_Quantity]                 INT             NULL,
    [CBPA_On_Hand_Quantity]                 INT             NULL,
    [ATPA_On_Hand_Quantity]                 INT             NULL,
    [FOCA_On_Hand_Quantity]                 INT             NULL,
    [FFOH_On_Hand_Quantity]                 INT             NULL,
    [WADC_On_Hand_Quantity]                 INT             NULL,
    [LVTN_On_Order_Quantity]                INT             NULL,
    [RBOR_On_Order_Quantity]                INT             NULL,
    [FWIN_On_Order_Quantity]                INT             NULL,
    [CBPA_On_Order_Quantity]                INT             NULL,
    [ATPA_On_Order_Quantity]                INT             NULL,
    [FOCA_On_Order_Quantity]                INT             NULL,
    [FFOH_On_Order_Quantity]                INT             NULL,
    [WADC_On_Order_Quantity]                INT             NULL,
    [Total_Quantity_On_Hand]                INT             NULL,
    [Price]                                 DECIMAL (18, 2) NULL,
    [Discount_Level_Original_Value]         VARCHAR (3)     NULL,
    [CDF_Discount_Pct]                      DECIMAL (18, 2) NULL,
    [Bulk_Discount_Pct]                     DECIMAL (18, 2) NULL,
    [Publisher_Status_Code]                 VARCHAR (2)     NULL,
    [Publisher_Status_Description]          VARCHAR (60)    NULL,
    [LVTN_Stock_Flag]                       VARCHAR (7)     NULL,
    [RBOR_Stock_Flag]                       VARCHAR (7)     NULL,
    [FWIN_Stock_Flag]                       VARCHAR (7)     NULL,
    [CBPA_Stock_Flag]                       VARCHAR (7)     NULL,
    [ATPA_Stock_Flag]                       VARCHAR (7)     NULL,
    [FOCA_Stock_Flag]                       VARCHAR (7)     NULL,
    [FFOH_Stock_Flag]                       VARCHAR (7)     NULL,
    [WADC_Stock_Flag]                       VARCHAR (7)     NULL,
    [Publication_Date]                      DATE            NULL,
    [On_Sale_Date]                          DATE            NULL,
    [Returnable_Indicator]                  CHAR (1)        NULL,
    [Return_Date]                           DATE            NULL,
    [Backorder_Only_Indicator]              CHAR (1)        NULL,
    [Media_Mail_Indicator]                  CHAR (1)        NULL,
    [Ingram_Product_Type]                   CHAR (1)        NULL,
    [Ingram_Product_Type_Description]       VARCHAR (60)    NULL,
    [Imprintable_Indicator]                 CHAR (1)        NULL,
    [Indexable_Indicator]                   CHAR (1)        NULL,
    [Weight]                                DECIMAL (22, 6) NULL,
    [Ingram_Publisher_Number]               VARCHAR (4)     NULL,
    [Ingram_Publisher_Number_Description]   VARCHAR (30)    NULL,
    [Restricted_Code]                       CHAR (1)        NULL,
    [Restricted_Code_Description]           VARCHAR (70)    NULL,
    [Discount_Category_Code]                VARCHAR (5)     NULL,
    [Product_Availability_Code]             VARCHAR (2)     NULL,
    [Product_Availability_Code_Description] VARCHAR (50)    NULL,
    [Ingram_Title_Code]                     VARCHAR (9)     NULL,
    [Product_Classification_Type]           VARCHAR (12)    NULL,
    [Last_Modified_Date]                    DATETIME2 (7)   NULL
);


GO
PRINT N'Creating [dbo].[STOC_TeaserData].[IX_STOC_TeaserData_ISBNVendor]...';


GO
CREATE NONCLUSTERED INDEX [IX_STOC_TeaserData_ISBNVendor]
    ON [dbo].[STOC_TeaserData]([ISBN] ASC)
    INCLUDE([VendorID]);


GO
PRINT N'Creating [dbo].[STOC_TeaserData].[IX_STOC_TeaserData_Vendor]...';


GO
CREATE NONCLUSTERED INDEX [IX_STOC_TeaserData_Vendor]
    ON [dbo].[STOC_TeaserData]([VendorID] ASC)
    INCLUDE([LocationNo], [District], [LocationID], [Title], [ItemCode], [ReorderItemCode], [PreviousItemCodes], [SectionCode], [ItemCodeCount], [Cost], [Price], [InitialStoreDate], [InitialQty], [SoldInPeriod], [TotalSold], [QtyOnHand], [TransferredOut], [LastSaleDate], [TotalRcvd], [LastReorderDate], [Pending], [SuggestedOrderQty], [Markdowns], [RO_CNT], [LastQty], [ShipQty], [ISBN], [XRefQty], [NextOrderDate], [CaseQty], [RateOfSale], [PercentSold], [SalesRank], [SIPSQOH], [PendXref], [SoldXref], [ISBNSold]);


GO
PRINT N'Creating [dbo].[STOC_TeaserData].[IX_STOCTeaser_ISBN]...';


GO
CREATE NONCLUSTERED INDEX [IX_STOCTeaser_ISBN]
    ON [dbo].[STOC_TeaserData]([LastReorderDate] ASC)
    INCLUDE([ISBN]);


GO
PRINT N'Creating [dbo].[VX_Requisition_Hdr].[IX_VXRequisitionHdr_StatusRequistion]...';


GO
CREATE NONCLUSTERED INDEX [IX_VXRequisitionHdr_StatusRequistion]
    ON [dbo].[VX_Requisition_Hdr]([Status] ASC)
    INCLUDE([RequisitionNo]);


GO
PRINT N'Creating [dbo].[DF_STOC_TeaserData_ISBNSold]...';


GO
ALTER TABLE [dbo].[STOC_TeaserData]
    ADD CONSTRAINT [DF_STOC_TeaserData_ISBNSold] DEFAULT ((0)) FOR [ISBNSold];


GO
PRINT N'Altering [dbo].[vw_BT_Inv_Dtl]...';


GO
ALTER VIEW [dbo].[vw_BT_Inv_Dtl]
AS
SELECT DISTINCT TOP (100) PERCENT 
	 bi.ItemID AS ItemInvoiceID
	,bh.InvoiceID
	,bi.LineNumber AS [LineNo]
	,bi.ProductIDType AS ItemIDCode
	,bi.ProductIdentifier AS ItemIdentifier
	,bi.ItemDescription AS ItemDesc
	,bi.InvoicedQuantity AS InvoiceQty
	,bi.FixedRPExcludingTax AS UnitPrice
	,bi.UnitPriceExcludingTax AS DiscountPrice
	,' ' AS DiscountCode
	,bi.DiscountPercentage AS DiscountPct
FROM [$(BakerTaylor)].[dbo].[bulkorder_invoice_Header] bh 
	INNER JOIN [$(BakerTaylor)].[dbo].[bulkorder_invoice_ItemDetail] bi 
		ON bh.InvoiceID = bi.InvoiceID 
	INNER JOIN [$(BakerTaylor)].[dbo].[codes_SAN] AS c WITH(NOLOCK) 
		ON bh.ShipToPartyIdentifier = c.SAN + ' ' + c.Suffix 
	INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l WITH(NOLOCK) 
		ON l.LocationNo = c.LocationNo 
	LEFT OUTER JOIN [$(BakerTaylor)].[dbo].[bulkorder_invoice_AdditionalCharges] a WITH(NOLOCK) 
		ON bh.InvoiceID = a.InvoiceID 
	LEFT OUTER JOIN dbo.VX_Requisition_Hdr AS rh 
		ON rh.PONumber = bi.BuyersOrderReference
WHERE (ISNULL(bh.Processed, 0) = 0)
ORDER BY bh.InvoiceID, [LineNo]
UNION
SELECT DISTINCT  TOP (100) PERCENT 
	  id.InvoiceItemId AS ItemInvoiceID
	 ,ih.InvoiceID, RIGHT(REPLICATE('0',5)+id.[LineNo],5) AS [LineNo]
	 ,id.ItemIDCode AS ItemIDCode
	 ,id.ItemIdentifier AS ItemIdentifier
	 ,rd.ItemCode AS ItemDesc
	 , CAST(id.InvoiceQty AS VARCHAR(10)) AS InvoiceQty
	 ,id.UnitPrice AS UnitPrice
	 ,id.UnitPrice AS DiscountPrice
	 , ' '  AS DiscountCode
	 , id.DiscountPct AS DiscountPct
FROM [$(HPB_EDI)].[BLK].[InvoiceHeader] ih 
	INNER JOIN [$(HPB_EDI)].[BLK].[InvoiceDetail] id 
		ON ih.InvoiceID = id.InvoiceID 
	INNER JOIN dbo.VX_Requisition_Hdr AS rh 
		ON rh.PONumber = ih.PONumber 
	INNER JOIN dbo.VX_Requisition_Dtl as rd 
		ON rd.PONumber = ih.PONumber 
			AND rd.VendorItem = id.ItemIdentifier
WHERE     (ISNULL(ih.Processed, 0) = 0)
ORDER BY ih.InvoiceID, [LineNo]
GO
PRINT N'Altering [dbo].[vw_BT_Inv_Hdr]...';


GO
ALTER VIEW [dbo].[vw_BT_Inv_Hdr]
AS
SELECT DISTINCT TOP (100) PERCENT 
	 bh.InvoiceID
	,bh.InvoiceNumber AS InvoiceNo
	,bh.IssueDateTime AS IssueDate
	,ISNULL(rh.VendorID, 'IDB&TDISTR') AS VendorID
	,ISNULL(rh.PONumber, bi.BuyersOrderReference) AS PONumber
	,bh.ASNRefNumber AS ReferenceNo
	,c.LocationNo AS ShipToLoc
	,c.SAN + ' ' + c.Suffix AS ShipToSAN
	,'HPB Accounting' AS BillToLoc
	,CAST(' ' as varchar(12)) AS [BillToSAN]
	,'B&T ' + c.Warehouse AS ShipFromLoc
	,bh.SellerPartyIdentifier AS ShipFromSAN
	,COUNT(bi.ProductIdentifier) AS TotalLines
	,SUM(CAST(bi.InvoicedQuantity AS int)) AS TotalQty
	,bh.TotalPayable
	,bh.CurrencyCode
FROM [$(BakerTaylor)].[dbo].[bulkorder_invoice_Header] bh 
	INNER JOIN [$(BakerTaylor)].[dbo].[bulkorder_invoice_ItemDetail] bi 
		ON bh.InvoiceID = bi.InvoiceID 
	INNER JOIN [$(BakerTaylor)].[dbo].[codes_SAN] AS c WITH(NOLOCK) 
		ON bh.ShipToPartyIdentifier = c.SAN + ' ' + c.Suffix 
	INNER JOIN [$(HPB_Prime)].[dbo].[Locations] AS l WITH(NOLOCK) 
		ON l.LocationNo = c.LocationNo 
	LEFT OUTER JOIN [$(BakerTaylor)].[dbo].[bulkorder_invoice_AdditionalCharges] a  WITH (nolock) 
		ON bh.InvoiceID = a.InvoiceID 
	LEFT OUTER JOIN dbo.VX_Requisition_Hdr rh 
		ON rh.PONumber = bi.BuyersOrderReference
WHERE (ISNULL(bh.Processed, 0) = 0)
GROUP BY bh.InvoiceID, bh.InvoiceNumber, bh.IssueDateTime, ISNULL(rh.VendorID, 'IDB&TDISTR'), ISNULL(rh.PONumber, bi.BuyersOrderReference), bh.ASNRefNumber
		,c.LocationNo, c.SAN + ' ' + c.Suffix, 'B&T ' + c.Warehouse, bh.SellerPartyIdentifier, bh.TotalPayable, bh.CurrencyCode
UNION
SELECT DISTINCT TOP (100) PERCENT 
	 ih.InvoiceID
	,ih.InvoiceNo AS InvoiceNo
	,CAST(REPLACE(CONVERT(DATE,ih.IssueDate,112),'-','') AS VARCHAR(8)) AS IssueDate
	,ISNULL(rh.VendorID, ih.VendorID) AS VendorID
	,ISNULL(rh.PONumber, ih.PONumber) AS PONumber
	,ISNULL(ih.ReferenceNo,' ') AS ReferenceNo
	,ih.ShipToLoc AS ShipToLoc
	,REPLACE(ih.ShipToSAN,'-','') AS ShipToSAN
	,'HPB Accounting' AS BillToLoc
	,CAST(' ' AS VARCHAR(12)) AS [BillToSAN]
	,ih.ShipFromLoc AS ShipFromLoc
	,REPLACE(ih.ShipFromSAN,'-','') AS [ShipFromSAN]
	,COUNT(id.ItemIdentifier) AS TotalLines
	,SUM(CAST(id.InvoiceQty AS INT)) AS TotalQty
	,CAST(ih.TotalPayable AS VARCHAR(12))
	,ISNULL(ih.CurrencyCode,'USD') AS [CurrencyCode]
FROM [$(HPB_EDI)].[BLK].[InvoiceHeader] ih 
	INNER JOIN [$(HPB_EDI)].[BLK].[InvoiceDetail] id 
		ON ih.InvoiceID = id.InvoiceID 
	INNER JOIN dbo.VX_Requisition_Hdr rh 
		ON rh.PONumber = ih.PONumber
WHERE (ISNULL(ih.Processed, 0) = 0)
GROUP BY ih.InvoiceID, ih.InvoiceNo, ih.IssueDate, ISNULL(rh.VendorID, ih.VendorID) , ISNULL(rh.PONumber, ih.PONumber), ih.ReferenceNo
		,ih.ShipToLoc, REPLACE(ih.ShipToSAN,'-',''), ih.ShipFromLoc, REPLACE(ih.ShipFromSAN,'-',''), CAST(ih.TotalPayable AS VARCHAR(12)),  ISNULL(ih.CurrencyCode,'USD')
ORDER BY ih.InvoiceID
GO
PRINT N'Altering [dbo].[vw_WEB_Invoices]...';


GO


ALTER VIEW [dbo].[vw_WEB_Invoices]
AS
SELECT DISTINCT TOP (100) PERCENT 
	t.InvoiceNumber,replace(cast(t.IssueDateTime as date),'-','') [IssueDateTime],case when t.VendorID = 'IDB&TDISTR' then 'IDB&TWEB' else t.VendorID end [VendorID],t.OrderNumber,t.ASNNumber,
	cast([$(HPB_Prime)].dbo.ProperCase(case when len(replace(t.ShipToName,'  ',' ')+'-'+t.ShipToCity+','+t.ShipToState)>29 
		then left(replace(t.ShipToName,'  ',' '),(CHARINDEX(' ',t.ShipToName)-1))+'-'+t.ShipToCity
		else replace(t.ShipToName,'  ',' ')+'-'+t.ShipToCity end) +','+t.ShipToState as varchar(30)) [ShipTo],
	1[TotalLines],t.InvoiceQuantity,t.TotalPayable,cast(t.TotalPayable as money)-cast(t.ChargeAmount as money)[PurchaseAmount],t.ChargeAmount[ShippingAmount]
from [$(HPB_EDI)].dbo.[EDI_Transactions] t 
	inner join [$(HPB_EDI)].dbo.[WEB_Invoice_Audit_Log] l on t.InvoiceNumber=l.InvoiceNo
where t.TransType='INV' and l.Processed=0 
order by replace(cast(t.IssueDateTime as date),'-','')
GO
PRINT N'Altering [dbo].[vwSTOC_Reorder_Control]...';


GO



ALTER VIEW [dbo].[vwSTOC_Reorder_Control]
AS
SELECT distinct top 100 percent src.VendorID, ISNULL(src.RequisitionDueDate, '1900/01/01') AS RequisitionDueDate, ISNULL(src.RequisitionNo, 'NA') AS RequisitionNo, src.StoreNo
FROM         dbo.STOC_Reorder_Control AS src 
	INNER JOIN [$(HPB_Prime)].[dbo].[VendorMaster] v ON src.VendorID = v.VendorID
WHERE     (ISNULL(LTRIM(RTRIM(v.UserChar30)), '') <> '') 
order by src.VendorID
GO
PRINT N'Altering [dbo].[vwSTOC_Users]...';


GO

ALTER VIEW [dbo].[vwSTOC_Users]
AS
select userid,replace(username,'''','')[username],right('00000' + ltrim(rtrim(userlocation)),5)[userlocation],useraccesscode,userempno,useractive 
from dbo.STOC_Users
where useractive = 'A'
union

select	 AD_Login as [userid]
		,replace(AD_Display_Name,'''','') as [username]
		,right('00000' + ltrim(rtrim(aa.[AD_LocationNo])),5) as [userlocation]
		,AD_JobTitle as [useraccesscode]
		,EmployeeNumber as [userempno]
		,[Status] as [useractive]
from [$(HPB_Prime)].[dbo].[ADAccounts] aa
where (aa.AD_JobTitle like '%DIM%' or aa.AD_JobTitle like '%SIM%')
	and aa.[Status] = 'A' and aa.WMS_Acct = 0 and aa.AD_LocationNo not in ('888','304','880','881','677','663','')
	and aa.[EmployeeNumber] not in (select userempno from Stoc_Users)
union
select	 AD_Login[userid]
		,replace(AD_Display_Name,'''','') as [username]
		,right('00000' + ltrim(rtrim(AD_LocationNo)),5) as [userlocation]
		,'Chainwide' as [useraccesscode]
		,EmployeeNumber as [userempno]
		,[Status] as [useractive]
from [$(HPB_Prime)].dbo.[ADAccounts] aa
where aa.AD_JobTitle like '%HD%' and aa.[AD_LocationNo] ='888'
GO
PRINT N'Altering [dbo].[vwVX_BT_AvailQty]...';


GO
ALTER VIEW [dbo].[vwVX_BT_AvailQty]
AS
	SELECT	 t.ISBNUPC
			,t.Warehouse
			,SUM(t.QtyOnHand) AS [QtyOnHand]
	FROM  (	SELECT	ISBN AS [ISBNUPC]
					,[WHS] AS [Warehouse]
					,[QOH] AS [QtyOnHand] 
			FROM [$(BakerTaylor)].dbo.[Book_Inventory]
	UNION
	SELECT	 ISBN AS [ISBNUPC]
			,WHS  AS [Warehouse]
			,QOH  AS [QtyOnHand]
	FROM dbo.VX_Reserve_Inventory) t
	GROUP BY t.ISBNUPC,t.Warehouse
	UNION 
	SELECT	 UPC AS [ISBNUPC]
			,WHS AS [Warehouse]
			,QOH AS [QtyOnHand]
	  FROM [$(BakerTaylor)].[dbo].[Entertainment_Inventory]
GO
PRINT N'Altering [dbo].[vwVX_Reorder_Control]...';


GO

ALTER VIEW [dbo].[vwVX_Reorder_Control]
AS
SELECT     src.VendorID, ISNULL(src.RequisitionDueDate, '1900/01/01') AS RequisitionDueDate, ISNULL(src.RequisitionNo, 'NA') AS RequisitionNo, ISNULL(src.PONumber, 'NA') 
                      AS PONumber, src.StoreNo, src.Warehouse, l.[Name], case l.LocationNo when '00077' then '00967' when '00050' then '00967' when '00042' then '00967' else l.RDCLocationNo end as RDCLocationNo,
					  case l.[LocationNo] when '00077' then 'Cleveland' when '00050' then 'Cleveland' when '00042' then 'Cleveland' else l.DistrictCode end as DistrictCode, ISNULL(s.StatusDesc, 'NA') AS Status
FROM         dbo.VX_Reorder_Control AS src 
	INNER JOIN [$(HPB_Prime)].dbo.[VendorMaster] v 
		ON src.VendorID = v.VendorID 
	INNER JOIN [$(HPB_Prime)].[dbo].[Locations]	l 
		ON src.StoreNo = l.LocationNo 
	LEFT OUTER JOIN dbo.VX_Status AS s ON src.Status = s.StatusCode
WHERE     (ISNULL(LTRIM(RTRIM(v.UserChar30)), '') <> '') AND (v.VendorID <> 'WHPBSUPPLY')
GO
PRINT N'Creating [meta].[vwTitlesActive_CurrentStock]...';


GO
create view meta.vwTitlesActive_CurrentStock
as
	select	 icta.EAN, icta.ISBN_10, icta.Ingram_Product_Type_Code, icta.Ingram_Product_Type, icta.Accessory_Code, icta.Product_Classification_Type, icta.Product_Form_Code, icta.Product_Form_Detail
			,icta.Title, icta.Edition_Description, icta.Contributor_1, icta.Contributor_1_Role, icta.Contributor_2, icta.Contributor_2_Role, icta.Contributor_3, icta.Contributor_3_Role, icta.Publisher
			,icta.BISAC_Binding_Type, icta.Audience_Age_Minimum, icta.Audience_Age_Maximum, icta.Audience_Grade_Minimum, icta.Audience_Grade_Maximum, icta.Dewey_Decimal_Classification
			,icta.Library_of_Congress_Subject_Heading_1, icta.Library_of_Congress_Subject_Heading_2, icta.Number_Pages, icta.Playing_Time, icta.Number_Of_Items, icta.Weight_In_Pounds
			,icta.Length_In_Inches, icta.Width_In_Inches, icta.Dump_Display_Flag, icta.Illustration_Flag, icta.[Language], icta.Publisher_Price, icta.Publication_Date, icta.Title_Last_Updated
			,ctsi.gtin14, ctsi.ISBN13, ctsi.upc
			,ctsi.LVTN_On_Hand_Quantity AS DCQtyAvailable_N, ctsi.RBOR_On_Hand_Quantity AS DCQtyAvailable_E, ctsi.FWIN_On_Hand_Quantity AS DCQtyAvailable_D,ctsi.CBPA_On_Hand_Quantity AS DCQtyAvailable_C
			,ctsi.ATPA_On_Hand_Quantity AS DCQtyAvailable_B, ctsi.FOCA_On_Hand_Quantity AS DCQtyAvailable_J, ctsi.FFOH_On_Hand_Quantity, ctsi.WADC_On_Hand_Quantity
			--
			,ctsi.LVTN_On_Order_Quantity AS DCQtyOrdered_N, ctsi.RBOR_On_Order_Quantity AS DCQtyOrdered_E, ctsi.FWIN_On_Order_Quantity AS DCQtyOrdered_D, ctsi.CBPA_On_Order_Quantity AS DCQtyOrdered_C
			,ctsi.ATPA_On_Order_Quantity AS DCQtyOrdered_B, ctsi.FOCA_On_Order_Quantity AS DCQtyOrdered_J,  ctsi.FFOH_On_Order_Quantity, ctsi.WADC_On_Order_Quantity
			,ctsi.Total_Quantity_On_Hand
			,ctsi.Price,ctsi.Discount_Level_Original_Value, ctsi.CDF_Discount_Pct, ctsi.Bulk_Discount_Pct, ctsi.Publisher_Status_Code, ctsi.On_Sale_Date, ctsi.Backorder_Only_Indicator
			,ctsi.Media_Mail_Indicator, ctsi.Restricted_Code, ctsi.Restricted_Code_Description, ctsi.Product_Availability_Code, ctsi.Product_Availability_Code_Description, ctsi.Last_Modified_Date			
	from meta.IngramContentTitlesActive icta
		inner join meta.CurrentTitleStockInventory ctsi
			on icta.EAN = ctsi.EAN
GO
PRINT N'Creating [dbo].[vwVX_IC_AvailQty]...';


GO
CREATE VIEW [dbo].[vwVX_IC_AvailQty]
AS
	SELECT i_n.ISBNUPC, 'N' AS Warehouse, i_n.LVTN_OnHand AS QtyOnHand
	FROM meta.IngramContentDCQuantities i_n
	WHERE i_n.LVTN_Flag = 'Y' and i_n.LVTN_OnHand > 0
	UNION
	SELECT i_b.ISBNUPC, 'B' AS Warehouse, i_b.ATPA_OnHand AS QtyOnHand
	FROM meta.IngramContentDCQuantities i_b
	WHERE i_b.ATPA_Flag = 'Y' and i_b.ATPA_OnHand > 0
	UNION
	SELECT i_c.ISBNUPC, 'C' AS Warehouse, i_c.CBPA_OnHand AS QtyOnHand
	FROM meta.IngramContentDCQuantities i_c
	WHERE i_c.CBPA_Flag = 'Y' and i_c.CBPA_OnHand > 0
	UNION
	SELECT i_d.ISBNUPC, 'D' AS Warehouse, i_d.FWIN_OnHand AS QtyOnHand
	FROM meta.IngramContentDCQuantities i_d
	WHERE i_d.FWIN_Flag = 'Y' and i_d.FWIN_OnHand > 0
	UNION
	SELECT ISBNUPC, 'E' AS Warehouse, RBOR_OnHand AS QtyOnHand
	FROM meta.IngramContentDCQuantities i_e
	WHERE i_e.RBOR_Flag = 'Y'and i_e.RBOR_OnHand > 0
	UNION
	SELECT i_j.ISBNUPC, 'J' AS Warehouse, FOCA_OnHand AS QtyOnHand
	FROM Meta.IngramContentDCQuantities i_j
	WHERE i_j.FOCA_Flag = 'Y' and i_j.FOCA_OnHand > 0
GO
PRINT N'Creating [dbo].[vwVX_IC_ValidItem]...';


GO


CREATE VIEW [dbo].[vwVX_IC_ValidItem]
AS
	SELECT EAN AS [ISBNUPC] 
	FROM meta.CurrentTitleStockInventoryEAN
	GROUP BY EAN
GO
PRINT N'Altering [dbo].[FN_STOC_GetNextOrderDate]...';


GO
-- =============================================
-- Author:		<Joey B>
-- Create date: <6/18/2012>
-- Description:	<Get the next order date for requisition due date......>
-- =============================================
ALTER FUNCTION [dbo].[FN_STOC_GetNextOrderDate] 
(
	-- Add the parameters for the function here
	@VendorID varchar(20)
)
RETURNS DATETIME
AS
BEGIN
	/*
		TESTING:
			declare @VendorID varchar(20)
			set @VendorID = 'WHPBSUPPLY'
			declare @IntervalType varchar(6)
			declare @OrderInterval varchar(10)
	
			select @IntervalType = case v.Userint1  when 1 then 'Day'
									when 2 then 'Week'
									when 3 then 'Month' end,
				   @OrderInterval = case v.UserInt2 when 0 then 'Tuesday'
									else cast(v.UserInt2 as varchar(10)) end 
			from [$(HPB_Prime)].[dbo].[VendorMaster] v
			where vendorid = @vendorid
	
			--set @IntervalType = 'Day'
			--set @OrderInterval = 'Tuesday'
	*/

	------stoc 2.0 updates section.............................................................................
	--declare @IntervalType varchar(6)
	--declare @OrderInterval varchar(10)
	--select @IntervalType = isnull(NextOrdSetting,'MONTH'),@OrderInterval = isnull(NextOrdInterval,1)
	--from STOC_Vendors v
	--where vendorid = @vendorid


	DECLARE	 @IntervalType  VARCHAR(6)
			,@OrderInterval VARCHAR(10)
			,@CurDate		DATETIME
			,@nextDate		DATETIME
	select	 @IntervalType = CASE v.Userint1  
								WHEN 1 THEN 'Day'
								WHEN 2 THEN 'Week'
								WHEN 3 THEN 'Month' 
						     END
			,@OrderInterval = CASE v.UserInt2 
									WHEN 0 THEN 'Tuesday' 
									WHEN 1 THEN 'Monday'
									ELSE CAST(v.UserInt2 AS VARCHAR(10)) 
							  END 
		FROM [$(HPB_Prime)].[dbo].[VendorMaster] v
		WHERE vendorid = @vendorid

	--set to the last consoliation date if one exists..........................................................
	SELECT @CurDate = ISNULL(MAX(ConsolidationDate) ,GETDATE())
	FROM STOC_Consolidation_Audit_Log 
	WHERE VendorID=@VendorID
	
	BEGIN
		DECLARE @I SMALLINT = 1
		IF UPPER(@IntervalType) IN ('DAY','DAYS')
			BEGIN
				WHILE @I <= 7
					BEGIN
						IF DATENAME(WEEKDAY,DATEADD(D,@I,@CurDate)) = @OrderInterval
							SELECT @nextDate = CONVERT(DATETIME,DATEADD(DAY,@I,@CurDate))
						SET @I = @I + 1
					END
			END
		ELSE IF UPPER(@IntervalType) IN ('WEEK','WEEKS')
			BEGIN
				SELECT @nextDate = CONVERT(DATETIME,DATEADD(WEEK,cast(@OrderInterval AS INT),@CurDate))
			END		
		ELSE IF UPPER(@IntervalType) IN ('MONTH','MONTHS')
			BEGIN
				SELECT @nextDate = CONVERT(DATETIME,DATEADD(MONTH,cast(@OrderInterval AS INT),@CurDate))
			END	
			
	--select @nextDate as NextDate
	
	END
	RETURN @nextDate
END
GO
PRINT N'Altering [dbo].[FN_STOC_Wks2Ord]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
ALTER FUNCTION [dbo].[FN_STOC_Wks2Ord]
(
	@vendorID varchar(20)
)
RETURNS int
AS
BEGIN
	-- Declare the return variable here
	DECLARE @result int

	-- Add the T-SQL statements to compute the return value here
	select  @result=Weeks2Ord4
	from dbo.STOC_Vendors
	where VendorID=@vendorID

	-- Return the result of the function
	RETURN @result

END
GO
PRINT N'Altering [dbo].[EDI_InvoiceHdrUpdStatus]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <C5/30/2013>
-- Description:	<Update BT invoice header status...>
-- =============================================
ALTER PROCEDURE [dbo].[EDI_InvoiceHdrUpdStatus] 
	 @InvoiceID int
	,@VendorID varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;

	IF @VendorID = 'IDB&TDISTR'
		BEGIN
			UPDATE bh
				SET	 bh.processed = 1
					,bh.processeddate = GETDATE()
			FROM BakerTaylor.dbo.bulkorder_invoice_Header bh
			WHERE bh.InvoiceID = @InvoiceID
		END
	ELSE 
		BEGIN    
			UPDATE IH
				SET	 ih.Processed = 1
					,ih.ProcessedDateTime = GETDATE()
			FROM EDI.Bulk_InvoiceHeader IH
			WHERE ih.InvoiceID = @InvoiceID
		END    
END
GO
PRINT N'Altering [dbo].[GetSTOCData]...';


GO
-- =============================================
-- Author:		<Joey B>
-- Create date: <6/12/2012>
-- Description:	<Returns reorder data to STOC application>
-- =============================================
ALTER PROCEDURE [dbo].[GetSTOCData]
	@Vendors nvarchar(max),@SectionCodes nvarchar(max),@SectionX bit,@Stores nvarchar(max),@StoreX bit,@Tags nvarchar(max),@TagX bit,@StartDate datetime,@EndDate datetime
AS
BEGIN


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[TEASER_WORK_TBL]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	DROP TABLE #TEASER_WORK_TBL
CREATE TABLE #TEASER_WORK_TBL([RowID] int identity(1,1),[LocationNo] [char](5) NULL,[District] [varchar](30) NULL,[Title] [varchar](250) NULL,
	[ItemCode] [varchar](20) NULL, [PreviousItemCodes] [varchar] (100),[ReorderItemCode] [varchar](10) NULL,[VendorID] [varchar](20) NULL,[SectionCode] [varchar](20) NULL,[ItemCodeCount] [int] NULL,
	[Cost] [money] NULL,[Price] [money] NULL,[InitialStoreDate] [datetime] NULL,[InitialQty] [int] NULL,[QtyOnHand] [int] NULL,[TotalRcvd] [int] NULL,[LastReorderDate] [datetime] NULL,
	[Pending] [int] NULL,[RO_CNT] [int] NULL,[LastQty] [int] NULL,[ShipQty] [int] NULL,[ISBN] [varchar](20) NULL,[XRefQty] [int] NULL, [LocationID] [char](10) NOT NULL,
	[SuggestedOrderQty] [int] NULL,[Markdowns] [int] NULL,[LastSaleDate] [datetime] NULL,[TransferredOut] [int] NULL,[SoldInPeriod] [int] NULL,[TotalSold] [int] NULL,[NextOrderDate] [datetime] NULL,[CaseQty] [int] NULL,
	[RateOfSale] [numeric](9,4) NULL,[PercentSold] [numeric](9,2) NULL,[SalesRank] [varchar] (30) NULL,[SectionQty] [int] NULL,[PMRateOfSale] [numeric](9,4) NULL) ON [PRIMARY]

CREATE  CLUSTERED  INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID], [ItemCode], [ReorderItemCode])
CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo], [ItemCode], [ReorderItemCode])
CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID], [District], [LocationNo])

--declare @Vendors nvarchar(max),@SectionCodes nvarchar(max),@Stores nvarchar(max),@Tags nvarchar(max)
--declare @SectionX int = 0,@StoreX int = 0,@TagX int = 0
--declare @StartDate datetime, @EndDate datetime

--set @SectionCodes = 'AfrAmer, AltHealth, AmerHist, AncinetHst, Anthro, Antiques, Archeo, Architect, Art, ArtHow, ArtsCrafts, Auto, BCDFic, BCDNonFic, Bibles, Bio, Blank, BTFic, BTNonFic, Bus, Calendar, CDChil, CDChrist, CDClass, CDCountry, CDHoliday, CDJazz, CDMisc, CDNewAge, CDRap, CDRock, CDSoul, CDSoundTr, CDWorld, ChriFi, Christian, CivilWar, ClassLit, Clearance, Collect, Comics, CompSci, Cooking, Cultural, Currents, Diet, Drama, DVDAction, DVDAni, DVDAnime, DVDArtHse, DVDClassic, DVDComedy, DVDCult, DVDDoc, DVDDrama, DVDEd, DVDExer, DVDForeign, DVDHorror, DVDKids, DVDMiscNF, DVDMusic, DVDMusical, DVDNew, DVDSciFi, DVDSports, DVDTV, DVDWar, DVDWest, EastPhil, Education, Engineer, Erotica, Family, FashBeauty, Fiction, Fitness, ForLang, Games, Gardening, GayLesb, Gender, Genealogy, GraphNovel, Health, Hispanic, History, HolCards, Holiday, HomeArts, HomeRepair, Horror, Humor, IntDesign, Judaica, KidBoard, KidChapt, KidGames, KidNonFic, KidSide, KidSoftw, KidStory, KidVid, LangArts, LargePrnt, Law, LitCrit, Magazines, Manga, Math, Medicine, Memoirs, Metaphysic, Military, MindBody, Mystery, MythFolk, NativAmer, Nature, Notecards, Outdoors, Parenting, PerfArts, Pets, Philosophy, Photo, Poetry, PoliSci, Psych, Records, Reference, Regional, Religion, Romance, Science, SciFi, SelfHelp, Sidelines, SocSci, SoftApps, SoftGames, Spanish, Sports, Stash, Stationery, SuperBuy, TeenFic, Toys, Trans, Travel, TrueCrime, Video, VidGames, Westerns, WorldHist, YA'
--set @Vendors =  'TEXASBKMNA,TEXASBKMNB'--'IDTEXASBOO, IDTXBMARKD, IDTXBKAUDI, IDTXBKSOFT, IDTXBKSTAP' --'IDCROWNPOI, IDCROWNB&C'
--set @Stores = '00001,00002,00003,00046,00049,00083,00109'

--set @StartDate='7/1/2015'
--set @EndDate='7/25/2016'

--exec GetSTOCData @Vendors,@SectionCodes,@SectionX,@Stores,@StoreX,@Tags,@TagX

set @StartDate=convert(varchar(10),@StartDate,101)
set @EndDate=convert(varchar(10),@EndDate,101)

--declare @wks as decimal
--set @wks = 4

----Create temp tables to store parameter values....................
create table #tmpVendors(VendorID varchar(30))
insert into #tmpVendors
select distinct sID from dbo.FN_STOC_ListStringToTable (@Vendors)
create table #tmpSections(Sections varchar(30))
insert into #tmpSections
select distinct sID from dbo.FN_STOC_ListStringToTable (@SectionCodes)
create table #tmpStores(Stores varchar(30))
insert into #tmpStores
select distinct sID from dbo.FN_STOC_ListStringToTable (@Stores)
----.................................................................

----add supplies section code to ensure they get returned..................................................................
if exists(select vendorID from #tmpVendors where VendorID = 'WHPBSUPPLY') begin insert into #tmpSections select '' union select 'NONE' end

----Build query string based on parameter inputs..............................................................
declare @QueryString nvarchar(max),@WhereClause nvarchar(max), @SectionClause nvarchar(max),@StoreClause nvarchar(max), @TagClause nvarchar(max)

set @QueryString = 'insert into #TEASER_WORK_TBL select r.LocationNo,r.District,r.Title,right(''00000000000000000000'' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank,r.SectionQty,r.PMRateOfSale from dbo.STOC_TeaserData r with (nolock) '
set @WhereClause = ' where r.vendorid in (select distinct VendorID from #tmpVendors) '

if @SectionX = 0 
	begin 
		set @SectionClause = ' and r.sectioncode in (select distinct Sections from #tmpSections) '
	end
else
	begin
		set @SectionClause = ' and r.sectioncode not in (select distinct Sections from #tmpSections) '
	end
	
if @StoreX = 0
	begin
		set @StoreClause = ' and r.locationno in (select distinct Stores from #tmpStores) '
	end
else
	begin
		set @StoreClause = ' and r.locationno not in (select distinct Stores from #tmpStores) '
	end
	
if @TagX = 0
	begin
		set @TagClause = ''
	end
else
	begin
		set @TagClause = ''
	end

set @QueryString = @QueryString + @WhereClause + @SectionClause + @StoreClause
----....................................................................................................................

--select @QueryString 
EXECUTE sp_executeSQL @QueryString 
--select * from #TEASER_WORK_TBL
/*****************************************************************************************************************************************************************
***GET DATA FROM ROLL-UP TABLE BASED ON PARAMETERS....
*****************************************************************************************************************************************************************/
--insert into #TEASER_WORK_TBL
--select r.LocationNo,r.District,r.Title,right('00000000000000000000' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,
--	r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,
--	r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
--from dbo.STOC_TeaserData r with (nolock) 
--where r.vendorid in (select distinct sID from dbo.FN_STOC_ListStringToTable (@Vendors)) and r.sectioncode in (select distinct sID from dbo.FN_STOC_ListStringToTable (@SectionCodes))
--		and r.LocationNo in (select distinct sID from dbo.FN_STOC_ListStringToTable (@Stores))
--/*****************************************************************************************************************************************************************
--***GET THE RESULTS.....
--*****************************************************************************************************************************************************************/
--select twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,max(twt.PreviousItemCodes)[PreviousItemCodes],twt.VendorID,twt.SectionCode,twt.Price,min(twt.InitialStoreDate)[InitialStoreDate],sum(isnull(twt.InitialQty,0)) [InitialQty],sum(isnull(twt.SoldInPeriod,0)) [Sold-SLO],sum(isnull(twt.totalsold,0))[TotalSold],sum(isnull(twt.QtyOnHand,0))[QtyOnHand],
--	sum(ISNULL(waq.AvailableQty ,0))[WMSAvailableQty],sum(isnull(twt.TransferredOut,0)) [Transfers-SLO],isnull(max(twt.lastsaledate),max(twt.lastsaledate))[LastSaleDate],sum(isnull(twt.TotalRcvd,0))[TotalRcvd],max(twt.LastReorderDate)[LastReorderDate],sum(twt.Pending)[Pending],
--	case when sum(isnull(twt.LastQty,0))=sum(isnull(twt.ShipQty,0)) and sum(isnull(twt.Pending,0))=0 and sum(isnull(twt.TotalRcvd,0))<>0 then case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)))<= 0 then 0 else case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0))) < sum(ISNULL(waq.AvailableQty ,0)) then sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)) else sum(ISNULL(waq.AvailableQty ,0)) end end
--		when sum(isnull(twt.ShipQty,0))=0 or sum(isnull(twt.Pending,0))<>0 then 0 else case when sum(isnull(twt.SoldInPeriod,0)) > sum(ISNULL(waq.AvailableQty ,0)) then sum(ISNULL(waq.AvailableQty ,0)) else sum(isnull(twt.SoldInPeriod,0)) end end [SuggestedOrderQty],
--	--sum(isnull(twt.SuggestedOrderQty,0))[SuggestedOrderQty],
--	0 [OnOrderQty],
--	sum(isnull(twt.markdowns,0))[Markdowns-SLO],sum(isnull(twt.RO_CNT,0))[RO_CNT],sum(isnull(twt.LastQty,0))[LastQty],sum(isnull(twt.ShipQty,0))[ShipQty-SLO],twt.ISBN,sum(isnull(twt.XRefQty,0))[XRefQty],
--	ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate],ISNULL(src.RequisitionNo,'NA')[CurrentReqNo],ISNULL(src.status,'NA')[ReqStatus],
--	ISNULL(src.Locked,'N')[ReqLock],ISNULL(src.LockedBy,'')[ReqLockBy],ISNULL('','')[ItemTags],
--	--twt.NextOrderDate,
--	twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
--from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
--	left join STOC_Reorder_Control src on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
--group by twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
--	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(src.status,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
--order by twt.title,twt.District,twt.LocationNo


declare @QueryString2 nvarchar(max)

set @QueryString2 = 'insert into #TEASER_WORK_TBL
select sh.LocationNo,l.DistrictCode,pm.Title,pm.ItemCode,''''[PreviousItemCodes],RIGHT(sd.ItemCode,8)[ReorderItemCode],case when isnull(pm.PurchaseFromVendorID,'''')='''' then pm.VendorID else pm.PurchaseFromVendorID end [VendorID],pm.SectionCode,1[ItemCodeCount],pm.Cost,pm.Price,
		''''[InitialStoreDate],0[InitialQty],0[QtyOnHand],0[TotalRcvd],''''[LastReorderDate],0[Pending],0[RO_CNT],0[LastQty],0[ShipQty],pm.ISBN,0[XRefQty],l.LocationID,0[SuggestedOrderQty],
				0[markdowns],''''[LastSaleDate],0[TransferredOut],0[SoldInPeriod],0[TotalSold],''''[NextOrderDate],pmd.UnitsPerCase[CaseQty],0[RateOfSale],0[PercentSold],''''[SalesRank],0[SectionQty],0[PMRateOfSale]
from STOC_Reorder_Control src with(nolock) inner join STOC_Requisition_Dtl sd with (nolock) on src.RequisitionNo=sd.RequisitionNo
			inner join STOC_Requisition_Hdr sh with(nolock) on sd.RequisitionNo=sh.RequisitionNo
			inner join [HPB_Prime].[dbo].[Locations] l with(nolock) on l.LocationNo=src.StoreNo
			inner join [HPB_Prime].[dbo].[ProductMaster] pm with(nolock) on pm.ItemCode=sd.ItemCode
			inner join [HPB_Prime].[dbo].[ProductMasterDist] pmd with(nolock) on pmd.ItemCode=pm.ItemCode
			left outer join #TEASER_WORK_TBL twt with(nolock) on right(''00000000000000000000'' + twt.ReorderItemCode, 20)  = sd.itemcode and twt.LocationNo=sh.locationno
where sh.Status between 20 and 34 '
	--and sd.ItemCode not in (select  right(''00000000000000000000'' + ReorderItemCode, 20) from #TEASER_WORK_TBL)
	--and sh.VendorID in (select VendorID from #TEASER_WORK_TBL) '
	--and sh.LocationNo in (select Stores from #tmpStores) and pm.SectionCode in (select SectionCode from #tmpSections)'
	+ ' and twt.ReorderItemCode is null and twt.LocationNo is not null '
	+ replace(@StoreClause,'r.','sh.') + REPLACE(@SectionClause,'r.','pm.')

EXECUTE sp_executeSQL @QueryString2 
----------;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

select twt.RowID,twt.LocationNo,twt.District,twt.ReorderItemCode,twt.Title,twt.VendorID,twt.SectionCode,isnull(twt.SectionQty,0)[SectionQty],cast(twt.Cost as decimal(12,2))[Cost],cast(twt.Price as decimal(12,2))[Price],
	isnull(ip.MrkDwnRange,0)[MrkDwnRange],cast(isnull(ip.TransInRange,0) as varchar(10)) +' / '+ cast(isnull(ip.TransOutRange,0)as varchar(10))[TransRange],isnull(twt.TotalSold,0)[TotalSold],isnull(ip.SoldRange,0)[SoldRange],
	sum(isnull(twt.QtyOnHand,0))[QtyOnHand],sum(twt.Pending)[EnRoute],sum(isnull(srd.requestedQty,0))[OnOrderQty],	
	case when exists(select VendorID from [$(HPB_Prime)].[dbo].[VendorMaster] where VendorID = twt.VendorID and UserChar30 = 'TTBReorder') then
		case when sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) >0 then
		case when sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) > sum(ISNULL(waq.AvailableQty ,0)) 
						then sum(ISNULL(waq.AvailableQty ,0)) 
						else sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) end 
		else 0 end
	else 
		case when sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) <= 0 
				then 0-- sum(isnull(twt.SoldInPeriod,0)) 
              else sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) end
	end [SuggestedQty],	 
	isnull(sum(ISNULL(waq.AvailableQty ,0))-(select isnull(sum(isnull(requestedQty,0)),0) from STOC_Requisition_Dtl with (nolock) where itemcode = right('00000000000000'+twt.ReorderItemCode,20) and status <= 35),0)[WMSAvailableQty],
	ISNULL('','')[ItemTags],ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate],ISNULL(src.RequisitionNo,'NA')[CurrentReqNo],
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss.statusname,'NA') end[ReqStatus],
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss2.statusname,'NA') end[LineStatus],
	ISNULL(src.Locked,'N')[ReqLock],ISNULL(src.LockedBy,'')[ReqLockBy],twt.CaseQty,isnull(srd.PONumber,'NA')[PONumber]	
from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq with (nolock) on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
	left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
	left join STOC_Requisition_Dtl srd with (nolock) on src.requisitionno = srd.requisitionno and srd.itemcode = right('00000000000000'+twt.ReorderItemCode,20)
	left join STOC_Status ss with (nolock) on src.status = ss.statuscode
	left join STOC_Status ss2 with (nolock) on isnull(srd.Status,Case when isnull(src.Status,100) > 20 then src.Status else 10 end) = ss2.statuscode
	left join [$(HPB_Prime)].[dbo].[VendorMaster] v with (nolock) on twt.VendorID=v.VendorID
	left join (select sip.ItemCode,sip.LocationNo,SUM(sip.Sold)[SoldRange],SUM(sip.MrkDwn)[MrkDwnRange],SUM(sip.Transoutqty)[TransOutRange],SUM(sip.Transinqty)[TransInRange] from STOC_WeeklySMT sip with(nolock) where sip.StartDate>=@StartDate and Sip.EndDate<=@EndDate group by sip.ItemCode,sip.LocationNo) ip on twt.LocationNo=ip.LocationNo and right('00000000000000'+twt.ReorderItemCode,20)=ip.ItemCode 
group by twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss.statusname,'NA') end,
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss2.statusname,'NA') end,ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),isnull(srd.PONumber,'NA'),
	isnull(twt.TotalSold,0),isnull(twt.SectionQty,0),isnull(ip.SoldRange,0),isnull(ip.MrkDwnRange,0),cast(isnull(ip.TransInRange,0) as varchar(10)) +' / '+ cast(isnull(ip.TransOutRange,0)as varchar(10))
order by twt.title,twt.District,twt.LocationNo


	
select twt.RowID, '' [LocationNo],'' [District],'' [ReorderItemCode],'' [PreviousItemCodes],'' [ISBN/UPC],'' [InitialStoreDate],'' [LastSaleDate],
	'' [TotalRcvd],'' [PercentSold-PY],'' [InitialQty],'' [Weekly-ROS],'' [LastReorderDate],'' [LastQty],'' [CaseQty],'' [SalesRank],'' [Life-ROS],
	'' [Sold-SLO],'' [Markdowns-SLO],'' [Transfers-SLO],'' [ShipQty-SLO],'' [RequisitionDueDate]
from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq with (nolock) on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
	left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
	left join STOC_Status ss with (nolock) on src.status = ss.statuscode
group by twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),twt.CaseQty
order by twt.title,twt.District,twt.LocationNo

--/*****************************************************************************************************************************************************************
--***CLEAN UP.....
--*****************************************************************************************************************************************************************/

DROP TABLE #TEASER_WORK_TBL
drop table #tmpVendors
drop table #tmpSections
drop table #tmpStores

END
GO
PRINT N'Altering [dbo].[GetSTOCData_v2]...';


GO
-- =============================================
-- Author:		<Joey B>
-- Create date: <6/12/2012>
-- Description:	<Returns reorder data to STOC application>
-- =============================================
ALTER PROCEDURE [dbo].[GetSTOCData_v2]
	@Vendors nvarchar(max),@SectionCodes nvarchar(max),@SectionX bit,@Stores nvarchar(max),@StoreX bit,@Tags nvarchar(max),@TagX bit
AS
BEGIN


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[TEASER_WORK_TBL]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	DROP TABLE #TEASER_WORK_TBL
CREATE TABLE #TEASER_WORK_TBL([RowID] int identity(1,1),[LocationNo] [char](5) NULL,[District] [varchar](30) NULL,[Title] [varchar](250) NULL,
	[ItemCode] [varchar](20) NULL, [PreviousItemCodes] [varchar] (100),[ReorderItemCode] [varchar](10) NULL,[VendorID] [varchar](20) NULL,[SectionCode] [varchar](20) NULL,[ItemCodeCount] [int] NULL,
	[Cost] [money] NULL,[Price] [money] NULL,[InitialStoreDate] [datetime] NULL,[InitialQty] [int] NULL,[QtyOnHand] [int] NULL,[TotalRcvd] [int] NULL,[LastReorderDate] [datetime] NULL,
	[Pending] [int] NULL,[RO_CNT] [int] NULL,[LastQty] [int] NULL,[ShipQty] [int] NULL,[ISBN] [varchar](20) NULL,[XRefQty] [int] NULL, [LocationID] [char](10) NOT NULL,
	[SuggestedOrderQty] [int] NULL,[Markdowns] [int] NULL,[LastSaleDate] [datetime] NULL,[TransferredOut] [int] NULL,[SoldInPeriod] [int] NULL,[TotalSold] [int] NULL,[NextOrderDate] [datetime] NULL,[CaseQty] [int] NULL,[RateOfSale] [numeric](9,4) NULL,[PercentSold] [numeric](9,2) NULL,[SalesRank] [varchar] (30) NULL) ON [PRIMARY]

CREATE  CLUSTERED  INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID], [ItemCode], [ReorderItemCode])
CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo], [ItemCode], [ReorderItemCode])
CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID], [District], [LocationNo])

--declare @Vendors nvarchar(max),@SectionCodes nvarchar(max),@Stores nvarchar(max),@Tags nvarchar(max)
--declare @SectionX int = 0,@StoreX int = 0,@TagX int = 0

--set @SectionCodes = 'AfrAmer, AltHealth, AmerHist, AncinetHst, Anthro, Antiques, Archeo, Architect, Art, ArtHow, ArtsCrafts, Auto, BCDFic, BCDNonFic, Bibles, Bio, Blank, BTFic, BTNonFic, Bus, Calendar, CDChil, CDChrist, CDClass, CDCountry, CDHoliday, CDJazz, CDMisc, CDNewAge, CDRap, CDRock, CDSoul, CDSoundTr, CDWorld, ChriFi, Christian, CivilWar, ClassLit, Clearance, Collect, Comics, CompSci, Cooking, Cultural, Currents, Diet, Drama, DVDAction, DVDAni, DVDAnime, DVDArtHse, DVDClassic, DVDComedy, DVDCult, DVDDoc, DVDDrama, DVDEd, DVDExer, DVDForeign, DVDHorror, DVDKids, DVDMiscNF, DVDMusic, DVDMusical, DVDNew, DVDSciFi, DVDSports, DVDTV, DVDWar, DVDWest, EastPhil, Education, Engineer, Erotica, Family, FashBeauty, Fiction, Fitness, ForLang, Games, Gardening, GayLesb, Gender, Genealogy, GraphNovel, Health, Hispanic, History, HolCards, Holiday, HomeArts, HomeRepair, Horror, Humor, IntDesign, Judaica, KidBoard, KidChapt, KidGames, KidNonFic, KidSide, KidSoftw, KidStory, KidVid, LangArts, LargePrnt, Law, LitCrit, Magazines, Manga, Math, Medicine, Memoirs, Metaphysic, Military, MindBody, Mystery, MythFolk, NativAmer, Nature, Notecards, Outdoors, Parenting, PerfArts, Pets, Philosophy, Photo, Poetry, PoliSci, Psych, Records, Reference, Regional, Religion, Romance, Science, SciFi, SelfHelp, Sidelines, SocSci, SoftApps, SoftGames, Spanish, Sports, Stash, Stationery, SuperBuy, TeenFic, Toys, Trans, Travel, TrueCrime, Video, VidGames, Westerns, WorldHist, YA'
--set @Vendors =  'IDCROWNPOI'--'IDTEXASBOO, IDTXBMARKD, IDTXBKAUDI, IDTXBKSOFT, IDTXBKSTAP' --'IDCROWNPOI, IDCROWNB&C'
--set @Stores = '00001' --'00001,00002,00046,00049,00083,00109'

--exec GetSTOCData @Vendors,@SectionCodes,@SectionX,@Stores,@StoreX,@Tags,@TagX

----Create temp tables to store parameter values....................
create table #tmpVendors(VendorID varchar(30))
insert into #tmpVendors
select distinct sID from dbo.FN_STOC_ListStringToTable (@Vendors)
create table #tmpSections(Sections varchar(30))
insert into #tmpSections
select distinct sID from dbo.FN_STOC_ListStringToTable (@SectionCodes)
create table #tmpStores(Stores varchar(30))
insert into #tmpStores
select distinct sID from dbo.FN_STOC_ListStringToTable (@Stores)
----.................................................................

----add supplies section code to ensure they get returned..................................................................
if exists(select vendorID from #tmpVendors where VendorID = 'WHPBSUPPLY') begin insert into #tmpSections select '' union select 'NONE' end

----Build query string based on parameter inputs..............................................................
declare @QueryString nvarchar(max),@WhereClause nvarchar(max), @SectionClause nvarchar(max),@StoreClause nvarchar(max), @TagClause nvarchar(max)

set @QueryString = 'insert into #TEASER_WORK_TBL select r.LocationNo,r.District,r.Title,right(''00000000000000000000'' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank from dbo.STOC_TeaserData r with (nolock) '
set @WhereClause = ' where r.vendorid in (select distinct VendorID from #tmpVendors) '

if @SectionX = 0 
	begin 
		set @SectionClause = ' and r.sectioncode in (select distinct Sections from #tmpSections) '
	end
else
	begin
		set @SectionClause = ' and r.sectioncode not in (select distinct Sections from #tmpSections) '
	end
	
if @StoreX = 0
	begin
		set @StoreClause = ' and r.locationno in (select distinct Stores from #tmpStores) '
	end
else
	begin
		set @StoreClause = ' and r.locationno not in (select distinct Stores from #tmpStores) '
	end
	
if @TagX = 0
	begin
		set @TagClause = ''
	end
else
	begin
		set @TagClause = ''
	end

set @QueryString = @QueryString + @WhereClause + @SectionClause + @StoreClause
----....................................................................................................................

--select @QueryString 
EXECUTE sp_executeSQL @QueryString 
--select * from #TEASER_WORK_TBL
/*****************************************************************************************************************************************************************
***GET DATA FROM ROLL-UP TABLE BASED ON PARAMETERS....
*****************************************************************************************************************************************************************/
--insert into #TEASER_WORK_TBL
--select r.LocationNo,r.District,r.Title,right('00000000000000000000' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,
--	r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,
--	r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
--from dbo.STOC_TeaserData r with (nolock) 
--where r.vendorid in (select distinct sID from dbo.FN_STOC_ListStringToTable (@Vendors)) and r.sectioncode in (select distinct sID from dbo.FN_STOC_ListStringToTable (@SectionCodes))
--		and r.LocationNo in (select distinct sID from dbo.FN_STOC_ListStringToTable (@Stores))
--/*****************************************************************************************************************************************************************
--***GET THE RESULTS.....
--*****************************************************************************************************************************************************************/
--select twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,max(twt.PreviousItemCodes)[PreviousItemCodes],twt.VendorID,twt.SectionCode,twt.Price,min(twt.InitialStoreDate)[InitialStoreDate],sum(isnull(twt.InitialQty,0)) [InitialQty],sum(isnull(twt.SoldInPeriod,0)) [Sold-SLO],sum(isnull(twt.totalsold,0))[TotalSold],sum(isnull(twt.QtyOnHand,0))[QtyOnHand],
--	sum(ISNULL(waq.AvailableQty ,0))[WMSAvailableQty],sum(isnull(twt.TransferredOut,0)) [Transfers-SLO],isnull(max(twt.lastsaledate),max(twt.lastsaledate))[LastSaleDate],sum(isnull(twt.TotalRcvd,0))[TotalRcvd],max(twt.LastReorderDate)[LastReorderDate],sum(twt.Pending)[Pending],
--	case when sum(isnull(twt.LastQty,0))=sum(isnull(twt.ShipQty,0)) and sum(isnull(twt.Pending,0))=0 and sum(isnull(twt.TotalRcvd,0))<>0 then case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)))<= 0 then 0 else case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0))) < sum(ISNULL(waq.AvailableQty ,0)) then sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)) else sum(ISNULL(waq.AvailableQty ,0)) end end
--		when sum(isnull(twt.ShipQty,0))=0 or sum(isnull(twt.Pending,0))<>0 then 0 else case when sum(isnull(twt.SoldInPeriod,0)) > sum(ISNULL(waq.AvailableQty ,0)) then sum(ISNULL(waq.AvailableQty ,0)) else sum(isnull(twt.SoldInPeriod,0)) end end [SuggestedOrderQty],
--	--sum(isnull(twt.SuggestedOrderQty,0))[SuggestedOrderQty],
--	0 [OnOrderQty],
--	sum(isnull(twt.markdowns,0))[Markdowns-SLO],sum(isnull(twt.RO_CNT,0))[RO_CNT],sum(isnull(twt.LastQty,0))[LastQty],sum(isnull(twt.ShipQty,0))[ShipQty-SLO],twt.ISBN,sum(isnull(twt.XRefQty,0))[XRefQty],
--	ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate],ISNULL(src.RequisitionNo,'NA')[CurrentReqNo],ISNULL(src.status,'NA')[ReqStatus],
--	ISNULL(src.Locked,'N')[ReqLock],ISNULL(src.LockedBy,'')[ReqLockBy],ISNULL('','')[ItemTags],
--	--twt.NextOrderDate,
--	twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
--from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
--	left join STOC_Reorder_Control src on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
--group by twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
--	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(src.status,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
--order by twt.title,twt.District,twt.LocationNo


declare @QueryString2 nvarchar(max)

set @QueryString2 = 'insert into #TEASER_WORK_TBL
select sh.LocationNo,l.DistrictCode,pm.Title,pm.ItemCode,''''[PreviousItemCodes],RIGHT(sd.ItemCode,8)[ReorderItemCode],case when isnull(pm.PurchaseFromVendorID,'''')='''' then pm.VendorID else pm.PurchaseFromVendorID end [VendorID],pm.SectionCode,1[ItemCodeCount],pm.Cost,pm.Price,
		''''[InitialStoreDate],0[InitialQty],0[QtyOnHand],0[TotalRcvd],''''[LastReorderDate],0[Pending],0[RO_CNT],0[LastQty],0[ShipQty],pm.ISBN,0[XRefQty],l.LocationID,0[SuggestedOrderQty],
				0[markdowns],''''[LastSaleDate],0[TransferredOut],0[SoldInPeriod],0[TotalSold],''''[NextOrderDate],pmd.UnitsPerCase[CaseQty],0[RateOfSale],0[PercentSold],''''[SalesRank]
from STOC_Reorder_Control src with(nolock) inner join STOC_Requisition_Dtl sd with (nolock) on src.RequisitionNo=sd.RequisitionNo
			inner join STOC_Requisition_Hdr sh with(nolock) on sd.RequisitionNo=sh.RequisitionNo
			inner join [HPB_Prime].[dbo].[Locations] l with(nolock) on l.LocationNo=src.StoreNo
			inner join [HPB_Prime].[dbo].[ProductMaster] pm with(nolock) on pm.ItemCode=sd.ItemCode
			inner join [HPB_Prime].[dbo].[ProductMasterDist] pmd with(nolock) on pmd.ItemCode=pm.ItemCode
where sh.Status between 20 and 34 
	and sd.ItemCode not in (select  right(''00000000000000000000'' + ReorderItemCode, 20) from #TEASER_WORK_TBL)
	and sh.VendorID in (select VendorID from #TEASER_WORK_TBL) '
	--and sh.LocationNo in (select Stores from #tmpStores) and pm.SectionCode in (select SectionCode from #tmpSections)'
	+ replace(@StoreClause,'r.','sh.') + REPLACE(@SectionClause,'r.','pm.')

EXECUTE sp_executeSQL @QueryString2 
----------;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


select twt.RowID, twt.LocationNo,twt.District,twt.ReorderItemCode,twt.Title,cast(twt.Cost as decimal(12,2))[Cost],cast(twt.Price as decimal(12,2))[Price],sum(isnull(twt.SoldInPeriod,0)) [Sold-SLO],sum(isnull(twt.QtyOnHand,0))[QtyOnHand],sum(twt.Pending)[EnRoute],
	case when exists(select VendorID from [$(HPB_Prime)].[dbo].[VendorMaster] where VendorID = twt.VendorID and UserChar30 = 'TTBReorder') then
		case when sum(isnull(twt.LastQty,0))=sum(isnull(twt.ShipQty,0)) and sum(isnull(twt.Pending,0))=0 and sum(isnull(twt.TotalRcvd,0))<>0 then case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)))<= 0 then 0 else case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0))) < sum(ISNULL(waq.AvailableQty ,0)) then sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)) else sum(ISNULL(waq.AvailableQty ,0)) end end
			when sum(isnull(twt.ShipQty,0))=0 or sum(isnull(twt.Pending,0))<>0 then 0 else case when sum(isnull(twt.SoldInPeriod,0)) > sum(ISNULL(waq.AvailableQty ,0)) then sum(ISNULL(waq.AvailableQty ,0)) else sum(isnull(twt.SoldInPeriod,0)) end end --[SuggestedQty],
	else 
		case when sum(isnull(twt.LastQty,0))=sum(isnull(twt.ShipQty,0)) and sum(isnull(twt.Pending,0))=0 and sum(isnull(twt.TotalRcvd,0))<>0 then case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)))<= 0 then 0 else (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0))) end
			when sum(isnull(twt.ShipQty,0))=0 or sum(isnull(twt.Pending,0))<>0 then 0 else sum(isnull(twt.SoldInPeriod,0)) end 
	end [SuggestedQty],
	--case when sum(isnull(twt.LastQty,0))=sum(isnull(twt.ShipQty,0)) and sum(isnull(twt.Pending,0))=0 and sum(isnull(twt.TotalRcvd,0))<>0 then case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)))<= 0 then 0 else case when (sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0))) < sum(ISNULL(waq.AvailableQty ,0)) then sum(isnull(twt.InitialQty,0)) - sum(isnull(twt.QtyOnHand,0)) else sum(ISNULL(waq.AvailableQty ,0)) end end
	--	when sum(isnull(twt.ShipQty,0))=0 or sum(isnull(twt.Pending,0))<>0 then 0 else case when sum(isnull(twt.SoldInPeriod,0)) > sum(ISNULL(waq.AvailableQty ,0)) then sum(ISNULL(waq.AvailableQty ,0)) else sum(isnull(twt.SoldInPeriod,0)) end end [SuggestedOrderQty],
	sum(isnull(srd.requestedQty,0))[OnOrderQty],
	isnull(sum(ISNULL(waq.AvailableQty ,0))-(select isnull(sum(isnull(requestedQty,0)),0) from STOC_Requisition_Dtl with (nolock) where itemcode = right('00000000000000'+twt.ReorderItemCode,20) and status <= 35),0)[WMSAvailableQty],
	--0 [OnOrderQty],sum(ISNULL(waq.AvailableQty ,0))[WMSAvailableQty],
	twt.VendorID,twt.SectionCode,ISNULL('','')[ItemTags],
	ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate],ISNULL(src.RequisitionNo,'NA')[CurrentReqNo],--ISNULL(ss.statusname,'NA')[ReqStatus],ISNULL(ss2.statusname,'NA')[LineStatus],
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss.statusname,'NA') end[ReqStatus],
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss2.statusname,'NA') end[LineStatus],
	ISNULL(src.Locked,'N')[ReqLock],ISNULL(src.LockedBy,'')[ReqLockBy],twt.CaseQty,isnull(srd.PONumber,'NA')[PONumber]
from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq with (nolock) on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
	left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
	left join STOC_Requisition_Dtl srd with (nolock) on src.requisitionno = srd.requisitionno and srd.itemcode = right('00000000000000'+twt.ReorderItemCode,20)
	left join STOC_Status ss with (nolock) on src.status = ss.statuscode
	left join STOC_Status ss2 with (nolock) on isnull(srd.Status,Case when isnull(src.Status,100) > 20 then src.Status else 10 end) = ss2.statuscode
	left join [$(HPB_Prime)].[dbo].[VendorMaster] v with (nolock) on twt.VendorID=v.VendorID
group by twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),--ISNULL(ss.statusname,'NA'),ISNULL(ss2.statusname,'NA'),
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss.statusname,'NA') end,
	case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss2.statusname,'NA') end,
	ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),isnull(srd.PONumber,'NA')
order by twt.title,twt.District,twt.LocationNo

--select twt.RowID, twt.LocationNo,twt.District,twt.ReorderItemCode,max(twt.PreviousItemCodes)[PreviousItemCodes],twt.PercentSold [PercentSold-PY],sum(isnull(twt.markdowns,0))[Markdowns-SLO],
--	sum(isnull(twt.TransferredOut,0)) [Transfers-SLO],twt.ISBN [ISBN/UPC],max(twt.lastsaledate)[LastSaleDate],twt.RateOfSale [Weekly-ROS],min(twt.InitialStoreDate)[InitialStoreDate],sum(isnull(twt.InitialQty,0)) [InitialQty],
--	max(twt.LastReorderDate)[LastReorderDate],sum(isnull(twt.LastQty,0))[LastQty],twt.CaseQty,sum(isnull(twt.ShipQty,0))[ShipQty-SLO],
--	ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate],twt.SalesRank
--from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
--	left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
--	left join STOC_Status ss with (nolock) on src.status = ss.statuscode
--group by twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
--	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
--order by twt.title,twt.District,twt.LocationNo

select twt.RowID, '' [LocationNo],'' [District],'' [ReorderItemCode],'' [PreviousItemCodes],'' [PercentSold-PY],'' [Markdowns-SLO],
	'' [Transfers-SLO],'' [ISBN/UPC],'' [LastSaleDate],'' [Weekly-ROS],'' [InitialStoreDate],'' [InitialQty],
	'' [LastReorderDate],'' [LastQty],'' [CaseQty],'' [ShipQty-SLO],
	'' [RequisitionDueDate],'' [SalesRank]
from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq with (nolock) on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
	left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
	left join STOC_Status ss with (nolock) on src.status = ss.statuscode
group by twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
	,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),twt.CaseQty
order by twt.title,twt.District,twt.LocationNo

--/*****************************************************************************************************************************************************************
--***CLEAN UP.....
--*****************************************************************************************************************************************************************/
DROP TABLE #TEASER_WORK_TBL
drop table #tmpVendors
drop table #tmpSections
drop table #tmpStores

END
GO
PRINT N'Altering [dbo].[GetVXData]...';


GO
-- =============================================
-- Author:		<Joey B>
-- Create date: <10/24/2012>
-- Description:	<Returns reorder data to VX application>
-- =============================================
ALTER PROCEDURE [dbo].[GetVXData]
 	 @Vendors NVARCHAR(MAX)
	,@SectionCodes NVARCHAR(MAX)
	,@SectionX BIT
	,@Stores NVARCHAR(MAX)
	,@StoreX BIT
	,@Tags NVARCHAR(MAX)
	,@TagX BIT
AS
BEGIN
	IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[TEASER_WORK_TBL]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
		DROP TABLE #TEASER_WORK_TBL

	CREATE TABLE #TEASER_WORK_TBL
	(
		 [RowID] INT IDENTITY(1,1)
		,[LocationNo] CHAR(5) NULL
		,[District] VARCHAR(30) NULL
		,[Title] VARCHAR(250) NULL
		,[ItemCode] VARCHAR(20) NULL
		,[PreviousItemCodes] VARCHAR(100)
		,[ReorderItemCode] VARCHAR(10) NULL
		,[VendorID] VARCHAR(20) NULL
		,[SectionCode] VARCHAR(20) NULL
		,[ItemCodeCount] INT NULL
		,[Cost] MONEY NULL
		,[Price] MONEY NULL
		,[InitialStoreDate] DATETIME NULL
		,[InitialQty] INT NULL
		,[QtyOnHand] INT NULL
		,[TotalRcvd] INT NULL
		,[LastReorderDate] DATETIME NULL
		,[Pending] INT NULL
		,[RO_CNT] INT NULL
		,[LastQty] INT NULL
		,[ShipQty] INT NULL
		,[ISBN] VARCHAR(20) NULL
		,[XRefQty] INT NULL
		,[LocationID] CHAR(10) NOT NULL
		,[SuggestedOrderQty] INT NULL
		,[Markdowns] INT NULL
		,[LastSaleDate] DATETIME NULL
		,[TransferredOut] INT NULL
		,[SoldInPeriod] INT NULL
		,[TotalSold] INT NULL
		,[NextOrderDate] DATETIME NULL
		,[CaseQty] INT NULL
		,[RateOfSale] NUMERIC(9,4) NULL
		,[PercentSold] NUMERIC(9,2) NULL
		,[SalesRank] VARCHAR (30) NULL
		,[XRefs] VARCHAR (10) NULL
		,[PendXRef] INT NULL
		,[SoldXRef] INT NULL
		,[ISBNSold] INT NULL) ON [PRIMARY]

	CREATE  CLUSTERED  INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID], [District], [LocationNo])

	----Create temp tables to store parameter values....................
	CREATE TABLE #tmpVendors(VendorID varchar(30))
	CREATE TABLE #tmpSections(Sections varchar(30))
	CREATE TABLE #tmpStores(Stores varchar(30))
	
	INSERT INTO #tmpVendors
		SELECT sID 
		FROM dbo.FN_STOC_ListStringToTable(@Vendors)
		GROUP BY sID
	INSERT INTO #tmpSections
		SELECT sID 
		FROM dbo.FN_STOC_ListStringToTable(@SectionCodes)
		GROUP BY sID
	INSERT INTO #tmpStores
		SELECT sID 
		FROM dbo.FN_STOC_ListStringToTable(@Stores)
		GROUP BY sID
	----.................................................................

	----Build query string based on parameter inputs..............................................................
	DECLARE	 @QueryString NVARCHAR(MAX)
			,@WhereClause NVARCHAR(MAX)
			,@SectionClause NVARCHAR(MAX)
			,@StoreClause NVARCHAR(MAX)
			,@TagClause NVARCHAR(MAX)

	SELECT	 @QueryString = 'INSERT INTO #TEASER_WORK_TBL SELECT r.LocationNo,r.District,r.Title,RIGHT(REPLICATE''0'',20) + r.ItemCode, 20) AS [ItemCode]' +
							',r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty' +
							',r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty' +
							',r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,' +
							'r.SalesRank,(CAST(r.XrefQty as varchar(5))+ '' / '' + CAST(r.SIPSQOH as varchar(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) ' +
							'FROM dbo.STOC_TeaserData r WITH (NOLOCK) '
			,@WhereClause = ' WHERE r.vendorid in (SELECT VendorID FROM #tmpVendors) '

	IF @SectionX = 0 
		BEGIN 
			SET @SectionClause = ' AND r.sectioncode IN (SELECT Sections FROM #tmpSections) '
		END
	ELSE
		BEGIN
			SET @SectionClause = ' AND r.sectioncode NOT IN (SELECT Sections FROM #tmpSections) '
		END
		
	IF @StoreX = 0
		BEGIN
			SET @StoreClause = ' AND r.locationno IN (SELECT Stores FROM #tmpStores) '
		END
	ELSE
		BEGIN
			SET @StoreClause = ' AND r.locationno not IN (SELECT Stores FROM #tmpStores) '
		END
		
	IF @TagX = 0
		BEGIN
			SET @TagClause = ''
		END
	ELSE
		BEGIN
			SET @TagClause = ''
		END
	
	SET @QueryString = @QueryString + @WhereClause + @SectionClause + @StoreClause
	----....................................................................................................................

	--select @QueryString 
	EXECUTE sp_executeSQL @QueryString 
	--select * from #TEASER_WORK_TBL
	/*****************************************************************************************************************************************************************
	***GET DATA FROM ROLL-UP TABLE BASED ON PARAMETERS....
	*****************************************************************************************************************************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT	 twt.RowID
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,twt.Title
			,twt.Cost
			,twt.Price
			,CASE LEN(CAST(SUM(ISNULL(twt.SoldInPeriod,0)) AS VARCHAR(6)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' ' 
				ELSE '' 
			 END + CAST(SUM(ISNULL(twt.SoldInPeriod,0)) AS VARCHAR(6))+' / '+ CAST(SUM(ISNULL(twt.SoldXref,0)) AS VARCHAR(6)) AS [Sold-SLO]
			,twt.ISBNSold
			,SUM(ISNULL(twt.QtyOnHand,0)) AS [QtyOnHand]
			,CASE LEN(LEFT(twt.XRefs,CHARINDEX('/',twt.XRefs)-1))
				WHEN 1 THEN '  '+twt.XRefs
				WHEN 2 THEN ' ' +twt.XRefs
				ELSE twt.XRefs 
			 END AS [XRefs]
			,CASE LEN(CAST(SUM(twt.Pending)as varchar(10)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' ' 
				ELSE ''
			 END +CAST(SUM(twt.Pending) AS VARCHAR(10))+' / '+ CAST(SUM(twt.PendXRef) AS VARCHAR(10)) AS [EnRoute]
			,CASE WHEN EXISTS(SELECT VendorID FROM [$(HPB_Prime)].[dbo].[VendorMaster] WHERE VendorID = twt.VendorID AND UserChar30 = 'TTBReorder') 
				THEN
					CASE WHEN SUM(ISNULL(twt.LastQty,0))=SUM(ISNULL(twt.ShipQty,0)) AND SUM(ISNULL(twt.Pending,0))=0 AND SUM(ISNULL(twt.TotalRcvd,0))<>0 
						THEN CASE WHEN (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0)))<= 0 
								  THEN 0 
								  ELSE CASE WHEN (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0))) < SUM(ISNULL(waq.QtyOnHand ,0)) 
											THEN SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0)) 
											ELSE SUM(ISNULL(waq.QtyOnHand ,0)) 
									   END 
							 END
								 WHEN SUM(ISNULL(twt.ShipQty,0))=0 OR SUM(ISNULL(twt.Pending,0))<>0 
								 THEN 0 
								 ELSE CASE WHEN SUM(ISNULL(twt.SoldInPeriod,0)) > SUM(ISNULL(waq.QtyOnHand ,0)) 
										   THEN SUM(ISNULL(waq.QtyOnHand ,0)) 
										   ELSE SUM(ISNULL(twt.SoldInPeriod,0)) 
									  END 
					END 
			  ELSE 
					CASE WHEN SUM(ISNULL(twt.LastQty,0))=SUM(ISNULL(twt.ShipQty,0)) AND SUM(ISNULL(twt.Pending,0))=0 AND SUM(ISNULL(twt.TotalRcvd,0))<>0 
						 THEN CASE WHEN (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0)))<= 0 
								   THEN 0 
								   ELSE (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0))) 
							  END
						  WHEN SUM(ISNULL(twt.ShipQty,0))=0 OR SUM(ISNULL(twt.Pending,0))<>0 
						  THEN 0 
						  ELSE SUM(ISNULL(twt.SoldInPeriod,0)) 
				    END 
			 END AS [SuggestedQty]
			,SUM(ISNULL(srd.requestedQty,0)) AS [OnOrderQty]
			,ISNULL(SUM(ISNULL(waq.QtyOnHand ,0))- ISNULL((SELECT ISNULL(OnOrdQty,0) FROM dbo.FN_VX_GetOnOrdQty_ByWhse(twt.VendorID,twt.ReorderItemCode,twt.LocationNo)),0),0) AS [AvailableQty]
			,SUM(ISNULL(srd.ConfirmedQty,0)) AS [ConfirmedQty]
			,SUM(ISNULL(srd.CanceledQty,0)) AS [CanceledQty]
			,SUM(ISNULL(srd.BackOrderQty,0))[BackOrderQty]
			--,ISNULL(srd.AllowBackOrder,0) as [BackOrder?]
			,CASE WHEN SUM(ISNULL(srd.requestedQty,0))>0 
				  THEN ISNULL(srd.AllowBackOrder,0) 
				  ELSE ISNULL(ev.DftBackOrd,0)
			 END AS [BackOrder?]
			,twt.VendorID
			,twt.SectionCode
			,ISNULL('','') AS [ItemTags]
			,CASE WHEN l.Active = 'N' 
				  THEN 'NA' 
				  ELSE ISNULL(src.PONumber,'NA') 
			 END AS[CurrentPONo]
			,ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo,'NA') end [CurrentReqNo]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname,'NA') end[ReqStatus]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname,'NA') end[LineStatus]
			,ISNULL(src.Locked,'N')[ReqLock],ISNULL(src.LockedBy,'')[ReqLockBy],ISNULL(twt.ISBN,'')[VendorItem]
			--,CASE WHEN (select count(distinct isbnupc) from vwVX_BT_AvailQty where ISBNUPC = twt.ISBN)= 0 then 'X' else '' end [ValidItem]
			,CASE twt.VendorID
				--WHEN  'IIDB&TDISTR' THEN CASE WHEN (SELECT COUNT(ISBNUPC) FROM vwVX_BT_ValidItem WHERE ISBNUPC = twt.ISBN GROUP BY ISBNUPC)= 0 THEN 'X' ELSE '' END
				WHEN  'IDINGRAMDI'  THEN CASE WHEN (SELECT COUNT(ISBNUPC) FROM vwVX_IC_ValidItem WHERE ISBNUPC = twt.ISBN GROUP BY ISBNUPC)= 0 THEN 'X' ELSE '' END
				ELSE ''
			 END AS [ValidItem]
	FROM #TEASER_WORK_TBL twt 
		LEFT JOIN dbo.VX_Reorder_Control src 
			ON twt.VendorID = src.VendorID 
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN dbo.VX_Requisition_Dtl srd 
			ON src.requisitionno = srd.requisitionno 
				AND srd.itemcode = RIGHT(REPLICATE('0',20)+twt.ReorderItemCode,20)
		LEFT JOIN dbo.VX_Status ss 
			ON src.[Status] = ss.statuscode
		LEFT JOIN VX_Status ss2 
			ON ISNULL(srd.[Status],CASE WHEN ISNULL(src.[Status],100) > 20 THEN src.[Status] ELSE 10 END) = ss2.statuscode
		LEFT JOIN dbo.vwVX_IC_AvailQty waq 
			ON waq.ISBNUPC = twt.ISBN 
				AND waq.Warehouse = src.Warehouse
		LEFT JOIN dbo.VX_Locations l 
			ON twt.LocationNo = l.LocationNo
		LEFT JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] ev 
			ON twt.VendorID=ev.VendorID
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN
			,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate,'1900/01/01')
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber,'NA')  END, CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo,'NA') END
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname,'NA') END, CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname,'NA') END
			,ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),ISNULL(srd.AllowBackOrder,0), ISNULL(ev.DftBackOrd,0)
	ORDER BY twt.title,twt.District,twt.LocationNo

	SELECT	 twt.RowID
			,'' AS [LocationNo]
			,'' AS [District]
			,'' AS [ReorderItemCode]
			,'' AS [PreviousItemCodes]
			,'' AS [PercentSold-PY]
			,'' AS [Markdowns-SLO]
			,'' AS [Transfers-SLO]
			,'' AS [ISBN/UPC]
			,'' AS [LastSaleDate]
			,'' AS [Weekly-ROS]
			,'' AS [InitialStoreDate]
			,'' AS [InitialQty]
			,'' AS [LastReorderDate]
			,'' AS [LastQty]
			,'' AS [CaseQty]
			,'' AS [ShipQty-SLO]
			,'' AS [RequisitionDueDate]
			,'' AS [SalesRank]
	FROM #TEASER_WORK_TBL twt 
		LEFT JOIN dbo.VX_Reorder_Control src 
			ON twt.VendorID = src.VendorID 
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN dbo.VX_Requisition_Dtl srd
			ON src.requisitionno = srd.requisitionno 
				AND srd.itemcode = RIGHT(REPLICATE('0',20)+twt.ReorderItemCode,20)
		LEFT JOIN dbo.VX_Status ss 
			ON src.[Status] = ss.statuscode
		-- LEFT JOIN vwVX_BT_AvailQty waq ON waq.ISBNUPC = twt.ISBN and waq.Warehouse = src.Warehouse
		LEFT JOIN dbo.vwVX_IC_AvailQty waq 
			ON waq.ISBNUPC = twt.ISBN
				AND waq.Warehouse = src.Warehouse
	GROUP by twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN
			,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate,'1900/01/01')
			,ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
	ORDER BY twt.title,twt.District,twt.LocationNo

	--/*****************************************************************************************************************************************************************
	--***CLEAN UP.....
	--*****************************************************************************************************************************************************************/
	DROP TABLE #TEASER_WORK_TBL
	DROP TABLE #tmpVendors
	DROP TABLE #tmpSections
	DROP TABLE #tmpStores
END
-----------------------------------------------------------------------------------------------------------------
GO
PRINT N'Altering [dbo].[GetVXPendingApprovals]...';


GO
-- =============================================
-- Author:		<Joey B>
-- CREATE date: <10/29/2012>
-- Description:	<Returns pending approval order data to VX application>
-- =============================================
ALTER PROCEDURE [dbo].[GetVXPendingApprovals]
	 @Vendors NVARCHAR(MAX)
	,@SectionCodes NVARCHAR(MAX)
	,@SectionX bit
	,@Stores NVARCHAR(MAX)
	,@StoreX bit
	,@Tags NVARCHAR(MAX)
	,@TagX bit
AS
BEGIN
	IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[TEASER_WORK_TBL]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
		DROP TABLE #TEASER_WORK_TBL
	CREATE TABLE #TEASER_WORK_TBL
	(
		 [RowID] INT IDENTITY(1,1)
		,[LocationNo] [char](5) NULL
		,[District] VARCHAR(30) NULL
		,[Title] VARCHAR(250) NULL
		,[ItemCode] VARCHAR(20) NULL
		, [PreviousItemCodes] VARCHAR(100),[ReorderItemCode] VARCHAR(10) NULL,[VendorID] VARCHAR(20) NULL,[SectionCode] VARCHAR(20) NULL,[ItemCodeCount] INT NULL,
		[Cost] MONEY NULL,[Price] MONEY NULL,[InitialStoreDate] DATETIME NULL,[InitialQty] INT NULL,[QtyOnHand] INT NULL,[TotalRcvd] INT NULL,[LastReorderDate] DATETIME NULL,
		[Pending] INT NULL,[RO_CNT] INT NULL,[LastQty] INT NULL,[ShipQty] INT NULL,[ISBN] VARCHAR(20) NULL,[XRefQty] INT NULL, [LocationID] [char](10) NOT NULL,
		[SuggestedOrderQty] INT NULL,[Markdowns] INT NULL,[LastSaleDate] DATETIME NULL,[TransferredOut] INT NULL,[SoldInPeriod] INT NULL,[TotalSold] INT NULL,[NextOrderDate] DATETIME NULL,[CaseQty] INT NULL,[RateOfSale] [numeric](9,4) NULL,[PercentSold] [numeric](9,2) NULL,[SalesRank] VARCHAR(30) NULL, [XRefs] VARCHAR(10) NULL, [PendXRef] INT NULL, [SoldXRef] INT NULL, [ISBNSold] INT NULL) ON [PRIMARY]

	CREATE  CLUSTERED  INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID], [District], [LocationNo])

	--DECLARE @Vendors NVARCHAR(MAX),@Stores NVARCHAR(MAX)
	--DECLARE @StoreX int = 0

	--SET @Vendors =  'IDHARPERDI'--'IDTEXASBOO, IDTXBMARKD, IDTXBKAUDI, IDTXBKSOFT, IDTXBKSTAP' --'IDCROWNPOI, IDCROWNB&C'
	--SET @Stores = '00001,00002'


	----CREATE temp tables to store parameter values....................
	CREATE table #tmpVendors(VendorID VARCHAR(30))
	INSERT into #tmpVendors
	SELECT distinct sID FROM dbo.FN_STOC_ListStringToTable (@Vendors)
	CREATE table #tmpStores(Stores VARCHAR(30))
	INSERT into #tmpStores
	SELECT distinct sID FROM dbo.FN_STOC_ListStringToTable (@Stores)
	----.................................................................

	----Build query string based ON parameter inputs..............................................................
	DECLARE @QueryString NVARCHAR(MAX),@WhereClause NVARCHAR(MAX), @StoreClause NVARCHAR(MAX)

	SET @QueryString = 'INSERT into #TEASER_WORK_TBL SELECT r.LocationNo,r.District,r.Title,RIGHT(''00000000000000000000'' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank,(CAST(r.XrefQty AS VARCHAR(5))+ '' / '' + CAST(r.SIPSQOH AS VARCHAR(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) FROM dbo.STOC_TeaserData r with (nolock) '
	SET @WhereClause = ' WHERE r.vendorid IN (SELECT distinct VendorID FROM #tmpVendors) '

	IF @StoreX = 0
		BEGIN
			SET @StoreClause = ' AND r.locationno IN (SELECT distinct Stores FROM #tmpStores) '
		END
	ELSE
		BEGIN
			SET @StoreClause = ' AND r.locationno NOT IN (SELECT distinct Stores FROM #tmpStores) '
		END

	SET @QueryString = @QueryString + @WhereClause + @StoreClause
	----....................................................................................................................

	--SELECT @QueryString 
	EXECUTE sp_executeSQL @QueryString 
	--SELECT * FROM #TEASER_WORK_TBL

	DECLARE @QueryString2 NVARCHAR(MAX)

	SET @QueryString2 = 'INSERT into #TEASER_WORK_TBL ' +
						'SELECT sh.LocationNo,l.DistrictCode,pm.Title,pm.ItemCode,'''' AS [PreviousItemCodes],RIGHT(sd.ItemCode,8) AS [ReorderItemCode] ' +
						',CASE WHEN ISNULL(pm.PurchaseFromVendorID,'''')='''' THEN pm.VendorID ELSE pm.PurchaseFromVendorID END AS [VendorID],pm.SectionCode ' +
						',1 AS [ItemCodeCount],pm.Cost,pm.Price, '''' AS [InitialStoreDate],0 AS [InitialQty],0 AS [QtyOnHand],0 AS [TotalRcvd] ' +
						','''' AS [LastReorderDate],0 AS [Pending],0 AS [RO_CNT],0 AS [LastQty],0 AS [ShipQty],pm.ISBN,0 AS [XRefQty],l.LocationID ' +
						',0 AS [SuggestedOrderQty], 0 AS [markdowns],'''' AS [LastSaleDate],0 AS [TransferredOut],0 AS [SoldInPeriod],0 AS [TotalSold] ' +
						','''' AS [NextOrderDate],pmd.UnitsPerCase AS [CaseQty],0 AS [RateOfSale],0 AS [PercentSold],''NA / NA / NA / NA'' AS [SalesRank] ' +
						',''0 / 0'' AS [XRefs],0 AS [PendXRef],0 AS [SoldXRef],0 AS [ISBNSold] ' +
						'FROM VX_Reorder_Control src WITH(NOLOCK) ' +
						'INNER JOIN VX_Requisition_Dtl sd WITH (NOLOCK) ON src.RequisitionNo=sd.RequisitionNo ' +
						'INNER JOIN VX_Requisition_Hdr sh WITH(NOLOCK) ON sd.RequisitionNo=sh.RequisitionNo ' + 
						'INNER JOIN [HPB_Prime].[dbo].[Locations] l with(nolock) ON l.LocationNo=src.StoreNo ' + 
						'INNER JOIN [HPB_Prime].[dbo].[ProductMaster] pm with(nolock) ON pm.ItemCode=sd.ItemCode ' +
						'INNER JOIN [HPB_Prime].[dbo].[ProductMasterDist] pmd with(nolock) ON pmd.ItemCode=pm.ItemCode ' +
						'WHERE sh.Status BETWEEN 20 AND 60 AND sd.requestedqty > 0 ' +
						'AND sd.ItemCode NOT IN (SELECT RIGHT(REPLICATE(''0'',20) + ReorderItemCode, 20) FROM #TEASER_WORK_TBL) ' +
						'AND sh.VendorID IN (SELECT VendorID FROM #tmpVendors) ' +
						REPLACE(@StoreClause,'r.','sh.') 
	EXECUTE sp_executeSQL @QueryString2 
	--SELECT * FROM #TEASER_WORK_TBL
	/*****************************************************************************************************************************************************************
	***GET DATA FROM ROLL-UP TABLE BASED ON PARAMETERS....
	*****************************************************************************************************************************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT	 twt.RowID
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,twt.Title
			,twt.Cost
			,twt.Price
			,CASE len(CAST(SUM(ISNULL(twt.SoldInPeriod,0))AS VARCHAR(6)))	WHEN 1 THEN '  ' WHEN 2 THEN ' ' ELSE '' END + CAST(SUM(ISNULL(twt.SoldInPeriod,0))AS VARCHAR(6))+' / '+ CAST(SUM(ISNULL(twt.SoldXref,0))AS VARCHAR(6)) AS [Sold-SLO]
			,twt.ISBNSold
			,SUM(ISNULL(twt.QtyOnHand,0)) AS [QtyOnHand]
			,CASE LEN(LEFT(twt.XRefs,CHARINDEX('/',twt.XRefs)-1))			WHEN 1 THEN '  ' WHEN 2 THEN ' ' ELSE '' END + twt.XRefs AS [XRefs]
			,CASE len(CAST(SUM(twt.Pending)AS VARCHAR(10)))					WHEN 1 THEN '  ' WHEN 2 THEN ' ' ELSE '' END + CAST(SUM(twt.Pending)AS VARCHAR(10))+' / '+CAST(SUM(twt.PendXRef)AS VARCHAR(10)) AS [EnRoute]
			,CASE WHEN EXISTS(SELECT VendorID FROM [$(HPB_Prime)].[dbo].[VendorMaster] WHERE VendorID = twt.VendorID AND UserChar30 = 'TTBReorder') 
			 THEN CASE WHEN SUM(ISNULL(twt.LastQty,0))=SUM(ISNULL(twt.ShipQty,0)) AND SUM(ISNULL(twt.Pending,0))=0 AND SUM(ISNULL(twt.TotalRcvd,0))<>0 THEN CASE WHEN (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0)))<= 0 THEN 0 ELSE CASE WHEN (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0))) < SUM(ISNULL(waq.QtyOnHand ,0)) THEN SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0)) ELSE SUM(ISNULL(waq.QtyOnHand ,0)) END END
				WHEN SUM(ISNULL(twt.ShipQty,0))=0 or SUM(ISNULL(twt.Pending,0))<>0 THEN 0 ELSE CASE WHEN SUM(ISNULL(twt.SoldInPeriod,0)) > SUM(ISNULL(waq.QtyOnHand ,0)) THEN SUM(ISNULL(waq.QtyOnHand ,0)) ELSE SUM(ISNULL(twt.SoldInPeriod,0)) END END 
			 ELSE 
			 CASE WHEN SUM(ISNULL(twt.LastQty,0))=SUM(ISNULL(twt.ShipQty,0)) AND SUM(ISNULL(twt.Pending,0))=0 AND SUM(ISNULL(twt.TotalRcvd,0))<>0 THEN CASE WHEN (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0)))<= 0 THEN 0 ELSE (SUM(ISNULL(twt.InitialQty,0)) - SUM(ISNULL(twt.QtyOnHand,0))) END
				WHEN SUM(ISNULL(twt.ShipQty,0))=0 or SUM(ISNULL(twt.Pending,0))<>0 THEN 0 ELSE SUM(ISNULL(twt.SoldInPeriod,0)) END 
			 END AS [SuggestedQty]
			,SUM(ISNULL(srd.requestedQty,0))[OnOrderQty]
			,ISNULL(SUM(ISNULL(waq.QtyOnHand ,0))- ISNULL((SELECT ISNULL(OnOrdQty,0) FROM dbo.FN_VX_GetOnOrdQty_ByWhse(twt.VendorID,twt.ReorderItemCode,twt.LocationNo)),0),0)[AvailableQty]
			,SUM(ISNULL(srd.ConfirmedQty,0))[ConfirmedQty]
			,SUM(ISNULL(srd.CanceledQty,0))[CanceledQty]
			,SUM(ISNULL(srd.BackOrderQty,0))[BackOrderQty]
			--,ISNULL(srd.AllowBackOrder,0) AS [BackOrder?]
			,CASE WHEN SUM(ISNULL(srd.requestedQty,0))>0 THEN ISNULL(srd.AllowBackOrder,0) ELSE ISNULL(ev.DftBackOrd,0)END AS [BackOrder?]
			,twt.VendorID
			,twt.SectionCode
			,ISNULL('','') AS [ItemTags]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber,'NA') END AS[CurrentPONo]
			,ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo,'NA') END AS [CurrentReqNo]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname,'NA') END AS [ReqStatus]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname,'NA') END AS [LineStatus]
			,ISNULL(src.Locked,'N')[ReqLock],ISNULL(src.LockedBy,'')[ReqLockBy],ISNULL(twt.ISBN,'') AS [VendorItem]
			,'' AS [ValidItem]
	FROM #TEASER_WORK_TBL twt 
		INNER JOIN VX_Reorder_Control src 
			ON twt.VendorID = src.VendorID AND twt.LocationNo = src.StoreNo
		INNER JOIN VX_Requisition_Dtl srd 
			ON src.requisitionno = srd.requisitionno AND srd.itemcode = RIGHT('00000000000000'+twt.ReorderItemCode,20)
		INNER JOIN VX_Status ss 
			ON ISNULL(srd.Status,10) = ss.statuscode
		LEFT JOIN VX_Status ss2 
			ON ISNULL(srd.Status,CASE WHEN ISNULL(src.Status,100) > 20 THEN src.Status ELSE 10 END) = ss2.statuscode
		LEFT JOIN vwVX_IC_AvailQty waq 
			ON waq.ISBNUPC = twt.ISBN AND waq.Warehouse = src.Warehouse
		LEFT JOIN VX_Locations l 
			ON twt.LocationNo = l.LocationNo
		LEFT JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] ev 
			ON twt.VendorID=ev.VendorID
	WHERE ss.StatusCode IN (40,98,99)
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN
			,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate,'1900/01/01')
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber,'NA')  END, CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo,'NA') END
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname,'NA') END, CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname,'NA') END
			,ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''), ISNULL(srd.AllowBackOrder,0), ISNULL(ev.DftBackOrd,0)
	ORDER BY twt.title,twt.District,twt.LocationNo

	SELECT	 twt.RowID
			,'' AS [LocationNo]
			,'' AS [District]
			,'' AS [ReorderItemCode]
			,'' AS [PreviousItemCodes]
			,'' AS [PercentSold-PY]
			,'' AS [Markdowns-SLO]
			,'' AS [Transfers-SLO]
			,'' AS [ISBN/UPC]
			,'' AS [LastSaleDate]
			,'' AS [Weekly-ROS]
			,'' AS [InitialStoreDate]
			,'' AS [InitialQty]
			,'' AS [LastReorderDate]
			,'' AS [LastQty]
			,'' AS [CaseQty]
			,'' AS [ShipQty-SLO]
			,'' AS [RequisitionDueDate]
			,'' AS [SalesRank]
	FROM #TEASER_WORK_TBL twt 
		INNER JOIN VX_Reorder_Control src  
			ON twt.VendorID = src.VendorID AND twt.LocationNo = src.StoreNo
		INNER JOIN VX_Requisition_Dtl srd  
			ON src.requisitionno = srd.requisitionno AND srd.itemcode = RIGHT('00000000000000'+twt.ReorderItemCode,20)
		INNER JOIN VX_Status ss 
			ON ISNULL(srd.Status,10) = ss.statuscode
		LEFT JOIN vwVX_IC_AvailQty waq 
			ON waq.ISBNUPC = twt.ISBN AND waq.Warehouse = src.Warehouse
	WHERE ss.StatusCode IN (40,98,99)
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN
			,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA')
			,ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
	ORDER BY twt.title,twt.District,twt.LocationNo

	--/*****************************************************************************************************************************************************************
	--***CLEAN UP.....
	--*****************************************************************************************************************************************************************/
	DROP TABLE #TEASER_WORK_TBL
	DROP TABLE #tmpVendors
	DROP TABLE #tmpStores
END
GO
PRINT N'Altering [dbo].[HPB_CDC_DropShipments]...';


GO
-- =============================================
-- Author:		<Joey B>
-- Create date: <11/8/11>
-- Description:	<Insert Dropshipment data from interface onto SilverBell...>
-- =============================================
ALTER PROCEDURE [dbo].[HPB_CDC_DropShipments]
	
	@xml ntext,
	@File Varchar(50)

AS
BEGIN
	SET NOCOUNT ON;

--local variables and tables....
declare @TmpDropHeader table
	(RowID int identity(1,1),POnumber varchar(30),Reqnumber varchar(30),StoreNo varchar(30),DocDate varchar(50))

declare @TmpDropShipTbl table 
	(RowID int identity(1,1),POnumber varchar(30),Reqnumber varchar(30),FromLoc varchar(10),StoreNo char(5),
		LineItemNo int,ItemCode varchar(20),Quantity int,Cost money,CreateDate datetime)

declare @nRetVal int
declare @idoc int
declare @Location varchar(10)
declare @DocDate varchar(50)
declare @ShipTo varchar(50)
declare @intLoop int
declare @OrdLoopNo varchar(30)
declare @ReqLoopNo varchar(30)
declare @POLoopNo varchar(30)
set @Location = '00944'

begin transaction
--load xml and begin processing....
exec @nRetVal = sp_xml_preparedocument @idoc output, @xml
	set @nRetVal = @@error
	
	insert into @TmpDropHeader(POnumber,Reqnumber,StoreNo,DocDate)
	select POLinkNo,OrderNo,substring(StoreNo,4,3),DocDate
	from openxml(@idoc, '/StoreOrders/StoreOrder',2)
	with(POLinkNo varchar(30),OrderNo varchar(30),StoreNo varchar(30),DocDate varchar(50))

	select @intLoop = (select max(Rowid) from @TmpDropHeader)
	set @nRetVal = @@error
			
while @intLoop > 0
	begin
		--set static variables....
		select @POLoopNo = ltrim(rtrim(substring(POnumber,4,8))), @ReqLoopNo = ltrim(rtrim(substring(Reqnumber,4,8))), 
				@ShipTo = StoreNo, @DocDate = cast(DocDate as datetime), @OrdLoopNo = Reqnumber
		from @TmpDropHeader where RowID = @intLoop
		
		set @nRetVal = @@error
	
		--insert the detail values into the temp table for processing.....
		insert into @TmpDropShipTbl(POnumber,Reqnumber,FromLoc,LineItemNo,StoreNo,ItemCode,Quantity, Cost,CreateDate)
		select @POLoopNo,@ReqLoopNo,@Location,cast(LineNumber as int), @ShipTo, ItemCode, cast(Qty as int), isnull(UnitPrice,0),@DocDate
		from openxml (@idoc, '/StoreOrders/StoreOrder/Details/OrdDetail',2)
		with (OrdKey varchar(30) './OrdKey', LineNumber numeric './LineNumber', ItemCode varchar(50)'./ItemCode', Qty varchar(50) './Qty', UnitPrice money './UnitPrice')
		where OrdKey = @OrdLoopNo
		
		set @nRetVal = @@error
		
		----update HPB item details with accurate cost from productmaster since we send price for non-dropshipments to GP....
		update t
		set t.Cost = pm.Cost 
		from @TmpDropShipTbl t 
			inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm on RIGHT('000000000000' + t.itemcode,20) = pm.ItemCode 
		where pm.userchar15 = 'HPB'

		set @nRetVal = @@error
		
		----bulk insert final details.....
		if (select count(*) from dbo.Dropshipments where POnumber = @POLoopNo) = 0
			begin
				insert into dbo.DropShipments (POnumber,ReqNo,FromLocation,StoreNo,LineItemNo,ItemCode,Quantity,Cost,CreateDate)
				select POnumber,Reqnumber,FromLoc,StoreNo,LineItemNo,ItemCode,Quantity,Cost,CreateDate 
				from @TmpDropShipTbl where Reqnumber = @ReqLoopNo 
			end

		set @nRetVal = @@error
		set @intLoop = @intLoop - 1
	end
							
	exec @nRetVal = sp_xml_removedocument @idoc	
	
	set @nRetVal = @@error

if (@nRetVal <> 0)
	begin
		Rollback transaction
		return @nRetVal
	end

Commit transaction
return @nRetVal

END
GO
PRINT N'Altering [dbo].[RPT_STOC_ReorderCaseItems]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <9/2/2015>
-- Description:	<Return STOC items that are ordered by case by Vendor....>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_STOC_ReorderCaseItems]
	@vendor varchar(15)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	------testing......
	--declare @vendor varchar(15)
	--set @vendor = 'IDUNEMPLOY'

	SELECT pm.*,pmd.[UnitsPerCase] 
	INTO #items
	FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd 
			ON pm.ItemCode=pmd.ItemCode
	WHERE PurchaseFromVendorID = @vendor 
		--AND ISNULL(UnitsPerCase,0)>0

	SELECT	 RIGHT(rd.ItemCode,8)[ItemCode]
			,i.Title
			,SUM(rd.RequestedQty) AS [RequestedQty]
			,(SELECT ISNULL(SUM(RequestedQty),0) FROM STOC_Requisition_Dtl WHERE ItemCode=rd.Itemcode AND Status=30) AS [ApprovedQty]
			,CASE WHEN i.UnitsPerCase =0 
				THEN 0 
				ELSE SUM(rd.RequestedQty)/i.UnitsPerCase END AS [CaseCount]
			,i.UnitsPerCase
			,ISNULL(0,0)[MinOrdQty]
	FROM STOC_Requisition_Hdr rh WITH(NOLOCK) 
		INNER JOIN STOC_Requisition_Dtl rd WITH(NOLOCK) 
			ON rh.RequisitionNo=rd.RequisitionNo
		INNER JOIN #items 
			i ON rd.ItemCode=i.ItemCode 
	WHERE rh.VendorID=@vendor 
		AND rd.[Status]<35 
		AND rd.RequestedQty>0 --AND ISNULL(UnitsPerCase,0)>0
	GROUP BY rd.ItemCode,i.Title,i.UnitsPerCase
	ORDER BY i.Title,RIGHT(rd.ItemCode,8)

	DROP TABLE #items
END
GO
PRINT N'Altering [dbo].[RPT_STOC_ReorderReqs]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8-11-2015>
-- Description:	<STOC reorder requisition report......>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_STOC_ReorderReqs] 
	@reqs VARCHAR(8000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering WITH SELECT statements.
	SET NOCOUNT ON;

	--------Testing............................................
	--declare @reqs VARCHAR(8000)
	--set @reqs = '284395,290563' --'309979,313839,317100,320838,309978,317099,309985,313834,317106,309987,317110,309860,313728,316987,320734,309859,313739,316986,309866,313735,316993,309881,316997'
	----------------------------------------------------------------

	----fill req table............................................................................................................................................................................
	CREATE TABLE #tmpReqs(Reqs VARCHAR(30))

	INSERT INTO #tmpReqs
		SELECT sID 
		FROM dbo.FN_STOC_ListStringToTable (@reqs)
		GROUP BY sID

	----get the results.................................................................................................................................................................................
	SELECT DISTINCT 
		 rh.RequisitionNo
		,rh.LocationNo
		,rh.VendorID
		,rh.PONumber
		,CONVERT(VARCHAR(10),rh.RequisitionDate,121) AS [RequisitionDate]
		,rh.RequestBy
		,rh.ApprovedBy
		,CONVERT(VARCHAR(10),rh.ApprovedDate,121) AS [ApprovedDate]
		,rh.Comments
		,RIGHT(rd.ItemCode,8) AS [ItemCode]
		,pm.Title
		,pmd.VendorItemNo
		,CONVERT(VARCHAR(20),rd.RequestedDate,20) AS [ItemRequestDate]
		,rd.RequestedQty
		,isnull(rd.UnitType,'EA') AS [UnitType]
		,isnull(pmd.UnitsPerCase,0) AS [ConversionQty],
		CASE WHEN ISNULL(pmd.UnitsPerCase,0)<>0 AND rd.RequestedQty<>0 
			THEN rd.RequestedQty/pmd.UnitsPerCase 
			ELSE 0 
		  END AS [CaseQtyToOrder]
		 ,rd.ApprovedBy
		 ,rd.ApprovedDate
		 ,rd.PONumber
		 ,pm.cost
		 ,pm.price
		 ,(pm.cost*rd.RequestedQty) AS [ExtCost]
	FROM dbo.STOC_Requisition_Hdr rh WITH (NOLOCK)
		INNER JOIN dbo.STOC_Requisition_Dtl RD WITH (NOLOCK)
			ON rh.RequisitionNo=rd.RequisitionNo
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm WITH (NOLOCK)
			ON pm.ItemCode=rd.ItemCode
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd WITH (NOLOCK) 
			ON pmd.ItemCode=pm.ItemCode
		INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l WITH (NOLOCK) 
			ON l.LocationNo=rh.LocationNo 
		LEFT JOIN STOC_Status ss WITH (NOLOCK) 
			ON rd.[Status] = ss.statuscode
	WHERE rh.requisitionno IN (SELECT Reqs FROM #tmpReqs) 
		AND ISNULL(rd.[Status],'')<>99
	--order by rh.VendorID,rh.LocationNo,rh.RequisitionNo,pm.Title
	UNION
	SELECT DISTINCT 
		 rh.RequisitionNo
		,rh.LocationNo
		,rh.VendorID
		,rh.PONumber
		,CONVERT(VARCHAR(10),rh.RequisitionDate,121) AS [RequisitionDate]
		,rh.RequestBy
		,rh.ApprovedBy
		,CONVERT(VARCHAR(10),rh.ApprovedDate,121) AS [ApprovedDate]
		,rh.Comments
		,RIGHT(rd.ItemCode,8) AS [ItemCode]
		,pm.Title
		,pmd.VendorItemNo
		,CONVERT(VARCHAR(20),rd.RequestedDate,20) AS [ItemRequestDate]
		,rd.RequestedQty
		,ISNULL(rd.UnitType,'EA') AS [UnitType]
		,ISNULL(pmd.UnitsPerCase,0) AS [ConversionQty]
		,CASE WHEN ISNULL(pmd.UnitsPerCase,0)<>0 AND rd.RequestedQty<>0 
				THEN rd.RequestedQty/pmd.UnitsPerCase 
				ELSE 0 
		 END AS [CaseQtyToOrder]
		 ,rd.ApprovedBy
		 ,rd.ApprovedDate
		 ,rd.PONumber
		 ,pm.cost
		 ,pm.price
		 ,(pm.cost*rd.RequestedQty) AS [ExtCost]
	FROM dbo.VX_Requisition_Hdr rh WITH (NOLOCK) 
		INNER JOIN dbo.VX_Requisition_Dtl rd WITH (NOLOCK) 
			ON rh.RequisitionNo=rd.RequisitionNo
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm WITH (NOLOCK) 
			ON pm.ItemCode=rd.ItemCode 
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd WITH (NOLOCK) 
			ON pmd.ItemCode=pm.ItemCode
		INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l WITH (NOLOCK) 
			ON l.LocationNo=rh.LocationNo 
		LEFT JOIN VX_Status ss WITH (NOLOCK) 
			ON rd.[Status] = ss.statuscode
	WHERE rh.RequisitionNo IN (SELECT Reqs FROM #tmpReqs) AND ISNULL(rd.[Status],'')<>99
	ORDER BY rh.VendorID,rh.LocationNo,rh.RequisitionNo,pm.Title

	----clean up tables..................................................................................................................................................................................
	DROP TABLE #tmpreqs
END
GO
PRINT N'Altering [dbo].[RPT_STOC_VendorGrid]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8-11-2015>
-- Description:	<STOC reorder requisition report......>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_STOC_VendorGrid] 
	@vendors varchar(8000), @startdate datetime, @enddate datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--------Testing............................................
--declare @vendors varchar(8000), @startdate datetime, @enddate datetime
--set @vendors = 'IDMELISSA'
--set @startdate = '8/1/2016'
--set @enddate = '10/16/2016'
--------------------------------------------------------------

	----temp table setup to hold results.........................................................................................................................................................................
	CREATE TABLE #TEASER_WORK_TBL([RowID] int identity(1,1),[LocationNo] [char](5) NULL,[District] [varchar](30) NULL,[Title] [varchar](250) NULL,
		[ItemCode] [varchar](20) NULL, [PreviousItemCodes] [varchar] (100),[ReorderItemCode] [varchar](10) NULL,[VendorID] [varchar](20) NULL,[SectionCode] [varchar](20) NULL,[ItemCodeCount] [int] NULL,
		[Cost] [money] NULL,[Price] [money] NULL,[InitialStoreDate] [datetime] NULL,[InitialQty] [int] NULL,[QtyOnHand] [int] NULL,[TotalRcvd] [int] NULL,[LastReorderDate] [datetime] NULL,
		[Pending] [int] NULL,[RO_CNT] [int] NULL,[LastQty] [int] NULL,[ShipQty] [int] NULL,[ISBN] [varchar](20) NULL,[XRefQty] [int] NULL, [LocationID] [char](10) NOT NULL,
		[SuggestedOrderQty] [int] NULL,[Markdowns] [int] NULL,[LastSaleDate] [datetime] NULL,[TransferredOut] [int] NULL,[SoldInPeriod] [int] NULL,[TotalSold] [int] NULL,[NextOrderDate] [datetime] NULL,[CaseQty] [int] NULL,
		[RateOfSale] [numeric](9,4) NULL,[PercentSold] [numeric](9,2) NULL,[SalesRank] [varchar] (30) NULL,[SectionQty] [int] NULL,[PMRateOfSale] [numeric](9,4) NULL) ON [PRIMARY]

	CREATE  CLUSTERED  INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID], [District], [LocationNo])

	----get all the items for the vendor.........................................................................................................................................................................
	insert into #TEASER_WORK_TBL 
	select r.LocationNo,r.District,r.Title,right('00000000000000000000' + r.ItemCode, 20)[ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,
		r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,
			r.TransferredOut,r.SoldInPeriod,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank,r.SectionQty,r.PMRateOfSale 
	from dbo.STOC_TeaserData r with (nolock) 
	where replace(r.vendorid,'&','')=@vendors

	----get any canceled items for vendor.........................................................................................................................................................................
	insert into #TEASER_WORK_TBL
	select sh.LocationNo,l.DistrictCode,pm.Title,pm.ItemCode,''[PreviousItemCodes],RIGHT(sd.ItemCode,8)[ReorderItemCode],case when isnull(pm.PurchaseFromVendorID,'')='' then pm.VendorID else pm.PurchaseFromVendorID end [VendorID],pm.SectionCode,1[ItemCodeCount],pm.Cost,pm.Price,
			''[InitialStoreDate],0[InitialQty],0[QtyOnHand],0[TotalRcvd],''[LastReorderDate],0[Pending],0[RO_CNT],0[LastQty],0[ShipQty],pm.ISBN,0[XRefQty],l.LocationID,0[SuggestedOrderQty],
					0[markdowns],''[LastSaleDate],0[TransferredOut],0[SoldInPeriod],0[TotalSold],''[NextOrderDate],pmd.UnitsPerCase[CaseQty],0[RateOfSale],0[PercentSold],''[SalesRank],0[SectionQty],0[PMRateOfSale]
	from STOC_Reorder_Control src with(nolock) inner join STOC_Requisition_Dtl sd with (nolock) on src.RequisitionNo=sd.RequisitionNo
				inner join STOC_Requisition_Hdr sh with(nolock) on sd.RequisitionNo=sh.RequisitionNo
				inner join [$(HPB_Prime)].[dbo].[Locations] l with(nolock) on l.LocationNo=src.StoreNo
				inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm with(nolock) on pm.ItemCode=sd.ItemCode
				inner join [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd with(nolock) on pmd.ItemCode=pm.ItemCode
	where sh.Status between 20 and 34 and replace(src.vendorid,'&','')=@vendors
		and sd.ItemCode not in (select  right('00000000000000000000' + ReorderItemCode, 20) from #TEASER_WORK_TBL)
	
	----get the final results.......................................................................................................................................................................................
	select twt.LocationNo,twt.District,twt.ReorderItemCode,twt.Title,twt.VendorID,twt.SectionCode,isnull(twt.SectionQty,0)[SectionQty],cast(twt.Cost as decimal(12,2))[Cost],cast(twt.Price as decimal(12,2))[Price],
		isnull(ip.MrkDwnRange,0)[MrkDwnRange],cast(isnull(ip.TransInRange,0) as varchar(10)) +' / '+ cast(isnull(ip.TransOutRange,0)as varchar(10))[TransRange],isnull(twt.TotalSold,0)[TotalSold],isnull(ip.SoldRange,0)[SoldRange],
		sum(isnull(twt.QtyOnHand,0))[QtyOnHand],sum(twt.Pending)[EnRoute],sum(isnull(srd.requestedQty,0))[OnOrderQty],	
		case when exists(select VendorID from [$(HPB_Prime)].[dbo].[VendorMaster] where VendorID = twt.VendorID and UserChar30 = 'TTBReorder') then
			case when sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) >0 then
			case when sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) > sum(ISNULL(waq.AvailableQty ,0)) 
							then sum(ISNULL(waq.AvailableQty ,0)) 
							else sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) end 
			else 0 end
		else 
			case when sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) <= 0 
					then 0-- sum(isnull(twt.SoldInPeriod,0)) 
				  else sum(isnull(round(twt.RateOfSale*dbo.FN_STOC_Wks2Ord(twt.VendorID),0),0))-sum(isnull(twt.QtyOnHand,0))-sum(isnull(twt.Pending,0)) end
		end [SuggestedQty],	 
		isnull(sum(ISNULL(waq.AvailableQty ,0))-(select isnull(sum(isnull(requestedQty,0)),0) from STOC_Requisition_Dtl with (nolock) where itemcode = right('00000000000000'+twt.ReorderItemCode,20) and status <= 35),0)[WMSAvailableQty],
		ISNULL(src.RequisitionNo,'NA')[CurrentReqNo],twt.CaseQty,isnull(srd.PONumber,'NA')[PONumber],	
		max(twt.PreviousItemCodes)[PreviousItemCodes],twt.ISBN [ISBN/UPC],min(twt.InitialStoreDate)[InitialStoreDate],max(twt.lastsaledate)[LastSaleDate],twt.TotalRcvd,
		twt.PercentSold [PercentSold-PY],sum(isnull(twt.InitialQty,0)) [InitialQty],twt.PMRateOfSale [Weekly-ROS],--twt.RateOfSale [Weekly-ROS],
		max(twt.LastReorderDate)[LastReorderDate],sum(isnull(twt.LastQty,0))[LastQty],twt.SalesRank,twt.RateOfSale [Life-ROS],
		sum(isnull(twt.SoldInPeriod,0)) [Sold-SLO],sum(isnull(twt.markdowns,0))[Markdowns-SLO],sum(isnull(twt.TransferredOut,0)) [Transfers-SLO],sum(isnull(twt.ShipQty,0))[ShipQty-SLO] 
	from #TEASER_WORK_TBL twt with (nolock) left join WMSAvailableQty waq with (nolock) on right('00000000000000'+twt.ReorderItemCode,20) = waq.ItemCode
		left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
		left join STOC_Requisition_Dtl srd with (nolock) on src.requisitionno = srd.requisitionno and srd.itemcode = right('00000000000000'+twt.ReorderItemCode,20)
		left join STOC_Status ss with (nolock) on src.status = ss.statuscode
		left join STOC_Status ss2 with (nolock) on isnull(srd.Status,Case when isnull(src.Status,100) > 20 then src.Status else 10 end) = ss2.statuscode
		left join [$(HPB_Prime)].[dbo].[VendorMaster] v with (nolock) on twt.VendorID=v.VendorID
		left join (select sip.ItemCode,sip.LocationNo,SUM(sip.Sold)[SoldRange],SUM(sip.MrkDwn)[MrkDwnRange],SUM(sip.Transoutqty)[TransOutRange],SUM(sip.Transinqty)[TransInRange] from STOC_WeeklySMT sip with(nolock) where sip.StartDate>=@StartDate and Sip.EndDate<=@EndDate group by sip.ItemCode,sip.LocationNo) ip on twt.LocationNo=ip.LocationNo and right('00000000000000'+twt.ReorderItemCode,20)=ip.ItemCode 
	where replace(twt.vendorid,'&','')=@vendors
	group by twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
		,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss.statusname,'NA') end,
		case when v.UserChar15 != 'STOC' then 'NA' else ISNULL(ss2.statusname,'NA') end,ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),isnull(srd.PONumber,'NA'),
		isnull(twt.TotalSold,0),isnull(twt.SectionQty,0),isnull(ip.SoldRange,0),isnull(ip.MrkDwnRange,0),cast(isnull(ip.TransInRange,0) as varchar(10)) +' / '+ cast(isnull(ip.TransOutRange,0)as varchar(10)),
		twt.ISBN,twt.TotalRcvd,twt.PercentSold,twt.PMRateOfSale,twt.CaseQty,twt.SalesRank,twt.RateOfSale
	--order by twt.title,twt.District,twt.LocationNo
	order by twt.LocationNo,twt.title


	----clean up................
	DROP TABLE #TEASER_WORK_TBL




END
GO
PRINT N'Altering [dbo].[RPT_VX_GetOrderDetails]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <2/15/2013>
-- Description:	<Get Ordre details for date range....>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_VX_GetOrderDetails] 
	@VendorID varchar(30), @StartDate datetime, @EndDate datetime, @sort varchar(20), @dateComp varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	------------testing..............................
	--declare @VendorID varchar(30)
	--declare @StartDate datetime
	--declare @EndDate datetime
	--declare @sort varchar(20)
	--declare @dateComp varchar(10)
	--set @VendorID = 'IDB&TDISTR'
	--set @StartDate = '4/14/2014'
	--set @EndDate = '4/17/2014'	
	--set @sort = 'Location'	 --District
	--set @dateComp = 'Approve' --Approve
	--------------------------------------------------

	if @dateComp='Approve'
		begin
			select rh.LocationNo,l2.DistrictCode,rh.VendorID,rh.PONumber,isnull(rh.ApprovedDate,'1/1/1900')[ApprovedDate]
				,rd.ItemCode,pm.Title,''[Notes],pm.SectionCode,pm.Cost,pm.Price,pm.ProductType
				,rh.ReqAmt,rh.ReqQty,rd.ConfirmedQty,rd.CanceledQty,rd.BackOrderQty,rd.RequestedQty
			from VX_Requisition_Hdr rh inner join VX_Requisition_Dtl rd on rh.PONumber=rd.PONumber
				inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm on rd.ItemCode=pm.ItemCode
				inner join [$(HPB_Prime)].[dbo].[Locations] l1 on rh.LocationNo=l1.LocationNo
				inner join [$(HPB_Prime)].[dbo].[Locations] l2 on l1.RDCLocationNo=l2.LocationNo
			where rh.VendorID = @VendorID and rh.Status<>99 
					and convert(date,isnull(rh.ApprovedDate,'1/1/1900'),112) between @StartDate and @EndDate
			order by case when @sort = 'Location' then cast(rh.LocationNo as sql_variant)
						when @sort = 'District' then cast(l2.DistrictCode as sql_variant) end asc,rh.LocationNo,rh.PONumber,pm.Title
		end
	else if @dateComp='Submit'
		begin
			select rh.LocationNo,l2.DistrictCode,rh.VendorID,rh.PONumber,isnull(sub.SubmitDate,'1/1/1900')[ApprovedDate]
				,rd.ItemCode,pm.Title,''[Notes],pm.SectionCode,pm.Cost,pm.Price,pm.ProductType
				,rh.ReqAmt,rh.ReqQty,rd.ConfirmedQty,rd.CanceledQty,rd.BackOrderQty,rd.RequestedQty
			from VX_Requisition_Hdr rh inner join VX_Requisition_Dtl rd on rh.PONumber=rd.PONumber
				inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm on rd.ItemCode=pm.ItemCode
				inner join [$(HPB_Prime)].[dbo].[Locations] l1 on rh.LocationNo=l1.LocationNo
				inner join [$(HPB_Prime)].[dbo].[Locations] l2 on l1.RDCLocationNo=l2.LocationNo
				inner join VX_Submit_Audit_Log sub on sub.PONumber=rh.PONumber
			where rh.VendorID = @VendorID and rh.Status<>99 and convert(date,isnull(sub.SubmitDate,'1/1/1900'),112) between @StartDate and @EndDate
			order by case when @sort = 'Location' then cast(rh.LocationNo as sql_variant)
						when @sort = 'District' then cast(l2.DistrictCode as sql_variant) end asc,rh.LocationNo,rh.PONumber,pm.Title
		end
	
	
END
GO
PRINT N'Altering [dbo].[RPT_VX_GetVendors]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <2/15/2013>
-- Description:	<Get VX Vendors for reporting....>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_VX_GetVendors] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    select VendorID 
    from [$(HPB_Prime)].[dbo].[VendorMaster] 
    where UserChar15 = 'VX'
    order by VendorID
    
END
GO
PRINT N'Altering [dbo].[RPT_VX_ReorderReqs]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8-11-2015>
-- Description:	<STOC reorder requisition report......>
-- =============================================
ALTER PROCEDURE [dbo].[RPT_VX_ReorderReqs] 
	@reqs varchar(8000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--------Testing............................................
--declare @reqs varchar(8000)
--set @reqs = '284395,290563' --'309979,313839,317100,320838,309978,317099,309985,313834,317106,309987,317110,309860,313728,316987,320734,309859,313739,316986,309866,313735,316993,309881,316997'
----------------------------------------------------------------

----fill req table............................................................................................................................................................................
create table #tmpReqs(Reqs varchar(30))
insert into #tmpReqs
select distinct sID from dbo.FN_STOC_ListStringToTable (@reqs)

----get the results.................................................................................................................................................................................
	select distinct rh.RequisitionNo,rh.LocationNo,rh.VendorID,rh.PONumber,convert(varchar(10),rh.RequisitionDate,121)[RequisitionDate],rh.RequestBy,rh.ApprovedBy,convert(varchar(10),rh.ApprovedDate,121)[ApprovedDate],rh.Comments,
		RIGHT(rd.ItemCode,8)[ItemCode],pm.Title,rd.VendorItem [VendorItemNo],convert(varchar(20),rd.RequestedDate,20)[ItemRequestDate],rd.RequestedQty,isnull(rd.UnitType,'EA')[UnitType],isnull(pmd.UnitsPerCase,0)[ConversionQty],
		case when isnull(pmd.UnitsPerCase,0)<>0 and rd.RequestedQty<>0 then rd.RequestedQty/pmd.UnitsPerCase else 0 end [CaseQtyToOrder],rd.ApprovedBy,rd.ApprovedDate,rd.PONumber,pm.cost,pm.price,(pm.cost*rd.RequestedQty)[ExtCost],
		'Attn: '+case when ltrim(rtrim(l.MailToName))='' then 'Store Manager' else l.MailToName end [MailToName],l.MailToAddress1,l.MailToAddress2,l.MailToAddress3
	from dbo.VX_Requisition_Hdr rh with (nolock) 
		inner join dbo.VX_Requisition_Dtl rd with (nolock) on rh.RequisitionNo=rd.RequisitionNo
		inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm with (nolock) on pm.ItemCode=rd.ItemCode 
		inner join [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd with (nolock) on pmd.ItemCode=pm.ItemCode
		inner join [$(HPB_Prime)].[dbo].[Locations] l with (nolock) on l.LocationNo=rh.LocationNo 
		left join dbo.VX_Status ss with (nolock) on rd.status = ss.statuscode
	where rh.requisitionno in (select Reqs from #tmpReqs) and ISNULL(rd.Status,'')<>99
	order by rh.VendorID,rh.LocationNo,rh.RequisitionNo,pm.Title
----clean up tables..................................................................................................................................................................................
drop table #tmpreqs
END
GO
PRINT N'Altering [dbo].[STOC_Admin_UserUPD]...';


GO

-- =============================================
-- Author:		<Joey B.>
-- Create date: <8/15/2016>
-- Description:	<Update STOC Users....>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_Admin_UserUPD] 
(
	 @user VARCHAR(50)
	,@location CHAR(5)
	,@access VARCHAR(10)
	,@status VARCHAR(2)
	,@username VARCHAR(100) = ''
)
AS BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @rVal INT

	SET @rVal = 0

	BEGIN TRANSACTION STOC_UserUpd

	IF EXISTS (SELECT UserID FROM STOC_Users WHERE UserID = @user)
		BEGIN
			IF @username = ''
				UPDATE s
					SET	 UserAccessCode = @access
						,UserLocation = @location
						,UserActive = @status
				FROM STOC_Users s
				WHERE UserID = @user
			ELSE
				UPDATE s
					SET	 UserAccessCode = @access
						,UserLocation = @location
						,UserActive = @status
						,UserName = @username
				FROM STOC_Users s
				WHERE UserID = @user
			SET @rVal = @@ERROR
		END
	ELSE
		BEGIN
			INSERT INTO STOC_Users (UserID, UserName, UserEmpNo, UserActive, UserLocation, UserAccessCode)
				SELECT @user AS UserID
					,AD_Display_Name AS UserName
					,CASE WHEN ltrim(rtrim(EmployeeNumber)) = '' THEN AD_Display_Name ELSE EmployeeNumber END AS UserEmpNo
					,@status AS USerActive
					,RIGHT('00000' + @location, 5) AS UserLocation
					,@access AS UserAccesscode
				FROM [$(HPB_Prime)].[dbo].[ADAccounts]

				
				WHERE AD_Login = @user

			SET @rVal = @@ERROR
		END

	----Commit or Rollback trans...........
	IF @rVal = 0
	BEGIN
		COMMIT TRANSACTION STOC_UserUpd

		RETURN @rVal
	END
	ELSE
	BEGIN
		ROLLBACK TRANSACTION STOC_UserUpd

		RETURN @rVal
	END
END
GO
PRINT N'Altering [dbo].[STOC_Admin_VendUPD]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8/15/2016>
-- Description:	<Update STOC Vendors....>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_Admin_VendUPD]
	@vendorID varchar(20), @Alias varchar(50), @nextOrdDate datetime, @PurchNotes varchar(50), @minPurch int, @minAmt money, @wks2ord4 int, @nxtOrdSet varchar(10), @nxtOrdInt int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @rVal int
	set @rVal = 0
	Begin Transaction STOC_VendUpd

	update sv
	set sv.Alias=@Alias,sv.PurchaseNotes=@PurchNotes,sv.MinPurchaseQty=@minPurch,sv.MinPurchaseAmt=@minAmt,sv.Weeks2Ord4=@wks2ord4,sv.NextOrdSetting=@nxtOrdSet,sv.NextOrdInterval=@nxtOrdInt
	from dbo.STOC_Vendors sv
	where sv.VendorID=@vendorID
	set @rVal = @@ERROR

	Update v
	set MinPurchase=@minPurch,MinPurchaseAmt=@minAmt
	from [$(HPB_Prime)].[dbo].[VendorMaster] v
	where v.VendorID=@vendorID
	if @rVal=0 begin set @rVal = @@ERROR end

	update s
	set s.RequisitionDueDate=@nextOrdDate
	from dbo.STOC_Reorder_Control s
	where s.VendorID=@vendorID and s.Status in (10,20)
	if @rVal=0 begin set @rVal = @@ERROR end

	 ----Commit or Rollback trans...........
    IF @rVal=0
		begin
			Commit Transaction STOC_VendUpd
			return @rVal
		end
	ELSE
		begin
			ROLLBACK  Transaction STOC_VendUpd
			return @rVal
		end

END
GO
PRINT N'Altering [dbo].[STOC_ApprvCreateSupPO]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <9/5/2014>
-- Description:	<Create/Approve Supply Orders...>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_ApprvCreateSupPO] 
	@user varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

----testing.........
	--declare @user varchar(20)
	--set @user = 'jblalock'
----endtesting........


----get reqs for approval....
	create table #reqTmp (rowid int identity(1,1), reqNo char(6), POno char(6))
	insert into #reqTmp
	select distinct RequisitionNo,null
	from STOC_Reorder_Control src
	where LockedBy = @user and Locked = 'Y' and RequisitionNo is not null and Status = 20 and VendorID='WHPBSUPPLY'
		and exists(select itemcode from STOC_Requisition_Dtl where RequisitionNo = src.RequisitionNo and RequestedQty > 0 and Status<>99)

declare @POloop int
set @POloop = (select MAX(rowID) from #reqTmp)

while @POloop > 0
	begin 	
		declare @sRetPO char(6)
		declare @newPONo char(6)
		exec OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.VX_GetNextPONo @sRetPO = @newPONo output
		
		update #reqTmp
			set POno=@newPONo
		where rowid=@POloop
		
		set @POloop = @POloop - 1
	end

declare @rVal int
set @rVal = 0
Begin Transaction STOC_SUPCreate

----loop thru and update each req independently to ensure gaps in datetime stamps......
declare @loop int
set @loop = (select MAX(rowID) from #reqTmp)

while @loop > 0
	begin 	
		declare @curDT datetime
		set @curDT = GETDATE()
		declare @curReq char(6)
		declare @curPO char(6)
		select @curReq = reqNo, @curPO = POno from #reqTmp where rowid = @loop
		
	----update STOC_Reorder_Control status to approved for user's locked reqs....
		update STOC_Reorder_Control
			set [Status] = 35
		where RequisitionNo = @curReq

	----update requisition hdr & dtl statues from STOC_Reorder_Control....
		update stoc_requisition_hdr
			set  [Status] = 35
				,approvedby = @user
				,approveddate = @curDT
				,PONumber=@curPO
		where requisitionno = @curReq

		update stoc_requisition_dtl
			set	 [Status] = case when Status=99 then 99 else 35 end
				,approvedby = @user
				,approveddate = @curDT
				,PONumber=@curPO
		where requisitionno = @curReq
		
	----insert requisition into audit log for move to DIPS....
		insert into stoc_requisition_audit_log
			select @curReq, @curDT, null, 0, null
		
		if isnull((select PoNumber from STOC_Consolidation_Audit_Log where PoNumber=@curPO),'')=''
					begin
					----insert requisition into audit log for move to DIPS....
						insert into STOC_Consolidation_Audit_Log
							select @curPO,'WHPBSUPPLY','C','supplies',getdate(),@user,null,0,null
					end				
		set @loop = @loop - 1
	end

drop table #reqTmp
----Commit or Rollback trans...........
if @rVal <> 1 begin set @rVal = @@ERROR end
if @rVal=0
	begin
		Commit Transaction STOC_SUPCreate
		return @rVal
	end
else
	begin
		ROLLBACK  Transaction STOC_SUPCreate
		return @rVal
	end
	
END
GO
PRINT N'Altering [dbo].[STOC_CopyReqToDIPS]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <7/6/2012>
-- Description:	<Copies approved reqs to HPB_db for DIPS consolidation...>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_CopyReqToDIPS] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
	declare @tmpReqHdr table (RowID int identity(1,1),ReqNo char(6),LocNo char(5),VendID varchar(12),ReqDate datetime,ReqBy varchar(30),AprvBy varchar(30),AprvDate datetime,PONo char(6),POType char(1),ConsolBy varchar(30))
	declare @tmpReqDtl table (ReqNo char(6),ItemCode char(20),ReqQty int,ReqBy varchar(30),ReqDate datetime,AprvBy varchar(30),AprvDate datetime,PONo char(6))

	declare @tmpOrdHdr table (PONo char(6),LocNo char(5),POType varchar(1),BuyerID varchar(10),VendorID varchar(10),TermsCode varchar(10),PODate smalldatetime,CancelDate smalldatetime,DueDate smalldatetime,OrdAmt money,Printed bit,SendPO bit,SpecInstr varchar(255),Complete bit,DateComplete bit,SkeletonCrtFrom varchar(6),CrtFromReq bit,ShipToName varchar(30),ShipToAddr1 varchar(30),ShipToAddr2 varchar(30),ShipToAddr3 varchar(30))
	declare @tmpOrdDtl table (PONo char(6),POLine char(5),ItemCode char(20),ISBN varchar(13),DistType varchar(1),OrdQty int,UnitType varchar(3),UnitCost money,ExtLineCost money,SchemeID varchar(20),FileClaimAdj bit,VouchNo varchar(10),LocNo char(5),Complete bit, DateComplete smalldatetime,SpecInstr varchar(50),Discount float,RemovedFromRct bit,QtyCnt int,QtyPer int,ExtQty int,RowAddFrom varchar(20),RowAddBy char(10),RowAddDate datetime)
	
	insert into @tmpReqHdr
	select srh.RequisitionNo,srh.LocationNo,srh.VendorID,srh.RequisitionDate,srh.RequestBy,srh.ApprovedBy,srh.ApprovedDate,srh.PONumber,scal.DistType,isnull(scal.ConsolidatedBy,'STOC')[ConsolidatedBy]
	from STOC_Requisition_Hdr srh inner join stoc_requisition_audit_log sral on srh.RequisitionNo = sral.RequisitionNo
		inner join STOC_Consolidation_Audit_Log scal on srh.PONumber=scal.PONumber
	where sral.ProcessedFlag = 0 and srh.Status = 35 and DATEDIFF(N,sral.ReqApprovedDate,GETDATE())>1 --and srh.VendorID='IDTEXASBOO' --and srh.LocationNo in ('00043','00085')

	insert into @tmpReqDtl
	select srd.RequisitionNo,srd.ItemCode,srd.RequestedQty,srd.RequestedBy,srd.RequestedDate,srd.ApprovedBy,srd.ApprovedDate,srd.PONumber
	from STOC_Requisition_Dtl srd inner join stoc_requisition_audit_log sral on srd.RequisitionNo = sral.RequisitionNo
	where sral.ProcessedFlag = 0 and srd.Status = 35 and srd.RequestedQty > 0 and DATEDIFF(N,sral.ReqApprovedDate,GETDATE())>1 
		and srd.RequisitionNo in (select rh.ReqNo from @tmpReqHdr rh) and srd.Status<>99

	--declare @rVal int
	--set @rVal = 0
	--Begin Transaction STOC_ReqCopy

	declare @loop int
	set @loop = (select MAX(RowID) from @tmpReqHdr)

	while @loop > 0
		begin
			----declare and set current values....
			declare @curReq char(6)
			declare @curLoc char(5)
			declare @vendor varchar(12)
			declare @curPONo char(6)
			declare @curDist char(1)
			select @curReq = ReqNo, @curLoc = LocNo, @vendor = VendID, @curPONo = PONo, @curDist = POType from @tmpReqHdr where RowID = @loop
			
			----check if this requisition existis in table.....
			if not exists(select requisitionno FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader where requisitionno=@curReq)
				begin
					----insert requisition header and details....
					insert into OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader
					select ReqNo,LocNo,ReqBy,VendID,ReqDate,AprvBy,cast(AprvDate as smalldatetime),PONo,null,null,null
					from @tmpReqHdr
					where ReqNo = @curReq
			
					insert into OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitiondetail
					select ReqNo,ItemCode,ReqDate,ReqQty,null,1,AprvBy,ReqQty,cast(AprvDate as smalldatetime),PONo
					from @tmpReqDtl
					where ReqNo = @curReq						
										
					--update audit log....
					update stoc_requisition_audit_log
					set processeddate = GETDATE(),processedflag = 1,Comments = null
					where requisitionno = @curReq					
					
					----update requisition hdr & dtl statues from STOC_Reorder_Control....
					update STOC_Requisition_Hdr
					set status = 40
					where requisitionno = @curReq

					update STOC_Requisition_Dtl
					set status = case when Status=99 then 99 else 40 end
					where requisitionno = @curReq
					
					update STOC_Reorder_Control
					set status = 40
					where requisitionno = @curReq
				end
			else
				begin
					if (select distinct isnull(Comments,'') from STOC_Requisition_Audit_Log where RequisitionNo=@curReq) != 'Duplicate Requisition!'
						begin
							select @vendor,@curLoc,@curReq,@curPONo,'Duplicate Requisition!'

							update stoc_requisition_audit_log
								set Comments = 'Duplicate Requisition!'
							where RequisitionNo=@curReq
					
							------send email about copy failure......
							declare @emailAddy varchar(1000) = 'jblalock@hpb.com'
							declare @msg varchar(500) = 'This RequisitionNo has failed to copy to DIPS: ' + @curReq +''
							select @msg
							declare @qry varchar(max)
							set @qry = ' SET NOCOUNT ON; select distinct rh.VendorID,rh.LocationNo,rh.RequisitionNo,rh.ApprovedBy,rh.ApprovedDate,ISNULL(sal.comments,'''')[Comment]
										from dbo.STOC_Requisition_Hdr rh inner join dbo.STOC_Requisition_Audit_Log sal on rh.RequisitionNo=sal.RequisitionNo
										where rh.RequisitionNo= ' +''''+ @curReq +''''+ ' order by rh.VendorID,rh.LocationNo,rh.RequisitionNo,rh.ApprovedBy,rh.ApprovedDate'
							select @qry
							EXECUTE [msdb].[dbo].[sp_send_dbmail]
									@profile_name='EDIMail',
									@recipients=@emailAddy,
									@subject     = 'STOC Requisition copy failure',
									@body        = @msg,
									@query = @qry 
						end
				end

			if not exists(select ponumber FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.orderheader where ponumber = @curPONo) 
					begin
						declare @useLoc char(5)
						declare @MailToName varchar(30)
						declare @MailToAddress1 varchar(30)
						declare @MailToAddress2 varchar(30)
						declare @MailToAddress3 varchar(30)
						declare @POUser varchar(20)
						declare @venType varchar(20)

						if @curDist='D' ----use requisition location data....
							begin
								select @POUser='ANNA',@useLoc=rh.LocNo,@MailToName=l.MailToName,@MailToAddress1=l.MailToAddress1,@MailToAddress2=l.MailToAddress2,@MailToAddress3=l.MailToAddress3
								from @tmpReqHdr rh 
									inner join [$(HPB_Prime)].[dbo].[VendorMaster] vm on rh.VendID = vm.VendorID
									inner join [$(HPB_Prime)].[dbo].[Locations] l on rh.LocNo = l.LocationNo
								where rh.PONo=@curPONo 
							end 
						else if @curDist='C'  ----use CDC location data....
							begin
								set @venType = isnull((select top 1 UserChar30 from [$(HPB_Prime)].[dbo].[VendorMaster] where VendorID=@vendor),'')
								select @POUser=case when @vendor='WHPBSUPPLY' then 'MICHAEL' else 'CRATES' end,@useLoc=l.LocationNo,@MailToName=l.MailToName,@MailToAddress1=l.MailToAddress1,@MailToAddress2=l.MailToAddress2,@MailToAddress3=l.MailToAddress3
								from [$(HPB_Prime)].[dbo].[Locations] l 
								where l.LocationNo='00944' 
							end
								
						----insert purchase order header and details....
							insert into OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.orderheader
							select distinct rh.PONo,@useLoc,@curDist,@POUser,rh.VendID,vm.TermsCode,cast(GETDATE() as smalldatetime),null,cast(GETDATE()+7 as smalldatetime),
								sum(pm.Cost*rd.ReqQty),0,1,'',0,null,rh.PONo,1,@MailToName,@MailToAddress1,@MailToAddress2,@MailToAddress3
							from @tmpReqDtl rd inner join @tmpReqHdr rh on rd.ReqNo = rh.ReqNo
								inner join [$(HPB_Prime)].[dbo].[VendorMaster] vm on rh.VendID = vm.VendorID
								inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm on rd.ItemCode = pm.ItemCode
							where rh.PONo=@curPONo
							group by rh.PONo,rh.VendID,vm.TermsCode
							
							insert into OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.orderdetail
							select rd.PONo, right('00000'+cast(row_number() over (partition by @useLoc order by @useLoc)as varchar(4)),5),rd.ItemCode,
								cast(case when ltrim(rtrim(pmd.UPC))='' then pm.ISBN else pmd.UPC end as varchar(13)),'T',sum(rd.ReqQty),'EA',pm.Cost,sum(rd.ReqQty)*pm.Cost,pmd.SchemeID,0,null,
								@useLoc,0,null,'',0,0,null,0,sum(rd.ReqQty),rh.ConsolBy,cast(rh.ConsolBy as varchar(10)),GETDATE()
							from @tmpReqDtl rd inner join @tmpReqHdr rh on rd.ReqNo = rh.ReqNo
								inner join [$(HPB_Prime)].[dbo].[VendorMaster] vm on rh.VendID = vm.VendorID
								inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm on rd.ItemCode = pm.ItemCode
								inner join [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd on pm.ItemCode = pmd.ItemCode
							where rd.PONo=@curPONo
							group by rd.PONo,rd.ItemCode,cast(case when ltrim(rtrim(pmd.UPC))='' then pm.ISBN else pmd.UPC end as varchar(13)),pm.Cost,pmd.SchemeID,rh.ConsolBy

							--update audit log....
							update STOC_Consolidation_Audit_Log
								set processeddate = GETDATE()
									,processedflag = 1
									,Comments = null
							where PONumber = @curPONo
					end
		
			set @loop = @loop - 1
		end

	------Commit or Rollback trans...........
	--set @rVal = @@ERROR
	--if @rVal=0
	--	begin
	--		Commit Transaction STOC_ReqCopy
	--	end
	--else
	--	begin
	--		ROLLBACK  Transaction STOC_ReqCopy
	--	end
		
END
GO
PRINT N'Altering [dbo].[STOC_CreatePOs]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <1/14/2015>
-- Description:	<Consolidate Store Reqs onto POs....>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_CreatePOs]
	@user varchar(20), @vendorID varchar(15), @type char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


----testing.........
	--declare @user varchar(20)
	--declare @vendorID varchar(15)
	--declare @type char(1)
	--set @user = 'jblalock'
	--set @vendorID = 'IDTEXASBOO'
	--set @type =''
----endtesting........


----get reqs for approval....
	create table #reqTmp (rowid int identity(1,1), reqNo char(6), locNo char(5), vendorID varchar(20), PoNo char(6))
	insert into #reqTmp
	select distinct RequisitionNo,StoreNo,VendorID,null
	from STOC_Reorder_Control src
	where VendorID=@vendorID and Status=30 and LockedBy = @user and Locked = 'Y' and RequisitionNo is not null 
		and exists(select itemcode from STOC_Requisition_Dtl where RequisitionNo = src.RequisitionNo and RequestedQty > 0 and Status<>99)
	order by StoreNo

	create table #reqVend (rowid int identity(1,1),vendorID varchar(20))
	insert into #reqVend
	select distinct vendorid from #reqTmp
	
	declare @sRetPO char(6)
	declare @newPONo char(6)
	
	if @type='D' ----dropshipment
		begin
			declare @loop int
			set @loop = (select MAX(rowID) from #reqTmp)
			
			while @loop > 0
				begin 
					declare @curReq char(6)
					select @curReq = reqNo from #reqTmp where rowid = @loop

					-----get next PO number....
					exec OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextPONo @sRetPO = @newPONo output
			
					update #reqTmp
					set PoNo = @newPONo
					where reqNo = @curReq
			
					set @loop = @loop - 1
					set @sRetPO=''
					set @newPONo=''
				end
			
		end
	else if @type='C'
		begin
			declare @venCnt int
			declare @curVen varchar(20)
			set @venCnt = (select max(rowID) from #reqVend)
			
			while @venCnt > 0
				begin
					set @curVen = (select vendorID from #reqVend where rowid=@venCnt)
					----get next PO number....
					exec OPENDATASOURCE('SQLOLEDB','Data Source=sequoid;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextPONo @sRetPO = @newPONo output

					update #reqTmp
					set PoNo=@newPONo
					where vendorID=@curVen
		
					set @venCnt = @venCnt-1
					set @sRetPO=''
					set @newPONo=''
				end
		
		end
	
	
Begin Transaction STOC_CreatePO

		declare @rVal int
		set @rVal = 0
		declare @err int
		set @err=0
		----loop thru and update each req independently to ensure gaps in datetime stamps......
		declare @upd int
		set @upd = (select MAX(rowID) from #reqTmp)

		while @upd > 0
			begin 
				declare @curDT datetime
				set @curDT = GETDATE()
				declare @updReq char(6)
				declare @updPO char(6)
				select @updReq = reqNo, @updPO = POno from #reqTmp where rowid = @upd
				
			----update STOC_Reorder_Control status to approved for user's locked reqs....
				update STOC_Reorder_Control
				set Status = 35
				where RequisitionNo = @updReq
				
				if @err=0 begin set @err=@@ERROR end

			----update requisition hdr & dtl statues from STOC_Reorder_Control....
				update stoc_requisition_hdr
				set status = 35, PONumber=@updPO
				where requisitionno = @updReq
				
				if @err=0 begin set @err=@@ERROR end
				
				update stoc_requisition_dtl
				set status = case when Status=99 then 99 else 35 end, PONumber=@updPO
				where requisitionno = @updReq
				
				if @err=0 begin set @err=@@ERROR end
		
			----insert requisition into audit log for move to DIPS....
			if not exists(select PoNumber from STOC_Consolidation_Audit_Log where PoNumber=@updPO)
				begin
					insert into STOC_Consolidation_Audit_Log
					select @updPO,@vendorID,@type,case @type when 'D' then 'dropshipment' when 'C' then 'CDCshipment' else @type end ,getdate(),@user,null,0,null
					
					if @err=0 begin set @err=@@ERROR end	
				end
					
				set @upd = @upd - 1
			end
	------determine type........................................................................................................
	--if @type='D' ----dropshipment
	--	begin
	------loop thru and update each req independently to ensure gaps in datetime stamps......
	--	declare @loop int
	--	set @loop = (select MAX(rowID) from #reqTmp)

	--	while @loop > 0
	--		begin 
	--			declare @curReq char(6)
	--			select @curReq = reqNo from #reqTmp where rowid = @loop

	--		-----get next PO number....
	--			exec OPENDATASOURCE('SQLOLEDB','Data Source=ferret;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextPONo @sRetPO = @newPONo output
			
	--		----update STOC_Reorder_Control status to approved for user's locked reqs....
	--			update STOC_Reorder_Control
	--			set Status = 35
	--			where RequisitionNo = @curReq

	--		----update requisition hdr & dtl statues from STOC_Reorder_Control....
	--			update stoc_requisition_hdr
	--			set status = 35, PONumber=@newPONo
	--			where requisitionno = @curReq

	--			update stoc_requisition_dtl
	--			set status = 35, PONumber=@newPONo
	--			where requisitionno = @curReq
		
	--		----insert requisition into audit log for move to DIPS....
	--			insert into STOC_Consolidation_Audit_Log
	--			select @newPONo,@vendorID,@type,'dropshipment',getdate(),@user,null,0,null
		
	--			set @loop = @loop - 1
	--			set @sRetPO=''
	--			set @newPONo=''
	--		end
						
	--	end
	--else if @type='C' ---- CDC shipment
	--	begin			
	--		declare @venCnt int
	--		declare @curVen varchar(20)
	--		set @venCnt = (select max(rowID) from #reqVend)
			
	--		while @venCnt > 0
	--			begin
	--				set @curVen = (select vendorID from #reqVend where rowid=@venCnt)
	--			----get next PO number....
	--				exec OPENDATASOURCE('SQLOLEDB','Data Source=ferret;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextPONo @sRetPO = @newPONo output

	--			----update STOC_Reorder_Control status to approved for user's locked reqs....
	--				update STOC_Reorder_Control
	--				set Status = 35
	--				where RequisitionNo in (select distinct reqNo from #reqTmp where VendorID=@curVen)

	--			----update requisition hdr & dtl statues from STOC_Reorder_Control....
	--				update stoc_requisition_hdr
	--				set status = 35, PONumber=@newPONo
	--				where requisitionno in (select distinct reqNo from #reqTmp where VendorID=@curVen) 

	--				update stoc_requisition_dtl
	--				set status = 35, PONumber=@newPONo
	--				where requisitionno in (select distinct reqNo from #reqTmp where VendorID=@curVen) 
			
	--			----insert requisition into audit log for move to DIPS....
	--				insert into STOC_Consolidation_Audit_Log
	--				select @newPONo,@vendorID,@type,'CDCshipment',getdate(),@user,null,0,null

	--			set @venCnt = @venCnt-1
	--			set @sRetPO=''
	--			set @newPONo=''
	--		end
	--	end

drop table #reqTmp
drop table #reqVend
----Commit or Rollback trans...........
set @rVal = @err
--return @rVal
if @rVal=0
	begin
		Commit Transaction STOC_CreatePO
		return @rVal
	end
else
	begin
		ROLLBACK  Transaction STOC_CreatePO
		return @rVal
	end

END
GO
PRINT N'Altering [dbo].[STOC_GenerateReqs]...';


GO
/*
	=============================================
	Author:		Joey B.
	Description:	Generates new requisitions for active locations once reqs are consolidated to POs
	Modfificatin:	Created: 06/29/2012 - JB - Initial stored procedure
					Updated: 06/24/2019 - ALB- Add exception for LaReunion
	=============================================
*/
ALTER PROCEDURE [dbo].[STOC_GenerateReqs]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- ** Release all locks 
	UPDATE dbo.STOC_Reorder_Control
		SET	 Locked = 'N'
			,LockedBy = NULL
			,LockedDate = NULL
	WHERE Locked = 'Y'
		AND VendorID <> 'WHPBSUPPLY'

	-- ** Get all store locations
	CREATE TABLE #locs 
	(
		 locationno CHAR(5)
		,locationname CHAR(30)
		,locationID CHAR(10)
	)

	BEGIN
		INSERT #locs
			SELECT	 locationno
					,DistrictCode
					,locationid
			FROM [$(HPB_Prime)].[dbo].[Locations]
			WHERE retailstore = 'y'
				AND isnumeric(locationno) = 1
				AND STATUS = 'A'
				AND CAST(locationno AS INT) BETWEEN 1 AND 200
				OR STATUS = 'A'
				AND UserInt1 = 1
				AND locationno != '00888'
			ORDER BY LocationNo
	END

	-- ** Get reorderable vendors
	CREATE TABLE #rVendors 
	(
		 vendorID VARCHAR(20)
		,NextOrderDate DATETIME
	)

	BEGIN
		INSERT dbo.STOC_Vendors
		SELECT DISTINCT 
			 VendorID
			,[Name]
			,NULL
			,NULL
			,NULL
			,NULL
			,NULL
			,NULL
			,NULL
		FROM [$(HPB_Prime)].[dbo].[VendorMaster] WITH (NOLOCK)
		WHERE isnull(ltrim(rtrim(userchar30)), '') <> ''
			AND UserChar15 IN ('STOC')
			AND vendorid NOT IN (	SELECT DISTINCT VendorID
									FROM dbo.STOC_Vendors
								)

		INSERT #rVendors
			SELECT DISTINCT 
				 v.vendorid
				,(	SELECT DISTINCT TOP 1 RequisitionDueDate
					FROM dbo.STOC_Reorder_Control
					WHERE VendorID = v.VendorID
				 ) AS [NextOrderDate]
			FROM dbo.STOC_Vendors v WITH (NOLOCK)
	END

	-- ** Put all vendors into a cross join with locations
	CREATE TABLE #reorderReqs 
	(
		 locationno CHAR(5)
		,vendorid VARCHAR(30)
	)
	CREATE CLUSTERED INDEX [IDX_ROITEMS_RU] ON #reorderReqs ( [locationno] ,[vendorid] )

	INSERT INTO #reorderReqs
		SELECT	 lc.locationno
				,v.vendorID
		FROM #locs lc
			CROSS JOIN #rVendors v

	-- ** Delete out non-supply reorder locations
	/*
	DELETE
	FROM #reorderReqs
	WHERE VendorID != 'WHPBSUPPLY'
		AND LocationNo IN (	SELECT LocationNo
							FROM [$(HPB_Prime)].[dbo].[Locations]
							WHERE UserInt1 = 1)
	*/
	-- ** Updated to exclude location 452 (La Reunion) 
	DELETE
	FROM #reorderReqs
	WHERE VendorID != 'WHPBSUPPLY'
		AND LocationNo IN (	SELECT LocationNo
							FROM [$(HPB_Prime)].[dbo].[Locations]
							WHERE UserInt1 = 1
								AND LocationNo NOT IN ('00452'))

	-- ** Insert any missing Locations into locations table
	INSERT INTO dbo.STOC_Locations
	SELECT	 locationno
			,locationID
			,'N'
			,GETDATE()
	FROM #locs
	WHERE locationno NOT IN ( SELECT locationno FROM dbo.STOC_Locations )
		AND locationID NOT IN ( SELECT locationID FROM dbo.STOC_Locations )

	-- ** Turn off any stores that have been set to inactive
	UPDATE sl
		SET	 sl.Active = 'N'
	FROM dbo.STOC_Locations sl
		INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l 
			ON sl.LocationID = l.LocationID
	WHERE l.STATUS = 'I'

	-- ** Insert any missing Store/Vendor records
	INSERT INTO dbo.STOC_Reorder_Control (StoreNo,VendorID)
		SELECT	 rr.locationno
				,rr.vendorid
		FROM #reorderReqs rr
			INNER JOIN dbo.STOC_Locations sl 
				ON rr.locationno = sl.locationno
			LEFT JOIN dbo.STOC_Reorder_Control src 
				ON rr.locationno = src.storeno
		WHERE (isnull(src.storeno, '') = '' AND isnull(src.vendorid, '') = '' AND sl.Active = 'Y' )
			OR (	NOT EXISTS (	SELECT DISTINCT vendorid
									FROM dbo.STOC_Reorder_Control
									WHERE vendorid = rr.vendorid
										AND StoreNo = rr.locationno
								)
					AND sl.Active = 'Y')
		GROUP BY rr.locationno ,rr.vendorid
		ORDER BY rr.vendorid ,rr.locationno

	-- ** Join with SEQ requisitionheader to delete consolidated orders
	UPDATE src
		SET	 src.requisitionno = NULL
			,src.STATUS = NULL
			,src.requisitiondate = NULL
			,src.requisitionduedate = NULL
	FROM dbo.STOC_Reorder_Control src
	WHERE STATUS IN ('99')
		OR src.requisitionno IN (	SELECT requisitionno
									FROM OPENDATASOURCE ('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader
									WHERE (
												( ponumber IS NOT NULL AND requestby <> 'VOID' )
												OR (ponumber IS NULL AND requestby = 'VOID' )
										  )
										AND requisitionno = src.requisitionno
								 )

	-- ** Put Store/Vendor records that need a new req into temp table
	CREATE TABLE #NewReqs 
	(
		 ID INT identity(1, 1)
		,locationno CHAR(5)
		,vendorid VARCHAR(30)
	)
	CREATE CLUSTERED INDEX [IDX_ROITEMS_RU] ON #NewReqs ( [locationno] ,[vendorid] )

	INSERT INTO #NewReqs
		SELECT	 src.StoreNo
				,src.VendorID
		FROM dbo.STOC_Reorder_Control src
			INNER JOIN dbo.STOC_Locations sl 
				ON src.storeno = sl.locationno
			INNER JOIN #rVendors v 
				ON src.VendorID = v.VendorID
		WHERE sl.active = 'Y'
			AND src.requisitionno IS NULL

	-- ** Loop thru temp table and get new values
	DECLARE @loop INT

	SET @loop = ( SELECT MAX(ID) FROM #NewReqs )

	WHILE isnull(@loop, 0) > 0
		BEGIN
			DECLARE @sRet CHAR(6)
			DECLARE @newReqNo CHAR(6)

			EXEC OPENDATASOURCE ( 'SQLOLEDB' ,'Data Source=sequoia;User ID=stocuser;Password=Xst0c5' ).HPB_db.dbo.STOC_GetNextRequisitionNo @sRet = @newReqNo OUTPUT 
			UPDATE src
			SET	 src.requisitionno = @newReqNo
				,src.STATUS = 10
				,src.requisitiondate = GETDATE()
				,src.requisitionduedate = ( SELECT dbo.FN_STOC_GetNextOrderDate(src.vendorid))
			FROM dbo.STOC_Reorder_Control src
			WHERE src.vendorid = (	SELECT vendorid FROM #NewReqs WHERE ID = @loop )
				AND src.storeno = (	SELECT locationno FROM #NewReqs WHERE ID = @loop )
			SET @loop = @loop - 1
		END

	---** End of loop
	DROP TABLE #locs
	DROP TABLE #rVendors
	DROP TABLE #reorderReqs
	DROP TABLE #NewReqs
END
GO
PRINT N'Altering [dbo].[STOC_GenerateSupplyReqs]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <10/2/15>
-- Description:	<Generates new supply requisitions for active locations once reqs are consolidated to POs and copied to HPB_db.....>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GenerateSupplyReqs]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -----------**Release locks for completed supply orders.........................................................................
	update dbo.STOC_Reorder_Control
	set Locked = 'N', LockedBy = null, LockedDate = null
	where (Locked = 'Y' and VendorID='WHPBSUPPLY' and Status=40) or (Locked = 'Y' and VendorID='WHPBSUPPLY' and LockedDate<DATEADD(dd,-1,getdate()))
-----------**Get all store locations...............................................................................................
	create table #locs(locationno char(5), locationname char(30), locationID char(10))
	begin
		insert #locs
		select locationno, DistrictCode, locationid 
		from [$(HPB_Prime)].[dbo].[Locations]s
		where retailstore = 'y' and isnumeric(locationno) = 1 and status = 'A' and CAST(locationno as int) between 1 and 200
				or Status='A' and UserInt1=1 and locationno!='00888'
		order by LocationNo
	end
-----------**Get non-supply reorderable vendors...................................................................................
	create table #rVendors(vendorID varchar(20), NextOrderDate datetime)
	begin
		insert dbo.STOC_Vendors
			select distinct vendorid, Name, null, null, null, null, null, null, null
			from [$(HPB_Prime)].[dbo].[VendorMaster] with(nolock)
			where isnull(ltrim(rtrim(userchar30)),'') <> '' 
				and UserChar15 in ('STOC') 
				and VendorID='WHPBSUPPLY' 
				and vendorid not in (select distinct VendorID from dbo.STOC_Vendors)

		insert #rVendors
			select distinct v.vendorid,(select distinct top 1 RequisitionDueDate from dbo.STOC_Reorder_Control where VendorID=v.VendorID)[NextOrderDate]
			from dbo.STOC_Vendors v with(nolock) 
			where VendorID='WHPBSUPPLY'	
	end
	
-----------**Put all vendors into a cross join with locations..............................................................
	create table #reorderReqs(locationno char(5), vendorid varchar(30))
	CREATE  CLUSTERED  INDEX [IDX_ROITEMS_RU] ON #reorderReqs ([locationno], [vendorid])

	insert into #reorderReqs
		select lc.locationno,v.vendorID
		from #locs lc cross join #rVendors v
	
----delete out non-supply reorder locations.....
	delete from #reorderReqs 
	where VendorID!='WHPBSUPPLY' 
		and LocationNo in (select LocationNo from [$(HPB_Prime)].[dbo].[Locations] where UserInt1=1) 

-----------**Insert any missing Store/Vendor records.....................................................................
	insert into dbo.STOC_Reorder_Control(StoreNo,VendorID)
		select rr.locationno,rr.vendorid  
		from #reorderReqs rr 
			inner join dbo.STOC_Locations sl on rr.locationno = sl.locationno
			left join dbo.STOC_Reorder_Control src on rr.locationno = src.storeno
		where (isnull(src.storeno,'') = ''  and isnull(src.vendorid,'') = '' and sl.Active='Y')
			or (not exists(select distinct vendorid from dbo.STOC_Reorder_Control where vendorid = rr.vendorid) and sl.Active='Y')
		group by rr.locationno,rr.vendorid  
		order by rr.vendorid, rr.locationno
	
-----------**Remove consolidated orders from control table..............................................................
	update src
		set src.requisitionno = null,src.status = null, src.requisitiondate = null, src.requisitionduedate = null
	from dbo.STOC_Reorder_Control src
	where src.VendorID='WHPBSUPPLY' and Status in ('99','40')
	
-----------**Put Store/Vendor records that need a new req into temp table................................................
	create table #NewReqs(ID int identity(1,1), locationno char(5), vendorid varchar(30))
	CREATE  CLUSTERED  INDEX [IDX_ROITEMS_RU] ON #NewReqs ([locationno], [vendorid])
	
	insert into #NewReqs
		select src.StoreNo,src.VendorID
		from dbo.STOC_Reorder_Control src 
			inner join dbo.STOC_Locations sl on src.storeno = sl.locationno
			inner join #rVendors v on src.VendorID = v.VendorID
		where sl.active = 'Y' 
			and src.requisitionno is null 
			and src.VendorID='WHPBSUPPLY'

	-----------**loop thru temp table and get new values...................................................................
	declare @loop int
	set @loop = (select MAX(ID) from #NewReqs)
	
	while isnull(@loop,0) > 0
		begin
			declare @sRet char(6)
			declare @newReqNo char(6)
			exec OPENDATASOURCE('SQLOLEDB','Data Source=ferret;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextRequisitionNo @sRet = @newReqNo output

			update src
			set src.requisitionno = @newReqNo
			,src.status = 10
			,src.requisitiondate = GETDATE()
			,src.requisitionduedate = (select dbo.FN_STOC_GetNextOrderDate(src.vendorid))
			from dbo.STOC_Reorder_Control src 
			where src.vendorid = (select vendorid from #NewReqs where ID = @loop)
				and src.storeno = (select locationno from #NewReqs where ID = @loop)
			
			set @loop = @loop - 1 
		end	
	----------**end of loop................................................................................................

drop table #locs
drop table #rVendors
drop table #reorderReqs
drop table #NewReqs

END
GO
PRINT N'Altering [dbo].[STOC_GetAdminData]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8/1/2016>
-- Description:	<Return Admin Dataset for STOC...>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GetAdminData]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	
	----admin vendor data.....
	select '- Select Vendor -'[VendorID],''[Name],''[Alias],''[NextOrderDueDate],0[Weeks2Ord4],''[NextOrdSetting],0[NextOrdInterval],''[PurchaseNotes],0[MinPurchaseQty],0[MinPurchaseAmt]
	union
	select distinct sc.VendorID,v.Name,v.Alias,convert(varchar(10),isnull(MAX(sc.RequisitionDueDate),'01/01/1900'),101)[NextOrderDueDate],isnull(v.Weeks2Ord4,0)[Weeks2Ord4],isnull(v.NextOrdSetting,'')[NextOrdSetting],
		isnull(v.NextOrdInterval,0)[NextOrdInterval],isnull(v.PurchaseNotes,'')[PurchaseNotes],isnull(v.MinPurchaseQty,0)[MinPurchaseQty],isnull(v.MinPurchaseAmt,0)[MinPurchaseAmt]
	from STOC_Reorder_Control sc with(nolock) inner join STOC_Vendors v with(nolock) on sc.VendorID=v.VendorID
	group by sc.VendorID,v.Name,v.Alias,v.Weeks2Ord4,v.NextOrdSetting,v.NextOrdInterval,v.PurchaseNotes,v.MinPurchaseQty,v.MinPurchaseAmt
	order by VendorID
	
	----admin location data....
	select '- Select Location -'[DispName],''[LocationNo],''[Abbreviation],''[Name],''[RDCLocationNo],''[DistrictCode],''[Status],''[Active]
	union
	select sl.LocationNo+' - '+l.Name[DispName],sl.LocationNo,l.Abbreviation,l.Name,l.RDCLocationNo,l.DistrictCode,l.Status,sl.Active 
	from STOC_Locations sl 
		inner join [$(HPB_Prime)].[dbo].[Locations] l on sl.LocationID=l.LocationID
	order by LocationNo
	
	----admin user data........
	select ''[userid],'- Select User -'[username],''[userlocation],''[useraccesscode],''[userempno],''[useractive]
	union
	select ''[userid],'--- Add User ---'[username],''[userlocation],''[useraccesscode],''[userempno],'I'[useractive]
	union
	select userid,replace(username,'''','')[username],right('00000' + ltrim(rtrim(userlocation)),5)[userlocation],useraccesscode,userempno,useractive 
	from STOC_Users
	union
	select AD_Login[userid],replace(AD_Display_Name,'''','')[username],right('00000' + ltrim(rtrim(AD_LocationNo)),5)[userlocation]
		,AD_JobTitle[useraccesscode],EmployeeNumber[userempno],Status[useractive]
	from [$(HPB_Prime)].[dbo].[ADAccounts] aa
	where (aa.AD_JobTitle like '%DIM%' or aa.AD_JobTitle like '%SIM%')
		and aa.Status = 'A' and aa.WMS_Acct = 0 and aa.AD_LocationNo not in ('888','304','880','881','677','663','')
		and aa.EmployeeNumber not in (select userempno from Stoc_Users)
	union
	select AD_Login[userid],replace(AD_Display_Name,'''','')[username],right('00000' + ltrim(rtrim(AD_LocationNo)),5)[userlocation]
		,'Chainwide'[useraccesscode],EmployeeNumber[userempno],Status[useractive]
	from [$(HPB_Prime)].[dbo].[ADAccounts] aa
	where aa.AD_JobTitle like '%HD%' and aa.AD_LocationNo ='888'
END
GO
PRINT N'Altering [dbo].[STOC_GetItemDetailsGrid]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <1/11/13>
-- Description:	<Get Item Details for Grid...>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GetItemDetailsGrid]
	@ItemCode varchar(20), @Location char(5), @VendorID varchar(15)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--------testing.......
	--declare @ItemCode varchar(20)
	--declare @Location char(5)
	--declare @VendorID varchar(15)
	--set @ItemCode = '01504199'
	--set @Location = '00001'
	--set @VendorID = 'TEXASBKMNB'	
	-----------------------
	
	--get full lenght itemcode...
	declare @_ItemCode char(20)
	set @_ItemCode = RIGHT('00000000000000000000'+@ItemCode,20)

	--get product image.....
    select right(ItemCode,8)[ItemCode],ItemImage 
    into #iitemp
    from [$(HPB_Prime)].[dbo].[ProductImages] 
    where ItemCode = @_ItemCode
    
    
    select ii.ItemImage,twt.LocationNo,twt.District,twt.ReorderItemCode,max(twt.PreviousItemCodes)[PreviousItemCodes],
		twt.ISBN [ISBN/UPC],min(twt.InitialStoreDate)[InitialStoreDate],max(twt.lastsaledate)[LastSaleDate],twt.TotalRcvd,
		twt.PercentSold [PercentSold-PY],sum(isnull(twt.InitialQty,0)) [InitialQty],twt.PMRateOfSale [Weekly-ROS],--twt.RateOfSale [Weekly-ROS],
		max(twt.LastReorderDate)[LastReorderDate],sum(isnull(twt.LastQty,0))[LastQty],twt.CaseQty,twt.SalesRank,twt.RateOfSale [Life-ROS],
		sum(isnull(twt.SoldInPeriod,0)) [Sold-SLO],sum(isnull(twt.markdowns,0))[Markdowns-SLO],sum(isnull(twt.TransferredOut,0)) [Transfers-SLO],
		sum(isnull(twt.ShipQty,0))[ShipQty-SLO],ISNULL(src.RequisitionDueDate,'1900/01/01')[RequisitionDueDate]
	from STOC_TeaserData twt with (nolock) 
		left join STOC_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
		left join STOC_Status ss with (nolock) on src.status = ss.statuscode
		left join #iitemp ii on ii.itemcode = twt.ReorderItemCode 
	where twt.reorderitemcode = @ItemCode and twt.vendorid = @VendorID and twt.locationno = @Location
	group by ii.ItemImage,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
		,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,''),twt.TotalRcvd,twt.PMRateOfSale
	order by twt.title,twt.District,twt.LocationNo

	drop table #iitemp

END
GO
PRINT N'Altering [dbo].[STOC_GetMinRequirements]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8/31/2015>
-- Description:	<Get STOC vendor/item minimum order requirements........>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GetMinRequirements]
	@vendor varchar(12), @user varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select pm.*,pmd.UnitsPerCase 
into #items
from [$(HPB_Prime)].[dbo].[ProductMaster] pm inner join [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd on pm.ItemCode=pmd.ItemCode
where PurchaseFromVendorID = @vendor and Reorderable='Y' and isnull(UnitsPerCase,0)>0


select right(rd.ItemCode,8)[ItemCode],SUM(rd.RequestedQty)[TotalOrdQty],SUM(rd.RequestedQty)/i.UnitsPerCase [CaseCount],i.UnitsPerCase,ISNULL(i.UnitsPerCase,0)[MinOrdQty]
from STOC_Requisition_Hdr rh with(nolock) inner join STOC_Requisition_Dtl rd with(nolock) on rh.RequisitionNo=rd.RequisitionNo
	inner join STOC_Reorder_Control rc with(nolock) on rc.RequisitionNo=rh.RequisitionNo
	inner join #items i on rd.ItemCode=i.ItemCode 
where rd.RequestedQty>0 and rd.Status=30 and rc.LockedBy=@user
group by rd.ItemCode,i.UnitsPerCase
having SUM(rd.RequestedQty)<ISNULL(i.UnitsPerCase,0)

drop table #items
	

END
GO
PRINT N'Altering [dbo].[STOC_GetNewChangedItems]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <11/19/2012>
-- Description:	<Copies new and changed items over to reorder applications.....>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GetNewChangedItems] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @rVal int
	declare @err int
	set @rVal = 0
	set @err = 0
	
	----=============================================================================================================================================================================================================
	----get all the active store locations...........................................................................................................................................................................
		create table #locs(locationno char(5), locationname char(30), locationID char(10))
		begin
			insert #locs
				select locationno, DistrictCode, locationid 
				from [$(HPB_Prime)].[dbo].[Locations]
				where retailstore = 'y' and isnumeric(locationno) = 1 and status = 'A' and CAST(locationno as int) between 1 and 200
		end
	----=============================================================================================================================================================================================================
	set @err = @@ERROR
	----=============================================================================================================================================================================================================
	----get items that have changed..................................................................................................................................................................................
		select pm.Title,right(pm.Itemcode,8)[ItemCode],pm.PurchaseFromVendorID [VendorID],pm.SectionCode,pm.Cost,pm.Price,case when ISNULL(pm.ISBN,'')='' then pmd.UPC else pm.ISBN end [ISBN],isnull(pmrc.ConversionQty,0)[UnitsPerCase]
		into #changeItems
		from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmaster pm
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmasterdist pmd
				on pm.itemcode = pmd.itemcode
			left outer join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.ProductMasterReorderConversion pmrc
				on pm.itemcode = pmrc.itemcode
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.vendormaster v
				on pm.purchasefromvendorid = v.vendorid
		where pmd.lastchangedate >= DATEADD(MINUTE,-61,getdate())
			and pm.reorderable = 'Y' 
			and isnull(v.userchar30,'') <> '' 
			and v.userchar30 <> 'Supplies'
			--and right(pm.Itemcode,8) in (select distinct ReorderItemCode from STOC_TeaserData)
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----update the changed items.....................................................................................................................................................................................
		update s
			set s.Title=i.Title,s.SectionCode=i.SectionCode,s.Cost=i.Cost,s.Price=i.Price,s.ISBN=i.ISBN,s.CaseQty=i.UnitsPerCase,s.VendorID=i.VendorID
		from STOC_TeaserData s 
			inner join #changeItems i 
				on s.ReorderItemCode=i.itemcode
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----insert the missing changed items.....................................................................................................................................................................................
		insert into STOC_TeaserData
			select l.locationno,l.locationname,l.locationID,i.title,'',i.itemcode,'',i.vendorid,i.sectioncode,1,i.cost,i.price,null,0,0,0,0,0,null,0,null,0,0,0,0,0,0,i.isbn,0,GETDATE(),i.UnitsPerCase,0,0,'NA / NA / NA / NA',0,0,0
			from #locs l cross join #changeItems i
			where i.ItemCode not in (select distinct ReorderItemCode from STOC_TeaserData)
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----get all the newly reorderable items for insertion............................................................................................................................................................
		select pm.Title,right(pm.Itemcode,8)[ItemCode],pm.PurchaseFromVendorID [VendorID],pm.SectionCode,pm.Cost,pm.Price,case when ISNULL(pm.ISBN,'')='' then pmd.UPC else pm.ISBN end [ISBN],isnull(pmrc.ConversionQty,0)[UnitsPerCase]
		into #newItems
		from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmaster pm
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmasterdist pmd
				on pm.itemcode = pmd.itemcode
			left outer join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.ProductMasterReorderConversion pmrc
				on pm.itemcode = pmrc.itemcode
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.vendormaster v
				on pm.purchasefromvendorid = v.vendorid
		where --pm.createdate > dateadd(dd,-3,getdate())
			cast(convert(varchar(10),pm.createdate,120)as datetime) = cast(convert(varchar(10),getdate(),120)as datetime)
			and pm.reorderable = 'Y' 
			and isnull(v.userchar30,'') <> '' 
			and v.userchar30 <> 'Supplies'
			and right(pm.Itemcode,8) not in (select distinct ReorderItemCode from STOC_TeaserData)
		
		select t.LocationNo,t.ReorderItemCode,t.ISBN,t.Pending,t.PendXref,t.QtyOnHand,t.SIPSQOH,t.SoldXRef
		into #updates
		from STOC_TeaserData t 
		where (LTRIM(RTRIM(t.ISBN))<>'' and t.ISBN in (select distinct ISBN from #newItems)) 
			or (LTRIM(RTRIM(t.ISBN))<>'' and t.ISBN in (select distinct ISBN from #changeItems))
		
		------copy the items to HPB_Prime as well....
		insert into [$(HPB_Prime)].[dbo].[ProductMaster](ItemCode,ItemAlias,Description,ProductType,VendorID,ValidCost,Cost,CostBasis,PriceMethod,AllowRegisterPricing,Price,AltPrice,SectionCode,DistributionCategory
           ,SchemeID,Title,ISBN,PurchaseFromVendorID,LastPurchaseOrder,Note,LastVoucherNumber,LastInvoiceNo,CreateDate,ReclassFromItemCode,Reorderable,InternetItem,InternetMinQty,InternetMaxQty
           ,MfgSuggestedPrice,UpdateQOH,AllowRegisterTitle,KeyWords,UserChar15,UserChar30,UserDate1,UserDate2,UserInt1,UserInt2,UserNum1,UserNum2,rowguid)
			select pm.ItemCode,pm.ItemAlias,pm.Description,pm.ProductType,pm.VendorID,pm.ValidCost,pm.Cost,pm.CostBasis,pm.PriceMethod,pm.AllowRegisterPricing,pm.Price,pm.AltPrice,pm.SectionCode,pm.DistributionCategory
			   ,pm.SchemeID,pm.Title,pm.ISBN,pm.PurchaseFromVendorID,pm.LastPurchaseOrder,pm.Note,pm.LastVoucherNumber,pm.LastInvoiceNo,pm.CreateDate,pm.ReclassFromItemCode,pm.Reorderable,pm.InternetItem,pm.InternetMinQty
			   ,pm.InternetMaxQty,pm.MfgSuggestedPrice,pm.UpdateQOH,pm.AllowRegisterTitle,pm.KeyWords,pm.UserChar15,pm.UserChar30,pm.UserDate1,pm.UserDate2,pm.UserInt1,pm.UserInt2,pm.UserNum1,pm.UserNum2,pm.rowguid
			from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmaster pm
				inner join #newItems i 
					on pm.itemcode = RIGHT('00000000000000'+i.itemcode,20)
			where i.ItemCode not in (select ItemCode from [$(HPB_Prime)].[dbo].[ProductMaster] where ItemCode=i.ItemCode)
		
		insert into [$(HPB_Prime)].[dbo].[ProductMasterDist](ItemCode,Discount,VendorItemNo,ASIN,SchemeID,CreatedBy,LastChangeBy,LastChangeDate,CalcCost,CalcDate,CalcOveride
												,CalcDesc,ReorderableItem,ReportItemCode,RetailText,UPC,TTBProdType,UnitsPerCase)
			select pmd.ItemCode,pmd.Discount,pmd.VendorItemNo,pmd.ASIN,pmd.SchemeID,pmd.CreatedBy,pmd.LastChangeBy,pmd.LastChangeDate,pmd.CalcCost,pmd.CalcDate,pmd.CalcOveride
			   ,pmd.CalcDesc,pmd.ReorderableItem,pmd.ReportItemCode,pmd.RetailText,pmd.UPC,pmd.TTBProdType,pmd.UnitsPerCase
			from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmasterdist pmd
				inner join #newItems i 
					on pmd.itemcode = RIGHT('00000000000000'+i.itemcode,20) 
			where i.ItemCode not in (select ItemCode from [$(HPB_Prime)].[dbo].[ProductMasterDist] where ItemCode=i.ItemCode)

	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----setup the data to insert into the STOC_TeaserData table......................................................................................................................................................
		insert into dbo.STOC_TeaserData
			select l.locationno,l.locationname,l.locationID,i.title,'',i.itemcode,'',i.vendorid,i.sectioncode,1,i.cost,i.price,null,0,0,0,0,0,null,0,null,0,0,0,0,0,0,i.isbn,0,GETDATE(),i.UnitsPerCase,0,0,'NA / NA / NA / NA',0,0,0,0,0,0
			from #locs l cross join #newItems i
		
		update t
			set t.PendXref=u.Pending,t.XRefQty=u.QtyOnHand,t.SIPSQOH=u.SIPSQOH, t.SoldXRef=u.SoldXRef
		from STOC_TeaserData t 
			inner join #updates u 
				on t.LocationNo=u.LocationNo 
					and t.ReorderItemCode!=u.ReorderItemCode 
					and t.ISBN=u.ISBN
		where t.ISBN in (select distinct ISBN from #newItems) 
			or t.ISBN in (select distinct ISBN from #changeItems)
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end	
	drop table #locs
	drop table #newItems
	drop table #changeItems
	drop table #updates
	set @rVal = @err
	return @rVal
END
GO
PRINT N'Altering [dbo].[STOC_GetPrevOrds]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <7/27/2016>
-- Description:	<Get Previous Order data for STOC...>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GetPrevOrds]
	@Vendors nvarchar(max),@Stores nvarchar(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	------testing
	--declare @Vendors nvarchar(max),@Stores nvarchar(max)
	--set @Vendors = 'TEXASBKMNA, TEXASBKMNB, IDTXBMARKD, IDTXBKAUDI, IDTXBKSOFT, IDTXBKSTAP' --'IDCROWNPOI, IDCROWNB&C'
	--set @Stores = '00001,00002,00003,00046,00049,00083,00109'


	-- --Create temp tables to store parameter values
	CREATE TABLE #tmpVendors(VendorID VARCHAR(30))
	CREATE TABLE #tmpStores(Stores VARCHAR(30))
	
	INSERT INTO #tmpVendors
		SELECT sID 
		FROM dbo.FN_STOC_ListStringToTable(@Vendors)
		GROUP BY SID
	
	INSERT INTO #tmpStores
		SELECT DISTINCT sID FROM dbo.FN_STOC_ListStringToTable(@Stores)
	-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
	SELECT DISTINCT 
		 rh.RequisitionNo
		,rh.PONumber
		,rh.VendorID
		,rh.LocationNo
		,sh.StatusName AS [Status]
		,rh.ApprovedBy
		,CONVERT(VARCHAR(10),rh.ApprovedDate,101) AS [ApprovedDate]
		,COUNT(rd.ItemCode) AS [ItemCount]
		,SUM(rd.RequestedQty) AS [OrderQty]
		,SUM(rd.RequestedQty*pm.cost) AS [OrderAmt]
	FROM dbo.STOC_Requisition_Hdr rh WITH(NOLOCK) 
		INNER JOIN dbo.STOC_Requisition_Dtl rd WITH(NOLOCK) 
			ON rh.RequisitionNo=rd.RequisitionNo
		INNER JOIN dbo.STOC_Status sh WITH(NOLOCK) 
			ON rh.Status=sh.StatusCode
		INNER JOIN dbo.STOC_Status sd WITH(NOLOCK) 
			ON rd.Status=sd.StatusCode
		INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm WITH(NOLOCK) 
			ON rd.ItemCode=pm.ItemCode
		INNER JOIN #tmpVendors v 
			ON rh.VendorID=v.VendorID
		INNER JOIN #tmpStores s 
			ON rh.LocationNo=s.Stores
		INNER JOIN (	SELECT VendorID, LocationNo,MAX(PONumber) AS [PONumber], MAX(CONVERT(VARCHAR(10),ApprovedDate,101)) AS [ApprovedDate] 
						FROM dbo.STOC_Requisition_Hdr WITH(NOLOCK)
						WHERE [Status]>30 
							AND [PONumber] IS NOT NULL
						GROUP BY VendorID, LocationNo) l
			ON l.VendorID=rh.VendorID 
				AND l.LocationNo=rh.LocationNo 
				AND l.PONumber=rh.PONumber
	WHERE rd.[Status]<>99 
	GROUP BY rh.RequisitionNo,rh.PONumber,rh.VendorID,rh.LocationNo,sh.StatusName,rh.ApprovedBy,CONVERT(VARCHAR(10),rh.ApprovedDate,101)
	ORDER BY rh.LocationNo,rh.VendorID

	DROP TABLE #tmpVendors
	DROP TABLE #tmpStores
END
GO
PRINT N'Altering [dbo].[STOC_GetVendorRequirements]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <2/23/2017>
-- Description:	<Get STOC vendor/item minimum order requirements........>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_GetVendorRequirements]
	@vendor varchar(12), @user varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT	 rh.VendorID
			,rh.LocationNo
			,sum(rd.RequestedQty)[OrderQty]
			,v.MinPurchaseQty
			,CAST(CAST(SUM(pm.Cost * rd.RequestedQty) AS MONEY)AS DECIMAL(12,2)) AS [OrderAmt]
			,CAST(CAST(v.MinPurchaseAmt AS MONEY)AS DECIMAL(12,2))[MinPurchaseAmt]
	FROM dbo.STOC_Requisition_Hdr rh 
		INNER JOIN dbo.STOC_Requisition_Dtl rd 
			ON rh.RequisitionNo=rd.RequisitionNo
		INNER JOIN dbo.STOC_Reorder_Control rc 
			ON rc.RequisitionNo=rh.RequisitionNo
		INNER JOIN dbo.STOC_Vendors v 
			ON rc.VendorID=v.VendorID
		LEFT OUTER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm 
			ON pm.ItemCode=rd.ItemCode
	WHERE rd.[Status]<>'99' 
		AND rd.RequestedQty > 0 
		AND rh.[Status] IN ('20','30') 
		AND rc.LockedBy=@user 
		AND CASE @vendor 
				WHEN '' 
				THEN rh.VendorID 
				ELSE @vendor 
			END = rc.VendorID
	GROUP BY rh.VendorID,rh.LocationNo,v.MinPurchaseQty,v.MinPurchaseAmt
	HAVING (SUM(rd.RequestedQty)<ISNULL(v.MinPurchaseQty,0) AND ISNULL(v.MinPurchaseQty,0)<>0) 
		OR (SUM(pm.Cost*rd.RequestedQty)<ISNULL(v.MinPurchaseAmt,0) AND ISNULL(v.MinPurchaseAmt,0)<>0)
	ORDER BY rh.VendorID,rh.LocationNo
END
GO
PRINT N'Altering [dbo].[STOC_ReleaseReqLocks]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <6/19/2012>
-- Description:	<Release STOC requisition locks>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_ReleaseReqLocks] 
	@UserID varchar(60)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @rVal INT = 0

    BEGIN TRANSACTION STOC_ReleaseLocks
    
    ------testing.....
    --declare @UserID varchar(60)
    --set @UserID = 'jblalock'
    ------end testing.....
    
    UPDATE STOC_Reorder_Control
		SET	 Locked = 'N'
			,LockedBy = NULL
			,LockedDate = NULL
    WHERE LockedBy = @UserID
    
    ----Commit or Rollback trans...........
	SET @rVal = @@ERROR
    IF @rVal=0
		BEGIN
			COMMIT TRANSACTION STOC_ReleaseLocks
			RETURN @rVal
		END
	ELSE
		BEGIN
			ROLLBACK  TRANSACTION STOC_ReleaseLocks
			RETURN @rVal
		END
END
GO
PRINT N'Altering [dbo].[STOC_ReqReorderItemUpdate]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <8/2/15>
-- Description:	<Cancel or Active reorder items currenlty on Requisitions
-- =============================================
ALTER PROCEDURE [dbo].[STOC_ReqReorderItemUpdate]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @Zero20 VARCHAR(20) = REPLICATE('0',20)

	-- Find items on reqs that are no longer reorderable and set to canceled
	IF EXISTS(	SELECT rd.ItemCode 
				FROM STOC_Requisition_Dtl rd 
					INNER JOIN STOC_Requisition_Hdr rh 
						ON rd.RequisitionNo=rh.RequisitionNo
					INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm 
						ON pm.ItemCode=rd.ItemCode
					LEFT OUTER JOIN STOC_TeaserData st 
						ON RIGHT(@Zero20 + ReorderItemCode,20)=rd.ItemCode
				WHERE rd.[Status]<35 
					AND st.ItemCode IS NULL 
					AND pm.Reorderable='N')
		BEGIN
			SELECT DISTINCT 
				 rd.RequisitionNo
				,rd.ItemCode
			INTO #cancelItems
			FROM dbo.STOC_Requisition_Dtl rd 
				INNER JOIN dbo.STOC_Requisition_Hdr rh 
					on rd.RequisitionNo=rh.RequisitionNo
				INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm 
					ON pm.ItemCode=rd.ItemCode
				LEFT OUTER JOIN STOC_TeaserData st 
					ON RIGHT(@Zero20 + ReorderItemCode,20)=rd.ItemCode
			WHERE rd.[Status]<35 
				AND st.ItemCode IS NULL 
				AND pm.Reorderable='N'

			-- Cancel items
			UPDATE rd
				set rd.[Status]=99
			FROM dbo.STOC_Requisition_Dtl rd 
				INNER JOIN #cancelItems c 
					ON rd.ItemCode=c.ItemCode 
					AND rd.RequisitionNo=c.RequisitionNo
			
			SELECT DISTINCT rh.RequisitionNo
			INTO #cancelReqs
			FROM STOC_Requisition_Dtl rd 
				INNER JOIN STOC_Requisition_Hdr rh 
					ON rd.RequisitionNo=rh.RequisitionNo
			WHERE rh.RequisitionNo IN (SELECT DISTINCT RequisitionNo FROM #cancelItems) 
				AND (	SELECT COUNT(ItemCode) 
						FROM dbo.STOC_Requisition_Dtl 
						WHERE rd.RequisitionNo=RequisitionNo 
							AND [Status]<99)=0
				AND rh.[Status]<>99 
				AND rh.Status>35

			-- Cancel requisitions if all items are canceled
			IF EXISTS(SELECT RequisitionNo FROM #cancelReqs)
				BEGIN
					UPDATE rh
						SET	 rh.[Status]=99
					FROM dbo.STOC_Requisition_Hdr rh 
						INNER JOIN #cancelReqs c 
							ON rh.RequisitionNo=c.RequisitionNo
					
					UPDATE rc
						SET	 rc.[Status]=99
					FROM dbo.STOC_Reorder_Control rc 
						INNER JOIN #cancelReqs c 
							ON rc.RequisitionNo=c.RequisitionNo
					
					-- Update audit log
					IF EXISTS(SELECT rl.RequisitionNo FROM STOC_Requisition_Audit_Log rl INNER JOIN #cancelReqs c ON rl.RequisitionNo=c.RequisitionNo WHERE rl.ProcessedFlag=0)
						BEGIN
							UPDATE rl
								SET	 ProcessedDate=GETDATE()
									,ProcessedFlag=1
									,Comments='Canceled'
							FROM dbo.STOC_Requisition_Audit_Log rl 
								INNER JOIN #cancelReqs c 
									ON rl.RequisitionNo=c.RequisitionNo
							WHERE rl.ProcessedFlag=0
						END
				END
				
			DROP TABLE #cancelItems
			DROP TABLE #cancelReqs
		END

	-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
	-- Find items on reqs that are canceled that are reorderable again
	/*
		select distinct rd.RequisitionNo,rd.ItemCode 
		into #reactItems
		from STOC_Requisition_Dtl rd inner join STOC_Requisition_Hdr rh on rd.RequisitionNo=rh.RequisitionNo
			left outer join STOC_TeaserData st on RIGHT('00000000000000000000' + ReorderItemCode,20)=rd.ItemCode
		where rh.Status<35 and rd.Status=99 and st.ItemCode is not null

		update rd
		set rd.Status=rh.Status
		from STOC_Requisition_Dtl rd inner join STOC_Requisition_Hdr rh on rd.RequisitionNo=rd.RequisitionNo
			inner join #reactItems c on rd.ItemCode=c.ItemCode and rd.RequisitionNo=c.RequisitionNo

		drop table #reactItems
	*/
	-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
END
GO
PRINT N'Altering [dbo].[STOC_SUP_GetNewChangedItems]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <4/4/2017>
-- Description:	<Copies new and changed supply items over to reorder applications.....>
-- =============================================
ALTER PROCEDURE [dbo].[STOC_SUP_GetNewChangedItems] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @rVal int
	declare @err int
	set @rVal = 0
	set @err = 0
	
	----=============================================================================================================================================================================================================
	----get all the active store locations...........................................................................................................................................................................
		create table #suplocs(locationno char(5), locationname char(30), locationID char(10))
		begin
			insert #suplocs
			select locationno, DistrictCode, locationid 
			from [$(HPB_Prime)].[dbo].[Locations]
			where (retailstore = 'y' and isnumeric(locationno) = 1 and status = 'A' and CAST(locationno as int) between 1 and 200)
				or (Status='A' and UserInt1=1 and locationno!='00888')
		end
	----=============================================================================================================================================================================================================
	set @err = @@ERROR
	----=============================================================================================================================================================================================================
	----get items that have changed..................................................................................................................................................................................
		select pm.Title,right(pm.Itemcode,8)[ItemCode],pm.PurchaseFromVendorID [VendorID],pm.SectionCode,pm.Cost,pm.Price,case when ISNULL(pm.ISBN,'')='' then pmd.UPC else pm.ISBN end [ISBN],isnull(pmrc.ConversionQty,0)[UnitsPerCase]
		into #supchangeItems
		from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmaster pm
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmasterdist pmd
			on pm.itemcode = pmd.itemcode
			left outer join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.ProductMasterReorderConversion pmrc
			on pm.itemcode = pmrc.itemcode
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.vendormaster v
			on pm.purchasefromvendorid = v.vendorid
		where pmd.lastchangedate >= DATEADD(MINUTE,-61,getdate())
			and pm.reorderable = 'Y' and isnull(v.userchar30,'') <> '' and v.userchar30 = 'Supplies' and v.VendorID='WHPBSUPPLY' 

	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----update the changed items.....................................................................................................................................................................................
		update s
		set s.Title=i.Title,s.SectionCode=i.SectionCode,s.Cost=i.Cost,s.Price=i.Price,s.ISBN=i.ISBN,s.CaseQty=i.UnitsPerCase,s.VendorID=i.VendorID
		from STOC_TeaserData s inner join #supchangeItems i on s.ReorderItemCode=i.itemcode
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----insert the missing changed items.....................................................................................................................................................................................
		insert into STOC_TeaserData
		select l.locationno,l.locationname,l.locationID,i.title,'',i.itemcode,'',i.vendorid,i.sectioncode,1,i.cost,i.price,null,0,0,0,0,0,null,0,null,0,0,0,0,0,0,i.isbn,0,GETDATE(),i.UnitsPerCase,0,0,'NA / NA / NA / NA',0,0,0,0,0,0
		from #suplocs l cross join #supchangeItems i
		where i.ItemCode not in (select distinct ReorderItemCode from STOC_TeaserData)
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----get all the newly reorderable items for insertion............................................................................................................................................................
		select pm.Title,right(pm.Itemcode,8)[ItemCode],pm.PurchaseFromVendorID [VendorID],pm.SectionCode,pm.Cost,pm.Price,case when ISNULL(pm.ISBN,'')='' then pmd.UPC else pm.ISBN end [ISBN],isnull(pmrc.ConversionQty,0)[UnitsPerCase]
		into #supnewItems
		from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmaster pm
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmasterdist pmd
			on pm.itemcode = pmd.itemcode
			left outer join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.ProductMasterReorderConversion pmrc
			on pm.itemcode = pmrc.itemcode
			inner join OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.vendormaster v
			on pm.purchasefromvendorid = v.vendorid
		where cast(convert(varchar(10),pm.createdate,120)as datetime) = cast(convert(varchar(10),getdate(),120)as datetime)
			and pm.reorderable = 'Y' and isnull(v.userchar30,'') <> '' and v.userchar30 = 'Supplies' and v.VendorID='WHPBSUPPLY' 
			and right(pm.Itemcode,8) not in (select distinct ReorderItemCode from STOC_TeaserData)
		
		select t.LocationNo,t.ReorderItemCode,t.ISBN,t.Pending,t.PendXref,t.QtyOnHand,t.SIPSQOH,t.SoldXRef
		into #supupdates
		from STOC_TeaserData t 
		where (LTRIM(RTRIM(t.ISBN))<>'' and t.ISBN in (select distinct ISBN from #supnewItems)) or
			(LTRIM(RTRIM(t.ISBN))<>'' and t.ISBN in (select distinct ISBN from #supchangeItems))
		
		--------copy the items to HPB_Prime as well....
		insert into [$(HPB_Prime)].[dbo].[ProductMaster](ItemCode,ItemAlias,Description,ProductType,VendorID,ValidCost,Cost,CostBasis,PriceMethod,AllowRegisterPricing,Price,AltPrice,SectionCode,DistributionCategory
           ,SchemeID,Title,ISBN,PurchaseFromVendorID,LastPurchaseOrder,Note,LastVoucherNumber,LastInvoiceNo,CreateDate,ReclassFromItemCode,Reorderable,InternetItem,InternetMinQty,InternetMaxQty
           ,MfgSuggestedPrice,UpdateQOH,AllowRegisterTitle,KeyWords,UserChar15,UserChar30,UserDate1,UserDate2,UserInt1,UserInt2,UserNum1,UserNum2,rowguid)
		select pm.ItemCode,pm.ItemAlias,pm.Description,pm.ProductType,pm.VendorID,pm.ValidCost,pm.Cost,pm.CostBasis,pm.PriceMethod,pm.AllowRegisterPricing,pm.Price,pm.AltPrice,pm.SectionCode,pm.DistributionCategory
           ,pm.SchemeID,pm.Title,pm.ISBN,pm.PurchaseFromVendorID,pm.LastPurchaseOrder,pm.Note,pm.LastVoucherNumber,pm.LastInvoiceNo,pm.CreateDate,pm.ReclassFromItemCode,pm.Reorderable,pm.InternetItem,pm.InternetMinQty
           ,pm.InternetMaxQty,pm.MfgSuggestedPrice,pm.UpdateQOH,pm.AllowRegisterTitle,pm.KeyWords,pm.UserChar15,pm.UserChar30,pm.UserDate1,pm.UserDate2,pm.UserInt1,pm.UserInt2,pm.UserNum1,pm.UserNum2,pm.rowguid
		from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmaster pm
			inner join #supnewItems i on pm.itemcode = RIGHT('00000000000000'+i.itemcode,20)
		where i.ItemCode not in (select ItemCode from [$(HPB_Prime)].[dbo].[ProductMaster] where ItemCode=i.ItemCode)
		
		insert into [$(HPB_Prime)].[dbo].[ProductMasterDist](ItemCode,Discount,VendorItemNo,ASIN,SchemeID,CreatedBy,LastChangeBy,LastChangeDate,CalcCost,CalcDate,CalcOveride
           ,CalcDesc,ReorderableItem,ReportItemCode,RetailText,UPC,TTBProdType,UnitsPerCase)
		select pmd.ItemCode,pmd.Discount,pmd.VendorItemNo,pmd.ASIN,pmd.SchemeID,pmd.CreatedBy,pmd.LastChangeBy,pmd.LastChangeDate,pmd.CalcCost,pmd.CalcDate,pmd.CalcOveride
           ,pmd.CalcDesc,pmd.ReorderableItem,pmd.ReportItemCode,pmd.RetailText,pmd.UPC,pmd.TTBProdType,pmd.UnitsPerCase
		from OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.productmasterdist pmd
			inner join #supnewItems i on pmd.itemcode = RIGHT('00000000000000'+i.itemcode,20) 
		where i.ItemCode not in (select ItemCode from [$(HPB_Prime)].[dbo].[ProductMasterDist] where ItemCode=i.ItemCode)
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	----=============================================================================================================================================================================================================
	----setup the data to insert into the STOC_TeaserData table......................................................................................................................................................
		insert into STOC_TeaserData
			select l.locationno,l.locationname,l.locationID,i.title,'',i.itemcode,'',i.vendorid,i.sectioncode,1,i.cost,i.price,null,0,0,0,0,0,null,0,null,0,0,0,0,0,0,i.isbn,0,GETDATE(),i.UnitsPerCase,0,0,'NA / NA / NA / NA',0,0,0,0,0,0
			from #suplocs l 
				cross join #supnewItems i
		
		update t
			set t.PendXref=u.Pending,t.XRefQty=u.QtyOnHand,t.SIPSQOH=u.SIPSQOH, t.SoldXRef=u.SoldXRef
		from STOC_TeaserData t 
			inner join #supupdates u 
				on t.LocationNo=u.LocationNo 
					and t.ReorderItemCode!=u.ReorderItemCode 
					and t.ISBN=u.ISBN
		where t.ISBN in (select distinct ISBN from #supnewItems) 
			or t.ISBN in (select distinct ISBN from #supchangeItems)
	----=============================================================================================================================================================================================================
	if @err = 0 begin set @err = @@ERROR end
	
	drop table #suplocs
	drop table #supnewItems
	drop table #supchangeItems
	drop table #supupdates

	set @rVal = @err
	return @rVal

END
GO
PRINT N'Altering [dbo].[VX_AddReqItem]...';


GO

-- =============================================
-- Author:		<Joey B.>
-- Create date: <10/24/12>
-- Description:	<Insert/Update items on requisitions....>
-- =============================================
ALTER PROCEDURE [dbo].[VX_AddReqItem]
	 @requisitionno CHAR(6)
	,@itemcode VARCHAR(20)
	,@venditem VARCHAR(20)
	,@reqQty INT
	,@sugQty INT
	,@user VARCHAR(20)
	,@bakOrdFlag BIT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
    
	/*
		TESTING:
			declare @requisitionno char(6)
			declare @itemcode varchar(20)
			declare @venditem varchar(20)
			declare @reqQty int
			declare @sugQty int
			declare @user varchar(20)
			set @requisitionno = '146977'
			set @itemcode = '10045925'
			set @venditem = ''
			set @reqQty = 10
			set @sugQty = 10
			set @user = 'jblalock'
	*/
	
	DECLARE @rVal INT = 0
	BEGIN TRANSACTION VX_ReqUPD

	-- Get item cost
	declare	 @cost MONEY
			,@poNo CHAR(6)
	
	
	-- Get item cost
	SET @cost = (SELECT DISTINCT ISNULL(MAX(cost),0) FROM STOC_TeaserData WITH (NOLOCK) WHERE ReorderItemCode = @itemcode)
	-- Get full lenght itemcode.......
	SET @itemcode = RIGHT(REPLICATE('0',20)+@itemcode,20)	
	SELECT @poNo = PONumber 
	FROM VX_Reorder_Control WITH (NOLOCK) 
	WHERE RequisitionNo = @requisitionno

	----create requisition header if one does not exist....
	IF NOT EXISTS(SELECT requisitionno FROM VX_requisition_hdr WHERE RequisitionNo = @requisitionno)
		BEGIN
			INSERT INTO VX_requisition_hdr (requisitionno,locationno,vendorid,ponumber,requisitiondate,requestby,[Status])
				SELECT src.RequisitionNo,src.StoreNo,src.VendorID,src.PONumber,src.RequisitionDate,@user,20
				FROM VX_Reorder_Control src
				WHERE RequisitionNo = @requisitionno
			
			UPDATE VX_Reorder_Control
				SET [Status] = 20
			WHERE RequisitionNo = @requisitionno
		END

	-- Check if item exists on order and either update or insert......
	IF EXISTS(SELECT itemcode FROM VX_Requisition_Dtl WHERE RequisitionNo = @requisitionno AND ItemCode = @itemcode)
		BEGIN
			UPDATE VX_Requisition_Dtl
				SET	 RequestedQty = @reqQty
					,RequestedBy = @user
					,RequestedDate = GETDATE()
					,ExtCost = @cost*@reqQty
					,PONumber = @poNo
					,AllowBackOrder =  CASE (@reqQty) WHEN 0 THEN 0 ELSE @bakOrdFlag END
					,VendorItem = @venditem
			WHERE RequisitionNo = @requisitionno 
				AND ItemCode = @itemcode	
			
			-- Update reqamt on header
			UPDATE VX_requisition_hdr
				SET	 ReqAmt = (SELECT SUM(ISNULL(extcost,0)) FROM VX_Requisition_Dtl WHERE requisitionno = @requisitionno)
					,ReqQty = (select SUM(isnull(requestedqty,0)) FROM VX_Requisition_Dtl WHERE requisitionno = @requisitionno)	
			WHERE RequisitionNo = @requisitionno
		end
	else
		begin
			declare @nextLineNo int
			select @nextLineNo = isnull(MAX(cast(LineNum as int)),0) + 1 from VX_requisition_dtl where requisitionno = @requisitionno
		
			insert into VX_requisition_dtl (requisitionno,LineNum,itemcode,vendoritem,requestedqty,suggestedqty,confirmedqty,canceledqty,backorderqty,requestedby,requesteddate,cost,extcost,status,PONumber,allowbackorder,ShipFrom)
				select @requisitionno,CAST(@nextLineNo as varchar(6)),@itemcode,@venditem,@reqQty,@sugQty,0,0,0,@user,GETDATE(),@cost,@cost*@reqQty,20,@poNo,@bakOrdFlag,null
			
			--update reqamt on header
			UPDATE VX_requisition_hdr
				set reqamt = (select SUM(isnull(extcost,0)) from VX_requisition_dtl where requisitionno = @requisitionno),
					reqqty = (select SUM(isnull(requestedqty,0)) from VX_requisition_dtl where requisitionno = @requisitionno)	
			where requisitionno = @requisitionno			
		end

	-- Commit or Rollback trans...........
	set @rVal = @@ERROR
	if @rVal=0
		begin
			Commit Transaction VX_ReqUPD
			return @rVal
		end
	else
		begin
			Rollback  Transaction VX_ReqUPD
			return @rVal
		end
END
GO
PRINT N'Altering [dbo].[VX_ApproveReqs]...';


GO

-- =============================================
-- Author:		Joey B.
-- Create date: 10/24/2012
-- Description:	Approve Requisitions
-- =============================================
ALTER PROCEDURE [dbo].[VX_ApproveReqs] 
	@user VARCHAR(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;

	/*
		TESTING:
			declare @user varchar(20)
			set @user = 'jblalock'
	*/

	DECLARE @rVal INT = 0
	BEGIN TRANSACTION VX_ReqApprove

	-- Get reqs for approval
	CREATE TABLE #reqTmp (rowid INT IDENTITY(1,1), reqNo CHAR(6), PONo CHAR(6))
	
	INSERT INTO #reqTmp
		SELECT DISTINCT RequisitionNo,PONumber
		FROM VX_Reorder_Control src
		WHERE LockedBy = @user 
			AND Locked = 'Y' 
			AND RequisitionNo IS NOT NULL 
			AND [Status] = 40
			AND EXISTS(SELECT itemcode FROM VX_Requisition_Dtl WHERE RequisitionNo = src.RequisitionNo AND RequestedQty > 0)

	-- Loop thru and update each req independently to ensure gaps in datetime stamps......
	DECLARE @loop int
	SELECT @loop = MAX(rowID) 
	FROM #reqTmp

	WHILE @loop > 0
	BEGIN 
		DECLARE	 @curDT  DATETIME = GETDATE()
				,@curReq CHAR(6)
				,@curPO  CHAR(6)
		
		SELECT	 @curReq = reqNo
				,@curPO = PONo 
		FROM #reqTmp 
		WHERE rowid = @loop
		
		-- Update STOC_Reorder_Control status to approved for user's locked reqs
		UPDATE VX_Reorder_Control
			SET [Status] = 50
		WHERE RequisitionNo = @curReq

		-- Update requisition hdr & dtl statues from STOC_Reorder_Control
		UPDATE VX_Requisition_Hdr
			SET	 [Status] = 50
				,ApprovedBy = @user
				,ApprovedDate = @curDT
		WHERE RequisitionNo = @curReq

		UPDATE VX_Requisition_Dtl
			SET	 [Status] = 50
				,ApprovedBy = @user
				,ApprovedDate = @curDT
		WHERE RequisitionNo = @curReq
		
		--Insert requisition into audit log for move to DIPS
		INSERT INTO VX_Requisition_Audit_Log
			SELECT @curReq,@curPO,@curDT,NULL,0,NULL,0
		
		SET @loop = @loop - 1
	END
	DROP TABLE #reqTmp
	-- Commit or Rollback trans...........
	SET @rVal = @@ERROR
	IF @rVal=0
		BEGIN
			COMMIT TRANSACTION VX_ReqApprove
			RETURN @rVal
		END
	ELSE
		BEGIN
			ROLLBACK  TRANSACTION VX_ReqApprove
			RETURN @rVal
		END
END
GO
PRINT N'Altering [dbo].[VX_CheckOrdResponse]...';


GO
/*
	=============================================
	Author:			Joey B.
	
	Create date:	11/7/2012
	Description:	Check for order response AND update requisitions
	=============================================
	Change History
	2012-11-07 JB		Procedure created
	2019-01-29 JB & ALB	Added altrun code for issues WHERE acknowlegements are not returned.  Allows manual run using
						po table instead of acknowledgement table.  VendorX could be upated to run using either the
						bt or edi parameter instead of the default blank (normal run) parameter
*/
ALTER  PROCEDURE [dbo].[VX_CheckOrdResponse] 
(
	@runAlt VARCHAR(3) = '' 
	-- runalt expected values are either bt = baker/taylor or edi ; uses a po table instead of an acknoweldgement table
)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--------------------------------------------------------------Process BakerTaylor updates-------------------------------------------------------
	
	-- Create AND fill temp table with pending response updates
	CREATE TABLE #response(rowid INT identity(1,1), poNo char(6))
	
	IF @runAlt = ''
		BEGIN
			INSERT INTO #response
				SELECT DISTINCT bh.OrderResponseNumber 
				FROM BakerTaylor.dbo.bulkorder_response_Header bh 
					INNER JOIN BakerTaylor.dbo.bulkorder_response_ItemDetail bd 
						ON bh.ResponseID = bd.ResponseID
					INNER JOIN dbo.VX_Submit_Audit_Log vx 
						ON bh.OrderResponseNumber = vx.PONumber
				WHERE vx.ProcessedFlag = 0
		END
	ELSE IF @runAlt='bt'
		BEGIN
			-- run alterative query because something is wrong
			INSERT INTO #response
				SELECT DISTINCT bh.OrderNumber
				FROM BakerTaylor.dbo.bulkorder_Header bh
					INNER JOIN BakerTaylor.dbo.bulkorder_ItemDetail bd
						ON bh.OrderID = bd.OrderID
					INNER JOIN VX_Submit_Audit_Log vx 
						ON bh.OrderNumber = vx.PONumber
				WHERE vx.ProcessedFlag = 0
		END

	-- Loop thru AND update each order with response
	DECLARE @loop INT
	SET @loop = (SELECT MAX(rowID) FROM #response)

	WHILE @loop > 0
	BEGIN 
		DECLARE @curPO CHAR(6)
		SELECT @curPO=poNo FROM #response WHERE rowid=@loop
	
		-- Update requisition header AND detail
		UPDATE rd
			SET rd.ConfirmedQty=ISNULL(id.QuantityShipping,0),
				rd.CanceledQty=CASE WHEN ISNULL(id.QuantityShipping,0)=0 AND ISNULL(id.QuantityBackordered,0)=0 THEN rd.RequestedQty ELSE CASE WHEN ISNULL(id.QuantityCanceled,0)=0 AND ISNULL(id.QuantityBackordered,0)=0 THEN rd.RequestedQty-ISNULL(id.QuantityShipping,0) ELSE ISNULL(id.QuantityCanceled,0) END END,
				rd.BackOrderQty=ISNULL(id.QuantityBackordered,0),
				rd.[Status] = CASE WHEN CAST(ISNULL(id.QuantityShipping,0)AS INT)=0 AND CAST(ISNULL(id.QuantityCanceled,0)AS INT)<>0 THEN 99
								WHEN CAST(ISNULL(id.QuantityShipping,0)AS INT)=0 AND CAST(ISNULL(id.QuantityBackordered,0)AS INT)=0 THEN 99
								WHEN CAST(ISNULL(id.QuantityBackordered,0)AS INT)<>0 THEN 98
								ELSE 40 END			
				,rd.ShipFrom=ISNULL(id.LocationShippingFrom,'')
				,rd.Comments=ISNULL(id.LineStatusDescription,'')
				,rd.ExtCost=ISNULL(id.QuantityShipping,0)*rd.Cost
		FROM VX_Requisition_Dtl rd 
			INNER JOIN BakerTaylor.dbo.bulkorder_response_Header hd 
				ON rd.PONumber=hd.OrderResponseNumber
			INNER JOIN BakerTaylor.dbo.bulkorder_response_ItemDetail id 
				ON hd.ResponseID=id.ResponseID 
					AND id.ProductIdentifier = rd.VendorItem
		WHERE rd.PONumber=@curPO 
			AND rd.RequestedQty <> 0
		
		-- new code for Ingram and other DX Vendors
		UPDATE rd
			SET rd.ConfirmedQty=ISNULL(ak.QuantityShipped,0),
				rd.CanceledQty=CASE WHEN ISNULL(ak.QuantityShipped,0)=0 AND ISNULL(ak.QuantityBackordered,0)=0 THEN rd.RequestedQty ELSE CASE WHEN ISNULL(ak.QuantityCancelled,0)=0 AND ISNULL(ak.QuantityBackordered,0)=0 THEN rd.RequestedQty-ISNULL(ak.QuantityShipped,0) ELSE ISNULL(ak.QuantityCancelled,0) END END,
				rd.BackOrderQty=ISNULL(ak.QuantityBackordered,0),
				rd.[Status] = CASE WHEN CAST(ISNULL(ak.QuantityShipped,0)AS INT)=0 AND CAST(ISNULL(ak.QuantityCancelled,0)AS INT)<>0 THEN 99
								WHEN CAST(ISNULL(ak.QuantityShipped,0)AS INT)=0 AND CAST(ISNULL(ak.QuantityBackordered,0)AS INT)=0 THEN 99
								WHEN CAST(ISNULL(ak.QuantityBackordered,0)AS INT)<>0 THEN 98
								ELSE 40 END			
				,rd.ShipFrom=''
				,rd.Comments=''
				,rd.ExtCost=ISNULL(ak.QuantityShipped,0)*rd.Cost
		FROM VX_Requisition_Dtl rd 
			INNER JOIN [HPB_EDI].[BLK].[vuAcknowledgements] AK
				ON rd.PONumber=ak.PONumber
					AND rd.VendorItem = ak.ItemIdentifier
					AND ak.QuantityCancelled > 0
			INNER JOIN [HPB_EDI].[BLK].[vuPurchaseOrders] PO
				ON ak.PONumber = po.PONumber
					AND ak.ItemIdentifier = po.ItemIdentifier
					AND Po.PONumber = @curPO -- this can be done to whole set by removing the @curpo restriction and remove from the loop
		WHERE rd.RequestedQty <> 0


		-- INSERT any backordered qty INTO backorderlog
		INSERT INTO VX_BackOrder_Log
			SELECT	 rh.VendorID
					,rh.LocationNo
					,rd.PONumber
					,rd.ItemCode
					,rd.BackOrderQty
					,GETDATE(),rd
					.Comments
			FROM VX_Requisition_Dtl rd 
				INNER JOIN VX_Requisition_Hdr rh 
					ON rd.PONumber=rh.PONumber
			WHERE rd.PONumber=@curPO 
				AND ISNULL(rd.BackOrderQty,0) <> 0
		
		-- Delete remaining items that were removed FROM the order
		delete FROM VX_Requisition_Dtl 
		WHERE PONumber=@curPO AND [Status] = 30 AND RequestedQty = 0
		
		-- Check - INSERT - update any kit items ON order
		if EXISTS(SELECT rd.ItemCode FROM VX_Requisition_Dtl rd INNER JOIN VX_Vendor_Kits vk ON rd.ItemCode=vk.ParentItem WHERE rd.PONumber=@curPO)
			 BEGIN
				-- Update any existing kit items ON orders
				UPDATE rd
					SET rd.RequestedQty=rd.RequestedQty+ISNULL((SELECT KitQty*RequestedQty FROM VX_Requisition_Dtl INNER JOIN VX_Vendor_Kits ON ItemCode=ParentItem WHERE RequisitionNo=rd.RequisitionNo AND ItemCode=vk.ParentItem AND KitItem=ISNULL(vk.KitItem,vk.ParentItem)),0),
						rd.ExtCost=rd.ExtCost+ISNULL((SELECT KitQty*RequestedQty FROM VX_Requisition_Dtl INNER JOIN VX_Vendor_Kits ON ItemCode=ParentItem WHERE RequisitionNo=rd.RequisitionNo AND ItemCode=vk.ParentItem AND KitItem=ISNULL(vk.KitItem,vk.ParentItem))*pm.Cost,0),
						rd.ConfirmedQty=rd.ConfirmedQty+ISNULL((SELECT KitQty*RequestedQty FROM VX_Requisition_Dtl INNER JOIN VX_Vendor_Kits ON ItemCode=ParentItem WHERE RequisitionNo=rd.RequisitionNo AND ItemCode=vk.ParentItem AND KitItem=ISNULL(vk.KitItem,vk.ParentItem)),0)
				FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
					INNER JOIN VX_Vendor_Kits vk 
						ON pm.ItemCode=vk.KitItem
					INNER JOIN VX_Requisition_Dtl rd 
						ON vk.KitItem=rd.ItemCode
				WHERE rd.PONumber=@curPO AND vk.KitItem in (SELECT ItemCode FROM VX_Requisition_Dtl WHERE RequisitionNo=rd.RequisitionNo)
		
				-- INSERT kit items
				INSERT INTO VX_Requisition_Dtl (requisitionno,LineNum,itemcode,vendoritem,requestedqty,suggestedqty,confirmedqty,canceledqty,backorderqty,requestedby,requesteddate,cost,extcost,[status],PONumber,allowbackorder,ShipFrom,Comments)
					SELECT DISTINCT	 rd.RequisitionNo
									,RIGHT(vk.KitItem,4)
									,vk.KitItem
									,pm.ISBN
									,vk.KitQty
									,0
									,vk.KitQty*rd.RequestedQty
									,0
									,0
									,rd
									.RequestedBy
									,GETDATE()
									,pm.Cost
									,pm.Cost*(vk.KitQty*rd.RequestedQty)
									,rd.[Status]
									,rd.PONumber
									,0
									,'VEND'
									,'AddKitItem'
					FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
						INNER JOIN VX_Vendor_Kits vk 
							ON pm.ItemCode=vk.KitItem
						INNER JOIN VX_Requisition_Dtl rd 
							ON vk.ParentItem=rd.ItemCode
					WHERE rd.PONumber=@curPO 
						AND rd.ItemCode NOT IN (SELECT distinct KitItem FROM VX_Vendor_Kits WHERE parentitem=rd.itemcode) 
						AND vk.KitItem NOT IN (SELECT ItemCode FROM VX_Requisition_Dtl WHERE RequisitionNo=rd.RequisitionNo)
					GROUP BY rd.RequisitionNo,rd.LineNum,vk.KitItem,pm.ISBN,vk.KitQty,rd.RequestedBy,vk.KitQty*rd.RequestedQty,pm.Cost,pm.Cost*(vk.KitQty*rd.RequestedQty)
							,rd.[Status],rd.PONumber,RIGHT(rd.itemcode,4)
			
				-- Update parent item
				UPDATE rd
					SET rd.CanceledQty=rd.RequestedQty,rd.ConfirmedQty=0,rd.[Status]=99,rd.Comments='KitUpdate'
				FROM VX_Requisition_Dtl rd 
					INNER JOIN VX_Vendor_Kits vk 
						ON rd.ItemCode=vk.ParentItem
				WHERE rd.PONumber=@curPO 
			 END
		
		UPDATE rh
			SET rh.[Status]=40, 
				rh.ReqQty=(SELECT SUM(ISNULL(ConfirmedQty,0)) FROM VX_Requisition_Dtl WHERE PONumber = @curPO),
				rh.ReqAmt=(SELECT SUM(ISNULL(ExtCost,0)) FROM VX_Requisition_Dtl WHERE PONumber = @curPO)
		FROM VX_Requisition_Hdr rh 
			INNER JOIN BakerTaylor.dbo.bulkorder_response_Header hd 
				ON rh.PONumber=hd.OrderResponseNumber
			INNER JOIN BakerTaylor.dbo.bulkorder_response_ItemDetail id 
				ON hd.ResponseID=id.ResponseID
		WHERE rh.PONumber=@curPO
			
		-- Update reorder control table AND audit log
		UPDATE VX_Reorder_Control
			SET [Status]=40
		WHERE PONumber=@curPO
		
		UPDATE VX_Submit_Audit_Log
			SET ProcessedFlag=1,ResponseDate=GETDATE()
		WHERE PONumber=@curPO
		
		SET @loop = @loop - 1
	END
	
	----------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------Process EDI updates-------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------------------------------
	
	-- Create AND fill temp table with pending response updates
	CREATE TABLE #EDIresponse(rowid INT identity(1,1), poNo char(6))
	
	IF @runAlt=''
		BEGIN	
			INSERT INTO #EDIresponse (poNo)
				SELECT DISTINCT ah.PONumber 
				FROM [HPB_EDI].[blk].[AcknowledgeHeader] ah 
					INNER JOIN dbo.VX_Submit_Audit_Log vx 
						ON ah.PONumber=vx.PONumber
				WHERE vx.ProcessedFlag = 0
		END
	ELSE if @runAlt='edi'
		BEGIN
			INSERT INTO #EDIresponse (poNo)
				SELECT h.PONumber
				FROM [HPB_EDI].[BLK].[PurchaseOrderHeader] h
					INNER JOIN dbo.VX_Submit_Audit_Log vx 
						ON h.PONumber=vx.PONumber
				WHERE vx.ProcessedFlag = 0
				GROUP BY h.PONumber
		END

	-- Loop thru AND update each order with response
	DECLARE	 @EDIloop INT
	DECLARE @INSERT TABLE ( ackid INT, po INT)

	SET @EDIloop = (SELECT MAX(rowID) FROM #EDIresponse)

	WHILE @EDIloop > 0
	BEGIN 
		DECLARE @EDIcurPO CHAR(6)
		
		SELECT @EDIcurPO=poNo 
		FROM #EDIresponse 
		WHERE rowid=@EDIloop
	
		SELECT @EDIcurPO
		
		-- Update requisition header AND detail. Dummied this up to match what wAS ordered per KBeverly

		IF @runAlt='edi'
			BEGIN

				-- INSERT values INTO 855 table AND 855 manual add table
				INSERT INTO [HPB_EDI].[blk].[AcknowledgeHeader] (	 [PONumber], [IssueDate], [VendorID], [ReferenceNo], [ShipToLoc], [ShipToSAN], [BillToLoc]
															,[BillToSAN], [ShipFromLoc], [ShipFromSAN], [TotalLines], [TotalQuantity], [CurrencyCode]
															,[InsertDateTime], [Processed], [ProcessedDateTime], [ResponseACKSent], [ResponseAckNo],[GSNo])
				OUTPUT INSERTED.AckID, INSERTED.PONumber INTO @INSERT (ackid, po)
					SELECT	 h.PONumber, h.IssueDate, h.VendorID, 'Manual' AS ReferenceNo, h.ShipToLoc, h.ShipToSAN, h.BillToLoc
							,h.BillToSAN, h.ShipFromLoc, h.ShipFromSAN, h.TotalLines, h.TotalQuantity, null AS CurrencyCode
							,GETDATE() AS insertdatetime, 1 AS Processed, GETDATE() AS ProcessedDateTime, 1 AS ResponseAckSent, '0000' AS responseackno,'0000' AS gsno
					FROM [HPB_EDI].[BLK].[PurchaseOrderHeader] h
						INNER JOIN #EDIresponse r
							ON h.PONumber = r.poNo
					WHERE  r.poNo=@EDIcurPO

				INSERT INTO [HPB_EDI].[dbo].[855_Ack_ManualAdd] (AckId, PONumber, Descript)
					SELECT i.ackid, i.po, 'Ack not received FROM vendor-cxreating manual record'
					FROM @INSERT i				

				INSERT INTO [HPB_EDI].[BLK].[AcknowledgeDetail] ([AckID], [LineNo], [LineStatusCode], [ItemStatusCode], [UnitOfMeasure], [QuantityOrdered], [QuantityShipped]
														,[QuantityCancelled], [QuantityBackordered], [UnitPrice], [PriceCode], [CurrencyCode], [ItemIDCode]
														,[ItemIdentifier], [ItemDesc])
					SELECT i.ackid, d.[LineNo], '' AS LineStatusCode , '' AS ItemStatusCode, d.UnitOfMeasure, d.Quantity, d.Quantity AS ShipQty
							,0 AS CancelQty, 0 AS BackOrdQty,d.UnitPrice, d.PriceCode,   null AS CurrencyCode, d.ItemIDcode
							,d.ItemIdentifier, NULL AS itemdesc
					FROM [HPB_EDI].[BLK].[PurchaseOrderHeader] h
						INNER JOIN @INSERT i
							ON i.po = h.PONumber
						INNER JOIN [HPB_EDI].[BLK].[PurchaseOrderDetail] d
							ON h.OrderId = d.OrderId
					WHERE h.PONumber = @EDIcurPO			

					delete FROM @INSERT WHERE po = @EDIcurPO
			END

		UPDATE rd
			SET rd.ConfirmedQty=rd.RequestedQty--CASE WHEN ISNULL(ad.ShipQty,0)=0 THEN rd.RequestedQty ELSE ISNULL(ad.ShipQty,0) END,
				,rd.CanceledQty=0--CASE WHEN ISNULL(ad.ShipQty,0)=0 THEN 0 ELSE CASE WHEN ISNULL(ad.ShipQty,0)=0 AND ISNULL(ad.BackOrdQty,0)=0 THEN rd.RequestedQty ELSE CASE WHEN ISNULL(ad.CanceledQty,0)=0 AND ISNULL(ad.BackOrdQty,0)=0 THEN rd.RequestedQty-ISNULL(ad.ShipQty,0) ELSE ISNULL(ad.CanceledQty,0) END END END,
				,rd.BackOrderQty=0--ISNULL(ad.BackOrdQty,0),
				,rd.[Status] = 40-- CASE --WHEN CAST(ISNULL(ad.ShipQty,0)AS INT)=0 AND CAST(ISNULL(ad.CanceledQty,0)AS INT)<>0 THEN 99
								----WHEN CAST(ISNULL(ad.ShipQty,0)AS INT)=0 AND CAST(ISNULL(ad.BackOrdQty,0)AS INT)=0 THEN 99
								--WHEN CAST(ISNULL(ad.BackOrdQty,0)AS INT)<>0 THEN 98
								--ELSE 40 END			
				,rd.ShipFrom=ISNULL(ah.ShipFromLoc,'')
				,rd.Comments=ISNULL(ad.LineStatusCode+'/'+ad.ItemStatusCode,'')
				,rd.ExtCost=rd.RequestedQty*rd.Cost --CASE WHEN ISNULL(ad.ShipQty,0)=0 THEN rd.RequestedQty ELSE ISNULL(ad.ShipQty,0) END*rd.Cost
		FROM VX_Requisition_Dtl rd 
			INNER JOIN [HPB_EDI].[blk].[AcknowledgeHeader] ah
				ON ah.PONumber=rd.PONumber
			INNER JOIN [HPB_EDI].[BLK].[AcknowledgeDetail] ad 
				ON ah.AckID=ad.AckID 
					AND rd.VendorItem=CASE WHEN ad.ItemIDCode='EN' 
											THEN LEFT(ad.ItemIdentifier,13) 
											ELSE ad.ItemIdentifier 
									   END
		WHERE rd.PONumber=@EDIcurPO 
			AND rd.RequestedQty <> 0
			
		
		-- Check - INSERT - update any kit items ON order
		if EXISTS(SELECT rd.ItemCode FROM VX_Requisition_Dtl rd INNER JOIN VX_Vendor_Kits vk ON rd.ItemCode=vk.ParentItem WHERE rd.PONumber=@EDIcurPO)
			 BEGIN
				-- Update any existing kit items ON orders
				UPDATE rd
					SET	 rd.RequestedQty=rd.RequestedQty+ISNULL((SELECT KitQty*RequestedQty FROM VX_Requisition_Dtl INNER JOIN VX_Vendor_Kits ON ItemCode=ParentItem WHERE RequisitionNo=rd.RequisitionNo AND kititem=rd.itemcode),0)
						,rd.ExtCost=rd.ExtCost+ISNULL((SELECT KitQty*RequestedQty FROM VX_Requisition_Dtl INNER JOIN VX_Vendor_Kits ON ItemCode=ParentItem WHERE RequisitionNo=rd.RequisitionNo AND kititem=rd.itemcode)*pm.Cost,0)
						,rd.ConfirmedQty=rd.ConfirmedQty+ISNULL((SELECT KitQty*RequestedQty FROM VX_Requisition_Dtl INNER JOIN VX_Vendor_Kits ON ItemCode=ParentItem WHERE RequisitionNo=rd.RequisitionNo AND kititem=rd.itemcode),0)
				FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
					INNER JOIN VX_Vendor_Kits vk 
						ON pm.ItemCode=vk.KitItem
					INNER JOIN VX_Requisition_Dtl rd 
						ON vk.KitItem=rd.ItemCode
				WHERE rd.PONumber=@EDIcurPO AND vk.KitItem in (SELECT ItemCode FROM VX_Requisition_Dtl WHERE RequisitionNo=rd.RequisitionNo)
		
				-- Insert kit items
				INSERT INTO VX_Requisition_Dtl (requisitionno,LineNum,itemcode,vendoritem,requestedqty,suggestedqty,confirmedqty,canceledqty,backorderqty,requestedby,requesteddate,cost,extcost,[Status],PONumber,allowbackorder,ShipFrom,Comments)
					SELECT DISTINCT 
						 rd.RequisitionNo
						,RIGHT(vk.KitItem,4)
						,vk.KitItem
						,pm.ISBN
						,vk.KitQty
						,0
						,vk.KitQty*rd.RequestedQty
						,0
						,0
						,rd.RequestedBy
						,GETDATE()
						,pm.Cost
						,pm.Cost*(vk.KitQty*rd.RequestedQty)
						,rd.[Status]
						,rd.PONumber
						,0,
						'VEND'
						,'AddKitItem'
					FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
						INNER JOIN VX_Vendor_Kits vk 
							ON pm.ItemCode=vk.KitItem
						INNER JOIN VX_Requisition_Dtl rd 
							ON vk.ParentItem=rd.ItemCode
					WHERE rd.PONumber=@EDIcurPO 
						AND rd.ItemCode NOT IN (SELECT distinct KitItem FROM VX_Vendor_Kits WHERE parentitem=rd.itemcode) 
						AND vk.KitItem NOT IN (SELECT ItemCode FROM VX_Requisition_Dtl WHERE RequisitionNo=rd.RequisitionNo)
					GROUP BY rd.RequisitionNo,rd.LineNum,vk.KitItem,pm.ISBN,vk.KitQty,rd.RequestedBy,vk.KitQty*rd.RequestedQty,pm.Cost,pm.Cost*(vk.KitQty*rd.RequestedQty),rd.[Status]
							,rd.PONumber,right(rd.itemcode,4)
			
				-- Update parent item
				UPDATE rd
					SET	 rd.CanceledQty=rd.RequestedQty
						,rd.ConfirmedQty=0
						,rd.[Status]=99
						,rd.Comments='KitUpdate'
				FROM VX_Requisition_Dtl rd 
					INNER JOIN VX_Vendor_Kits vk 
						ON rd.ItemCode=vk.ParentItem
				WHERE rd.PONumber=@EDIcurPO 
			 END
		
		UPDATE rh
			SET rh.[Status]=40,
				rh.ReqQty=(SELECT SUM(ISNULL(ConfirmedQty,0)) FROM VX_Requisition_Dtl WHERE PONumber = @EDIcurPO),
				rh.ReqAmt=(SELECT SUM(ISNULL(ExtCost,0)) FROM VX_Requisition_Dtl WHERE PONumber = @EDIcurPO)
		FROM VX_Requisition_Hdr rh 
			INNER JOIN [HPB_EDI].[blk].[AcknowledgeHeader] ah
				ON ah.PONumber=rh.PONumber
			INNER JOIN [HPB_EDI].[BLK].[AcknowledgeDetail] ad
				ON ad.AckID=ah.AckID
		WHERE rh.PONumber=@EDIcurPO
		
		-- Update reorder control table AND audit log
		UPDATE VX_Reorder_Control
			SET [Status]=40
		WHERE PONumber=@EDIcurPO
		
		UPDATE VX_Submit_Audit_Log
			SET	 ProcessedFlag=1
				,ResponseDate=GETDATE()
		WHERE PONumber=@EDIcurPO
		
		UPDATE [HPB_EDI].[blk].[AcknowledgeHeader]
			SET	 Processed=1
				,ProcessedDateTime=GETDATE()
		WHERE PONumber=@EDIcurPO
		
		SET @EDIloop = @EDIloop - 1
	END
	
		----------------------------------------------------------------------------------------------------------------------------------------
		-- Check AND delete any backorders older than 2 weeks or shipped backorders
		UPDATE bl
			SET bl.VendorID = 'Delete'
		FROM VX_BackOrder_Log bl 
			INNER JOIN VX_Requisition_Dtl rd 
				ON bl.ponumber=rd.PONumber 
					AND bl.itemcode=rd.ItemCode
		WHERE CAST(CONVERT(VARCHAR(10),backorderdate,112)AS DATETIME) < DATEADD(dd,-1,CAST(CONVERT(VARCHAR(10),GETDATE(),112)AS DATETIME))
		 AND (rd.VendorItem IN (SELECT ProductIdentifier FROM BakerTaylor.dbo.bulkorder_shipnotice_ItemDetail WHERE BuyersOrderReference=bl.ponumber AND ProductIdentifier=rd.VendorItem AND ShippedQuantity=bl.backorderqty)
			OR CAST(CONVERT(VARCHAR(10),bl.backorderdate,112)AS DATETIME) < DATEADD(week,-2,CAST(CONVERT(VARCHAR(10),GETDATE(),112)AS DATETIME)))

		DELETE FROM VX_BackOrder_Log WHERE VendorID = 'Delete'
END
GO
PRINT N'Altering [dbo].[VX_CopyOrdersToDIPS]...';


GO

-- =============================================
-- Author:		Joey B.
-- Create date: 11/12/2012
-- Description:	Copies approved orders to HPB_d
-- =============================================
ALTER PROCEDURE [dbo].[VX_CopyOrdersToDIPS] 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    DECLARE	 @rVal INT = 0
			,@err  INT = 0
	
	DECLARE @tmpReqHdr TABLE (RowID INT identity(1,1),ReqNo CHAR(6),PONo CHAR(6),LocNo CHAR(5),VendID VARCHAR(12),ReqDate DATETIME,ReqBy VARCHAR(30),AprvBy VARCHAR(30),AprvDate DATETIME,ReqQty INT,ReqAmt MONEY)
	DECLARE @tmpReqDtl TABLE (ReqNo CHAR(6),PONo CHAR(6),ItemCode CHAR(20),VendItemNo VARCHAR(20),LineNum VARCHAR(6),ReqQty INT,ReqBy VARCHAR(30),ReqDate DATETIME,AprvBy VARCHAR(30),AprvDate DATETIME,Cost MONEY,ExtCost MONEY)
	DECLARE @tmpOrdHdr TABLE (PONo CHAR(6),LocNo CHAR(5),POType VARCHAR(1),BuyerID VARCHAR(10),VendorID VARCHAR(10),TermsCode VARCHAR(10),PODate SMALLDATETIME,CancelDate SMALLDATETIME,DueDate SMALLDATETIME,OrdAmt MONEY,Printed BIT,SendPO BIT,SpecInstr VARCHAR(255),Complete BIT,DateComplete BIT,SkeletonCrtFrom VARCHAR(6),CrtFromReq BIT,ShipToName VARCHAR(30),ShipToAddr1 VARCHAR(30),ShipToAddr2 VARCHAR(30),ShipToAddr3 VARCHAR(30))
	DECLARE @tmpOrdDtl TABLE (PONo CHAR(6),POLine CHAR(5),ItemCode CHAR(20),ISBN VARCHAR(13),DistType VARCHAR(1),OrdQty INT,UnitType VARCHAR(3),UnitCost MONEY,ExtLineCost MONEY,SchemeID VARCHAR(20),FileClaimAdj BIT,VouchNo VARCHAR(10),LocNo CHAR(5),Complete BIT, DateComplete SMALLDATETIME,SpecInstr VARCHAR(50),Discount float,RemovedFromRct BIT,QtyCnt INT,QtyPer INT,ExtQty INT,RowAddFrom VARCHAR(20),RowAddBy CHAR(10),RowAddDate DATETIME)
	
	INSERT INTO @tmpReqHdr
		SELECT	 srh.RequisitionNo
				,srh.PONumber
				,srh.LocationNo
				,srh.VendorID
				,srh.RequisitionDate
				,srh.RequestBy
				,srh.ApprovedBy
				,srh.ApprovedDate
				,srh.ReqQty
				,srh.ReqAmt
		FROM VX_Requisition_Hdr srh 
			INNER JOIN VX_Requisition_Audit_Log sral 
				ON srh.RequisitionNo = sral.RequisitionNo
		WHERE sral.ProcessedFlag = 0 
			AND srh.[Status] IN (50,55) 
			AND DATEDIFF(N,sral.ReqApprovedDate,GETDATE())>1 
	
	INSERT INTO @tmpReqDtl
		SELECT	 srd.RequisitionNo
				,srd.PONumber
				,srd.ItemCode
				,srd.VendorItem
				,srd.LineNum
				,srd.ConfirmedQty
				,srd.RequestedBy
				,srd.RequestedDate
				,srd.ApprovedBy
				,srd.ApprovedDate
				,srd.Cost
				,srd.ExtCost
		FROM VX_Requisition_Dtl srd 
			INNER JOIN VX_Requisition_Audit_Log sral 
				ON srd.RequisitionNo = sral.RequisitionNo
		WHERE sral.ProcessedFlag = 0 
			AND srd.[Status] IN (50,55) 
			AND srd.RequestedQty > 0 
			AND DATEDIFF(N,sral.ReqApprovedDate,GETDATE())>1 

	DECLARE @loop INT
	
	SELECT  @loop = MAX(RowID) 
	FROM @tmpReqHdr
	
	SET @err = @@ERROR
	
	WHILE @loop > 0
		BEGIN
			----DECLARE AND SET current values....
			DECLARE	 @curReq CHAR(6)
					,@curPO CHAR(6)
					,@curLoc CHAR(5)
					,@vendor VARCHAR(12)
					,@AppDate DATE
					,@shipID INT
		
			SELECT	 @curReq = ReqNo
					,@curPO = PONo
					,@curLoc = LocNo
					,@vendor = VendID 
			FROM @tmpReqHdr 
			WHERE RowID = @loop
	
			SET @shipID = 0
			
			IF @vendor = 'IDB&TDISTR'
				BEGIN			
					-- Check for ship notice to UPDATE order...IF exists process else SET to 55 AND check later....
					SELECT @shipID = sh.ShipID 
					FROM BakerTaylor.dbo.bulkorder_shipnotice_Header sh 
						INNER JOIN BakerTaylor.dbo.bulkorder_shipnotice_ItemDetail sd 
							ON sh.ShipID=sd.ShipID	
					WHERE sd.BuyersOrderReference = @curPO 
						AND (sh.IssueDateTime < CAST(GETDATE() AS DATE) 
						OR EXISTS(SELECT ASNRefNumber FROM BakerTaylor.dbo.bulkorder_invoice_Header WHERE ASNRefNumber=sh.ASNNumber))
				
					--SELECT @shipID = sh.OrderID FROM BakerTaylor..bulkorder_Header sh INNER JOIN BakerTaylor..bulkorder_ItemDetail sd on sh.OrderID=sd.OrderID	
					--		WHERE sh.OrderNumber = @curPO AND (sh.IssueDateTime < CAST(getdate() as date))
				
				END
			ELSE IF @vendor <> 'IDB&TDISTR'
				BEGIN
					SELECT @shipID = ah.AckID 
					FROM [HPB_EDI].[blk].[AcknowledgeHeader] ah 
						INNER JOIN [HPB_EDI].[BLK].[AcknowledgeDetail] ad 
							ON ah.AckID=ad.AckID 
					WHERE ah.PONumber=@curPO
					--SELECT @shipID = ah.ShipID FROM EDI_Bulk_ShipomentHeader ah INNER JOIN [HPB_EDI].[BLK].[ShipmentDetail] ad on ah.ShipID=ad.ShipID WHERE ah.PONumber=@curPO
					
					IF LTRIM(RTRIM(@shipID))='' BEGIN SET @shipID=0 END
					/*
						IF @shipID <> 0 ----used for ASN updating only........
							BEGIN
								UPDATE rd 
									SET rd.ConfirmedQty=isnull(ad.ShipQty,0),rd.CanceledQty=CASE WHEN ISNULL(ad.ShipQty,0)=0 THEN rd.ConfirmedQty ELSE rd.CanceledQty END,
										rd.ExtCost=isnull(ad.ShipQty,0)*rd.Cost
								FROM VX_Requisition_Dtl rd 
									INNER JOIN [HPB_EDI].[BLK].[ShipmentHeader] ah on rd.PONumber=ah.PONumber
									INNER JOIN [HPB_EDI].[BLK].[ShipmentDetail] ad on ah.ShipID=ad.ShipID AND rd.VendorItem=ad.ItemIdentifier
								WHERE rd.PONumber=@curPO
						
								UPDATE rh
									SET rh.ReqQty=(SELECT SUM(ConfirmedQty) FROM VX_Requisition_Dtl WHERE PONumber=@curPO),
										rh.ReqAmt=(SELECT SUM(ExtCost) FROM VX_Requisition_Dtl WHERE PONumber=@curPO)
								FROM VX_Requisition_Hdr rh 
								WHERE rh.PONumber=@curPO
						
								UPDATE rd
									SET  rd.ReqQty=isnull(ad.ShipQty,0),rd.ExtCost=isnull(ad.ShipQty,0)*rd.Cost
								FROM @tmpReqDtl rd 
									INNER JOIN [HPB_EDI].[BLK].[ShipmentHeader] ah ON rd.PONo=ah.PONumber
									INNER JOIN [HPB_EDI].[BLK].[ShipmentDetail] ad ON ah.ShipID=ad.ShipID AND rd.VendItemNo=ad.ItemIdentifier
								WHERE rd.PONo=@curPO	
						
								UPDATE rh
									SET rh.ReqQty=(SELECT SUM(ReqQty) FROM @tmpReqDtl WHERE PONo=@curPO),
										rh.ReqAmt=(SELECT SUM(ExtCost) FROM @tmpReqDtl WHERE PONo=@curPO)
								FROM @tmpReqHdr rh 
								WHERE rh.PONo=@curPO						
							END				
					*/
				END
					
			----IF exists then add any backordered items to the order......		
			IF @shipID <> 0
				BEGIN
					IF EXISTS(	SELECT sh.ShipID FROM BakerTaylor.dbo.bulkorder_shipnotice_Header sh INNER JOIN BakerTaylor.dbo.bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID
								WHERE sd.BuyersOrderReference <> @curPO 
									AND sh.ShipID IN (	SELECT DISTINCT sh.ShipID 
														FROM BakerTaylor.dbo.bulkorder_shipnotice_Header sh 
														INNER JOIN BakerTaylor..bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID	
														WHERE sd.BuyersOrderReference = @curPO)) 
														AND @vendor = 'IDB&TDISTR'
						BEGIN
							-- Add backorderd items to @tmpReqDtl.....
							INSERT INTO @tmpReqDtl
								SELECT	 @curReq
										,@curPO
										,r.ItemCode
										,r.VendorItem
										,(SELECT MAX(cast(LineNum AS INT))+1 FROM @tmpReqDtl WHERE PONo=@curPO)
										,sd.ShippedQuantity
										,r.RequestedBy
										,r.RequestedDate
										,r.ApprovedBy
										,r.ApprovedDate
										,r.Cost
										,sd.ShippedQuantity*r.Cost
								FROM BakerTaylor.dbo.bulkorder_shipnotice_Header sh 
										INNER JOIN BakerTaylor.dbo.bulkorder_shipnotice_ItemDetail sd 
											ON sh.ShipID=sd.ShipID
										INNER JOIN BakerTaylor.dbo.codes_SAN c WITH(NOLOCK)
											ON sh.ShipToPartyIdentifier=c.SAN+' '+c.Suffix
										INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l WITH(NOLOCK) 
											ON l.LocationNo=c.LocationNo
										INNER JOIN (	SELECT rh.LocationNo,rd.ItemCode,rd.VendorItem,rd.PONumber,rd.RequestedBy,rd.RequestedDate,rd.ApprovedBy,rd.ApprovedDate,rd.Cost 
														FROM VX_Requisition_Dtl rd 
															INNER JOIN VX_Requisition_Hdr rh ON rd.PONumber=rh.PONumber) r
											ON sd.BuyersOrderReference=r.PONumber 
												AND sd.ProductIdentifier=r.VendorItem 
												AND r.LocationNo=l.LocationNo
								WHERE sd.BuyersOrderReference<>@curPO 
									AND sd.ProductIdentifier NOT IN (r.VendorItem) 
									AND sh.ShipID IN (	SELECT DISTINCT sh.ShipID FROM BakerTaylor.dbo.bulkorder_shipnotice_Header sh 
														INNER JOIN BakerTaylor.dbo.bulkorder_shipnotice_ItemDetail sd ON sh.ShipID=sd.ShipID	
														WHERE sd.BuyersOrderReference = @curPO)

								UPDATE rh
									SET rh.ReqQty = (SELECT SUM(ReqQty)  FROM @tmpReqDtl WHERE PONo=@curPO), 
										rh.ReqAmt = (SELECT SUM(ExtCost) FROM @tmpReqDtl WHERE PONo=@curPO) 
								FROM @tmpReqHdr rh 
								WHERE rh.PONo = @curPO
							END
							
					-------------------------Add any updates for non BT vendors here............................................
					
					------------------------------------------------------------------------------------------------------------
					
					DELETE FROM @tmpOrdHdr
					DELETE FROM @tmpOrdDtl

					-- Build Order temp tables based on Req tables........
					INSERT INTO @tmpOrdHdr
						SELECT	 rh.PONo
								,rh.LocNo
								,''
								,'ANNA'
								,rh.VendID
								,vm.TermsCode
								,CAST(GETDATE() AS SMALLDATETIME)
								,NULL
								,NULL
								,rh.ReqAmt
								,0
								,1
								,''
								,0
								,null
								,rh.PONo
								,0
								,l.MailToName
								,l.MailToAddress1
								,l.MailToAddress2
								,l.MailToAddress3
						FROM @tmpReqHdr rh 
							INNER JOIN [$(HPB_Prime)].[dbo].[VendorMaster] vm 
								ON rh.VendID = vm.VendorID
							INNER JOIN [$(HPB_Prime)].[dbo].[Locations] l 
								ON rh.LocNo = l.LocationNo
						WHERE rh.PONo=@curPO
					
					INSERT INTO @tmpOrdDtl
						SELECT	 rd.PONo
								,RIGHT('00000'+CAST(ROW_NUMBER() OVER (PARTITION BY rh.LocNo ORDER BY rh.LocNo) AS VARCHAR(4)),5)
								--,right('00000'+rd.LineNum,5)
								,rd.ItemCode
								,rd.VendItemNo
								,'T',rd.ReqQty
								,'EA',rd.Cost
								,rd.ExtCost
								,pmd.SchemeID
								,0
								,NULL
								,rh.LocNo
								,0
								,NULL
								,''
								,0
								,0
								,NULL
								,0
								,rd.ReqQty
								,'Vendor Exchange'
								,'DISTADMIN'
								,GETDATE()
						FROM @tmpReqDtl rd 
							INNER JOIN @tmpReqHdr rh 
								ON rd.ReqNo = rh.ReqNo
							INNER JOIN [$(HPB_Prime)].[dbo].[VendorMaster] vm 
								ON rh.VendID = vm.VendorID
							INNER JOIN [$(HPB_Prime)].[dbo].[ProductMaster] pm 
								ON rd.ItemCode = pm.ItemCode
							INNER JOIN [$(HPB_Prime)].[dbo].[ProductMasterDist] pmd 
								ON pm.ItemCode = pmd.ItemCode
						WHERE rd.PONo=@curPO
			
					-- Check IF any other location/vendor requisitions exist that have not been consolidated
					IF NOT EXISTS(	SELECT requisitionno FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader
									WHERE requisitionno = @curReq AND ponumber = @curPO AND locationno = @curLoc AND vendorid = @vendor)
						BEGIN
							----INSERT requisition header AND details....
							INSERT INTO OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader
								SELECT	 ReqNo
										,LocNo
										,ReqBy
										,VendID
										,ReqDate
										,AprvBy
										,CAST(AprvDate AS SMALLDATETIME)
										,PONo
										,NULL
										,NULL
										,NULL
								FROM @tmpReqHdr
								WHERE ReqNo = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END
							
							INSERT INTO OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitiondetail
								SELECT	 ReqNo
										,ItemCode
										,ReqDate
										,ReqQty
										,NULL
										,1
										,AprvBy
										,ReqQty
										,CAST(AprvDate AS SMALLDATETIME)
										,PONo
								FROM @tmpReqDtl
								WHERE ReqNo = @curReq 
									AND ReqQty<>0
							IF @err = 0 BEGIN SET @err = @@ERROR END
							
							----INSERT order header AND details....					
							INSERT INTO OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.orderheader
								SELECT	 PONo
										,LocNo
										,POType
										,BuyerID
										,VendorID
										,TermsCode
										,PODate
										,CancelDate
										,DueDate
										,OrdAmt
										,Printed
										,SendPO
										,SpecInstr
										,Complete
										,DateComplete
										,SkeletonCrtFrom
										,CrtFromReq
										,ShipToName
										,ShipToAddr1
										,ShipToAddr2
										,ShipToAddr3
								FROM @tmpOrdHdr
								WHERE PONo = @curPO
							IF @err = 0 BEGIN SET @err = @@ERROR END
							
							INSERT INTO OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.orderdetail
								SELECT	 PONo
										,POLine
										,ItemCode
										,ISBN
										,DistType
										,OrdQty
										,UnitType
										,UnitCost
										,ExtLineCost
										,SchemeID
										,FileClaimAdj
										,VouchNo
										,LocNo
										,Complete
										,DateComplete
										,SpecInstr
										,Discount
										,RemovedFromRct
										,QtyCnt
										,QtyPer
										,ExtQty
										,RowAddFrom
										,RowAddBy
										,RowAddDate
								FROM @tmpOrdDtl
								WHERE PONo = @curPO AND OrdQty<>0
							IF @err = 0 BEGIN SET @err = @@ERROR END
											
							-- UPDATE STOC_Reorder_Control status to approved for user's locked reqs....
							UPDATE VX_Reorder_Control
								SET [Status] = 60
							WHERE RequisitionNo = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END

							-- UPDATE requisition hdr & dtl statues FROM STOC_Reorder_Control....
							UPDATE VX_Requisition_Hdr
								SET [Status] = 60
							WHERE requisitionno = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END

							UPDATE VX_Requisition_Dtl
								SET [Status] = 60
							WHERE requisitionno = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END
							
							UPDATE [HPB_EDI].[BLK].[ShipmentHeader]
								SET	 Processed=1
									,ProcessedDateTime=GETDATE()
							WHERE PONumber=@curPO
							IF @err = 0 BEGIN SET @err = @@ERROR END
							
							-- UPDATE audit log....
							UPDATE dbo.VX_Requisition_Audit_Log
								SET	 processeddate = GETDATE()
									,processedflag = 1
									,Comments = NULL
							WHERE requisitionno = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END
						END
					ELSE
						BEGIN
							UPDATE dbo.VX_Requisition_Audit_Log
								SET Comments = 'duplicate order copy failure'
							WHERE RequisitionNo = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END
						END
				END			
			ELSE
				BEGIN
					IF (SELECT [Status] FROM VX_Reorder_Control WHERE RequisitionNo=@curReq) <> 55
						BEGIN
							-- UPDATE STOC_Reorder_Control status to approved for user's locked reqs
							UPDATE VX_Reorder_Control
								SET [Status] = 55
							WHERE RequisitionNo = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END

							----UPDATE requisition hdr & dtl statues FROM STOC_Reorder_Control....
							UPDATE VX_Requisition_Hdr
								SET [Status] = 55
							WHERE requisitionno = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END

							UPDATE VX_Requisition_Dtl
								SET [Status] = 55
							WHERE requisitionno = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END
							
							UPDATE vx_requisition_audit_log
								SET Comments = 'awaiting ship confirmation'
							WHERE RequisitionNo = @curReq
							IF @err = 0 BEGIN SET @err = @@ERROR END
						END
				END
			SET @loop = @loop - 1
		END
	SET @rVal = @err
	RETURN @rVal	
END
GO
PRINT N'Altering [dbo].[VX_GenerateReqs]...';


GO

-- =============================================
-- Author:		<Joey B.>
-- Create date: <10/24/12>
-- Description:	<Generates new requisitions/POs for VX application.....>
-- =============================================
ALTER PROCEDURE [dbo].[VX_GenerateReqs]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
    declare	 @rVal int = 0
			,@err int  = 0
	
    -----------**Release all locks...............................................................................................
	update dbo.VX_Reorder_Control
		set	 Locked = 'N'
			,LockedBy = null
			,LockedDate = null
	where Locked = 'Y'
	set @err = @@ERROR	
-----------**Get all store locations...............................................................................................
	create table #locs(locationno char(5), locationname char(30), locationID char(10))
	
	begin
		insert #locs
			select	 locationno
					,DistrictCode
					,locationid 
			from [$(HPB_Prime)].[dbo].[Locations]
			where retailstore = 'Y' 
				and isnumeric(locationno) = 1 
				and [Status] = 'A' 
				and CAST(locationno as int) between 1 and 200
	end
-----------**Get non-supply reorderable vendors...................................................................................
	create table #rVendors(vendorID varchar(20), NextOrderDate datetime)

	begin
		insert #rVendors
			select distinct 
				 vendorid
				,UserDate1 
			from [$(HPB_Prime)].[dbo].[VendorMaster] with(nolock)
			where isnull(ltrim(rtrim(userchar30)),'') <> '' 
				and UserChar15 = 'VX'
	end
-----------**Put all vendors into a cross join with locations..............................................................
	create table #reorderReqs(locationno char(5), vendorid varchar(30))
	CREATE  CLUSTERED  INDEX [IDX_ROITEMS_RU] ON #reorderReqs ([locationno], [vendorid])

	insert into #reorderReqs
		select	 lc.locationno
				,v.vendorID
		from #locs lc 
			cross join #rVendors v
	if @err = 0 begin set @err = @@ERROR end
	
-----------**Insert any missing Locations and Warehouse Refs.....................................................................
	insert into dbo.VX_Locations
		select	 locationno
				,locationID
				,'N'
				,Getdate() 
		from #locs
		where locationno not in (select locationno from dbo.VX_Locations)
			and locationID not in (select locationID from dbo.VX_Locations)
	
	----turn off any stores that have been set to inactive...............................................
	update sl
		set sl.Active='N'
	from dbo.VX_Locations sl 
		inner join [$(HPB_Prime)].[dbo].[Locations] l 
			on sl.LocationID=l.LocationID
	where l.Status='I'

	insert into dbo.VX_Whse_Ref
		select	 VendorID
				,locationno
				,'NA'
				,null
				,null
				,null
		from #reorderReqs r
		where locationno not in (select StoreNo from dbo.VX_Whse_Ref where vendorid = r.vendorid group by StoreNo)
	
-----------**Insert any missing Store/Vendor records.....................................................................
	insert into dbo.VX_Reorder_Control(StoreNo,VendorID,Warehouse)
		select	 rr.locationno
				,rr.vendorid
				,'NA'
		from #reorderReqs rr 
			inner join dbo.VX_Locations sl 
				on rr.locationno = sl.locationno
			left join dbo.VX_Reorder_Control src 
				on rr.locationno = src.storeno
		where (isnull(src.storeno,'') = ''  and isnull(src.vendorid,'') = '')
			or not exists(select vendorid from dbo.VX_Reorder_Control where vendorid = rr.vendorid group by vendorid)
		group by rr.locationno,rr.vendorid  
		order by rr.vendorid, rr.locationno
	if @err = 0 begin set @err = @@ERROR end
-----------**Join with SEQ requisitionheader to delete consolidated orders..............................................................
	update src
		set	 src.PONumber = null
			,src.requisitionno = null
			,src.[Status] = null
			,src.requisitiondate = null
			,src.requisitionduedate = null
	from dbo.VX_Reorder_Control src
	where Status in ('99','55','83') 
		or src.requisitionno in (select requisitionno FROM OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.requisitionheader
							where ((PONumber IS NOT NULL AND requestby <> 'VOID') OR (PONumber IS NULL and requestby = 'VOID') AND ponumber = src.PONumber and requisitionno = src.requisitionno))
	if @err = 0 begin set @err = @@ERROR end
-----------**Put Store/Vendor records that need a new req into temp table................................................
	create table #NewReqs(ID int identity(1,1), locationno char(5), vendorid varchar(30), warehouse varchar(10))
	CREATE  CLUSTERED  INDEX [IDX_ROITEMS_RU] ON #NewReqs ([locationno], [vendorid])
	
	insert into #NewReqs
		select	 src.StoreNo
				,src.VendorID
				,isnull(warehouse1,'NA') AS [Warehouse] 
		from dbo.VX_Reorder_Control src 
			inner join dbo.VX_Locations sl 
				on src.storeno = sl.locationno
			inner join [$(HPB_Prime)].[dbo].[VendorMaster] v 
				on src.VendorID = v.VendorID
			left join dbo.VX_Whse_Ref w 
				on src.VendorID = w.VendorID 
					and src.StoreNo = w.StoreNo
		where sl.active = 'Y' 
			and src.requisitionno is null 
			and v.UserChar15 = 'VX'
		order by src.StoreNo desc,src.VendorID
	if @err = 0 begin set @err = @@ERROR end
	-----------**loop thru temp table and get new values...................................................................
	declare @loop int
	set @loop = (select MAX(ID) from #NewReqs)
	
	while isnull(@loop,0) > 0
		begin
			declare	 @vendor VARCHAR(10)
					,@store  CHAR(5)
					,@whse   VARCHAR(10)
			
			SELECT	 @vendor = vendorid
					,@store = locationno
					,@whse = warehouse 
			FROM #NewReqs 
			WHERE ID = @loop

			declare	 @sRet		CHAR(6)
					,@newReqNo	CHAR(6)
					,@sRetPO	CHAR(6)
					,@newPONo	CHAR(6)
			EXEC OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.STOC_GetNextRequisitionNo @sRet = @newReqNo output
			EXEC OPENDATASOURCE('SQLOLEDB','Data Source=sequoia;User ID=stocuser;Password=Xst0c5').HPB_db.dbo.VX_GetNextPONo @sRetPO = @newPONo output
						
			UPDATE src
				set	 src.Warehouse = @whse
					,src.requisitionno = @newReqNo
					,src.PONumber = @newPONo
					,src.[Status] = 10
					,src.requisitiondate = GETDATE()
					,src.requisitionduedate = (select dbo.FN_STOC_GetNextOrderDate(src.vendorid))
			FROM dbo.VX_Reorder_Control src 
			where src.vendorid = @vendor 
				and src.storeno = @store			
			if @err = 0 begin set @err = @@ERROR end			
			set @loop = @loop - 1 
		end	
	----------**end of loop................................................................................................

	drop table #locs
	drop table #rVendors
	drop table #reorderReqs
	drop table #NewReqs
	set @rVal = @err
	return @rVal
END
GO
PRINT N'Altering [dbo].[VX_GetItemDetailsGrid]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <1/11/13>
-- Description:	<Get Item Details for Grid...>
-- =============================================
ALTER PROCEDURE [dbo].[VX_GetItemDetailsGrid]
	 @ItemCode VARCHAR(20)
	,@Location CHAR(5)
	,@VendorID VARCHAR(15)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	------testing.......
	--declare @ItemCode varchar(20)
	--declare @Location char(5)
	--declare @VendorID varchar(15)
	--set @ItemCode = '10059596'
	--set @Location = '00001'
	--set @VendorID = 'IDB&TDISTR'	
	---------------------
	
	--get full lenght itemcode...
	DECLARE @_ItemCode char(20)
	SET @_ItemCode = RIGHT(REPLICATE('0',20)+@ItemCode,20)

	--get product image.....
    SELECT	 RIGHT(ItemCode,8) AS [ItemCode]
			,ItemImage 
    INTO #iitemp
    FROM [$(HPB_Prime)].[dbo].[ProductImages] 
    WHERE ItemCode = @_ItemCode
    
    
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
    SELECT	 ii.ItemImage
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,MAX(twt.PreviousItemCodes)[PreviousItemCodes]
			,twt.PercentSold [PercentSold-PY]
			,SUM(ISNULL(twt.markdowns,0)) AS [Markdowns-SLO]
			,SUM(ISNULL(twt.TransferredOut,0)) AS [Transfers-SLO]
			,twt.ISBN AS [ISBN/UPC]
			,MAX(twt.lastsaledate) AS [LastSaleDate]
			,twt.RateOfSale AS [Weekly-ROS]
			,MIN(twt.InitialStoreDate) AS [InitialStoreDate]
			,SUM(ISNULL(twt.InitialQty,0)) AS [InitialQty]
			,MAX(twt.LastReorderDate) AS [LastReorderDate]
			,SUM(ISNULL(twt.LastQty,0)) AS [LastQty]
			,twt.CaseQty
			,SUM(ISNULL(twt.ShipQty,0)) AS [ShipQty-SLO]
			,ISNULL(src.RequisitionDueDate,'1900/01/01') AS [RequisitionDueDate]
			,twt.SalesRank
	FROM STOC_TeaserData twt 
		LEFT JOIN VX_Reorder_Control src 
			ON twt.VendorID = src.VendorID 
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN VX_Status ss 
			ON src.status = ss.statuscode
		--left join vwVX_BT_AvailQty waq on waq.ISBNUPC = twt.ISBN and waq.Warehouse = src.Warehouse
		LEFT JOIN vwVX_ic_AvailQty waq 
			ON waq.ISBNUPC = twt.ISBN 
				AND waq.Warehouse = src.Warehouse
		LEFT JOIN #iitemp ii 
			ON ii.itemcode = twt.ReorderItemCode 
	WHERE twt.reorderitemcode = @ItemCode 
		AND twt.vendorid = @VendorID 
		AND twt.locationno = @Location
	GROUP BY ii.ItemImage,twt.LocationNo,twt.District,twt.Title,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank
		,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
	ORDER BY twt.title,twt.District,twt.LocationNo

	DROP TABLE #iitemp

END
GO
PRINT N'Altering [dbo].[VX_GetVendorItemKits]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <2/2/2016>
-- Description:	<Get vendor items for Kits....>
-- =============================================
ALTER PROCEDURE [dbo].[VX_GetVendorItemKits]
	@vendorID varchar(10),@ItemCode varchar(20)=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @Zero20 VARCHAR(20) = REPLICATE('0',20)
	------testing.......
	--declare @vendorID varchar(10),@ItemCode varchar(20)
	--set @vendorID = 'IDB&TDISTR'
	--set @ItemCode = '10158741'

	----This returns a DataSet used by VendorX

	----set full lenght itemcode...................................
	set @ItemCode = RIGHT(@Zero20+@ItemCode,20)
	
	select distinct '' [ItemCode],''[Title], '' [Label]	
	union
	select distinct RIGHT(k.ParentItem,8) [ItemCode],pm.Title, RIGHT(k.ParentItem,8) + ' - ' + pm.Title [Label]
	from VX_Vendor_Kits k 
		inner join [$(HPB_Prime)].[dbo].[ProductMaster] pm on k.parentitem=pm.ItemCode
	where pm.PurchaseFromVendorID=@vendorID 
	union
	select distinct ReorderItemCode [ItemCode],Title, ReorderItemCode + ' - ' + Title [Label]
	from STOC_TeaserData where VendorID = @vendorID 
		and RIGHT(@Zero20+ReorderItemCode,20) not in (select distinct ParentItem from VX_Vendor_Kits)
	order by Title
	
	
	select distinct '' [ItemCode],''[Title], '' [Label]
	union
	select distinct t.ReorderItemCode [ItemCode],t.Title, t.ReorderItemCode + ' - ' + t.Title [Label]
	from STOC_TeaserData t
	where t.VendorID = @vendorID and RIGHT(@Zero20+t.ReorderItemCode,20) not in (select distinct KitItem from VX_Vendor_Kits)
		and RIGHT(@Zero20+t.ReorderItemCode,20) not in (select distinct ParentItem from VX_Vendor_Kits)
	order by Title

	
	select distinct cast(0 as bit)[Delete?],k.kititem [ItemCode],pm.Title, k.KitQty [Qty]
	from VX_Vendor_Kits k 
		inner join [$(HPB_Prime)].[dbo].[ProductMaster]pm on k.kititem=pm.ItemCode
	where pm.PurchaseFromVendorID = @vendorID and k.ParentItem = @ItemCode
	order by Title

END
GO
PRINT N'Altering [dbo].[VX_GetVendorItemQty]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <11/2/2012>
-- Description:	<get quantities by item/warehouse for vendor.....>
-- =============================================
ALTER PROCEDURE [dbo].[VX_GetVendorItemQty] @vendorID VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-----testing......
	--declare @vendorID varchar(10)
	--set @vendorID = 'IDB&TDISTR'
	--------------------------------
	----get vendor warehouse quantities
	--SELECT * into #tmp FROM (SELECT ISBNUPC,Warehouse,isnull(QtyOnHand,0)[QtyOnHand] FROM vwVX_BT_AvailQty with(nolock)
	--				where QtyOnHand > 0 and ISBNUPC in (select ISBN from [$(HPB_Prime)].[dbo].[ProductMaster] with(nolock) where Reorderable = 'Y' and PurchaseFromVendorID = @vendorID)) s
	--PIVOT (SUM(QtyOnHand) FOR Warehouse IN ([COM],[MOM],[SOM],[RNO])) AS Warehouse
	--order by ISBNUPC
	IF @vendorID = 'IDB&TDISTR'
		BEGIN
			SELECT *
			INTO #tmpbt
			FROM (	SELECT	 ISBNUPC
							,Warehouse
							,ISNULL(QtyOnHand, 0) [QtyOnHand]
					FROM vwVX_BT_AvailQty WITH (NOLOCK)
					WHERE ISBNUPC IN (	SELECT DISTINCT ISBN
										FROM dbo.STOC_TeaserData WITH (NOLOCK)
										WHERE VendorID = @vendorID)
						--and QtyOnHand > 0
				) s
			PIVOT(SUM(QtyOnHand) FOR Warehouse IN ([COM], [MOM], [SOM], [REN])) AS Warehouse
			ORDER BY ISBNUPC

			SELECT DISTINCT
				 st.ReorderItemCode [ItemCode]
				,st.Title
				,t.ISBNUPC [ISBN/UPC]
				,ISNULL(t.COM, 0) [COM]
				,ISNULL(t.MOM, 0) [MOM]
				,ISNULL(t.SOM, 0) [SOM]
				,ISNULL(t.REN, 0) [REN]
			FROM #tmpbt t
			INNER JOIN dbo.STOC_TeaserData st WITH (NOLOCK)
				ON t.ISBNUPC = st.ISBN
					AND st.VendorID = @vendorID
			ORDER BY st.Title

			DROP TABLE #tmpbt
		END
	ELSE IF @vendorID IN ('IDINGRAMDI')
		BEGIN
			SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
			SELECT *
			INTO #tmping
			FROM (	SELECT	 icaq.ISBNUPC
							,icaq.Warehouse
							,ISNULL(icaq.QtyOnHand, 0) AS [QtyOnHand]
					FROM vwVX_IC_AvailQty icaq
						INNER JOIN dbo.STOC_TeaserData td
							on icaq.ISBNUPC = td.ISBN
								and td.VEndorID = @vendorID
					GROUP BY icaq.ISBNUPC, icaq.Warehouse, isnull(icaq.QtyOnHand,0)
				) s
			PIVOT(SUM(QtyOnHand) FOR Warehouse IN ([N], [B], [C], [D], [E], [J])) AS Warehouse
			ORDER BY ISBNUPC

			SELECT DISTINCT
				 st.ReorderItemCode [ItemCode]
				,st.Title
				,t.ISBNUPC [ISBN/UPC]
				,ISNULL(t.N, 0) AS [LaVerne]
				,ISNULL(t.B, 0) AS [Allentown]
				,ISNULL(t.C, 0) AS [Chambersburg]
				,ISNULL(t.D, 0) AS [FtWayne]
				,ISNULL(t.E, 0) AS [Roseburg]
				,ISNULL(t.J, 0) AS [Fresno]
			FROM #tmping t
			INNER JOIN dbo.STOC_TeaserData st WITH (NOLOCK)
				ON t.ISBNUPC = st.ISBN
					AND st.VendorID = @vendorID
			ORDER BY st.Title

			DROP TABLE #tmping
		END
	ELSE IF @vendorID <> 'IDB&TDISTR'
		BEGIN
			SELECT '' [ItemCode]
				,'' [Title]
				,'' [ISBN/UPC]
				,'' [WHSEQty]
		END
END
GO
PRINT N'Altering [dbo].[VX_GetVendorWhseSettings]...';


GO

-- =============================================
-- Author:		<Joey B.>
-- Create date: <11/2/12>
-- Description:	<Get warehouse setting for vendor....>
-- =============================================
ALTER PROCEDURE [dbo].[VX_GetVendorWhseSettings]
	@vendorID varchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-----testing......
	--declare @vendorID varchar(10)
	--set @vendorID = 'IDB&TDISTR'
	--------------------------------
	
	----get vendor warehouse settings.....
	select r.StoreNo,l.Name,isnull(rc.PONumber,'')[PONumber],isnull(s.StatusDesc,'')[Status],
		isnull(case when r.Warehouse1='NA'then''else r.Warehouse1 end,'')[Warehouse1],
		isnull(case when r.Warehouse2='NA'then''else r.Warehouse2 end,'')[Warehouse2],
		isnull(case when r.Warehouse3='NA'then''else r.Warehouse3 end,'')[Warehouse3],
		isnull(case when r.Warehouse4='NA'then''else r.Warehouse4 end,'')[Warehouse4],
		cast(case when(isnull(l2.Active,'N'))='N' then'False'else'True'end as bit)[VX Active],
		cast(case when(isnull(bt.active,0))=0 then'False'else'True'end as bit) [BT Active]
	from VX_Whse_Ref r 
		inner join [$(HPB_Prime)].[dbo].[Locations] L on r.storeno = l.locationno
		inner join dbo.VX_Locations l2 on l2.LocationNo = l.LocationNo
		inner join dbo.VX_Reorder_Control rc on r.StoreNo = rc.StoreNo and r.VendorID = rc.VendorID
		left join dbo.VX_Status s on rc.Status = s.StatusCode
		left join BakerTaylor..codes_SAN bt on bt.LocationNo = rc.StoreNo and bt.Warehouse = rc.Warehouse
	where rc.VendorID = @vendorID
	order by r.StoreNo
	
END
GO
PRINT N'Altering [dbo].[VX_SendPendingApprovalsEmail]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <4/21/2014>
-- Description:	<Send Pending Approval's Email.....>
-- =============================================
ALTER PROCEDURE [dbo].[VX_SendPendingApprovalsEmail]
	@time int
AS
BEGIN
	SET NOCOUNT ON;
	
	----testing......
	--declare @time int
	--set @time = -99999
	--------.........

	if exists (select rh.PONumber from VX_Requisition_Hdr rh inner join VX_Submit_Audit_Log sal on rh.PONumber=sal.PONumber where Status=40 and 
			cast(CONVERT(varchar(10),sal.ResponseDate,120)+' '+CONVERT(char(5),sal.ResponseDate,108)as datetime) > DATEADD(n,@time,getdate()))
		begin
			--select rh.VendorID,rh.LocationNo,rh.PONumber,rh.ReqQty,rh.ReqAmt 
			--from VX_Requisition_Hdr rh inner join VX_Submit_Audit_Log sal on rh.PONumber=sal.PONumber
			--where Status=40 and sal.ResponseDate > DATEADD(n,-5,getdate())
			--order by rh.VendorID,rh.LocationNo,rh.PONumber
			
			
			----send the email................................
			declare @emailAddy varchar(1000)
			set @emailAddy = 'jblalock@hpb.com'
			declare @qry varchar(max)
			set @qry = ' SET NOCOUNT ON; select rh.VendorID,rh.LocationNo,rh.PONumber,rh.ReqQty,rh.ReqAmt 
								from dbo.VX_Requisition_Hdr rh inner join dbo.VX_Submit_Audit_Log sal on rh.PONumber=sal.PONumber
								where Status=40 and cast(CONVERT(varchar(10),sal.ResponseDate,120)+'' ''+CONVERT(char(5),sal.ResponseDate,108)as datetime) > DATEADD(n,'+cast(@time as varchar(6))+',getdate())
								order by rh.VendorID,rh.LocationNo,rh.PONumber'
			EXECUTE [msdb].[dbo].[sp_send_dbmail]
			        @profile_name='EDIMail',
			        @recipients=@emailAddy,
			        @subject     = 'EDI Orders Pending Approval',
					@body        = 'These EDI orders are awaiting approval.',
					@query = @qry 
			
		end    
END
GO
PRINT N'Altering [dbo].[VX_SubmitReqs]...';


GO

/*
	=============================================
	Author:			Joey B.
	Create date:	10/24/2012
	Modified:
					03/18/2019 ALB - Added IF statement for inhouse to check baker taylor 

	Description:	Submit Requisitions
	=============================================
*/
ALTER PROCEDURE [dbo].[VX_SubmitReqs] 
	 @user VARCHAR(20)
	,@inHouseOnly BIT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;

	/* 
		TESTING:
			declare @user varchar(20),@inHouseOnly bit
			set @user = 'jblalock'
			set @inHouseOnly = 0
	*/

	DECLARE  @rVal INT = 0
			,@err INT = 0

	BEGIN TRANSACTION VX_ReqSubmit

	-- Get reqs for Submission
	CREATE TABLE #reqTmp 
	(	
		 rowid	INT IDENTITY(1,1)
		,reqNo	CHAR(6)
		,poNo	CHAR(6)
		,vendID VARCHAR(20)
	)

	INSERT INTO #reqTmp ( reqNo, poNo, vendID )
		SELECT DISTINCT RequisitionNo, PONumber, VendorID
		FROM VX_Reorder_Control src 
			INNER JOIN VX_Locations l 
				ON src.StoreNo = l.LocationNo
		WHERE LockedBy = @user 
			AND Locked = 'Y' 
			AND RequisitionNo IS NOT NULL 
			AND PONumber IS NOT NULL 
			AND [Status] = 20 
			AND Active = 'Y'
			AND EXISTS(	SELECT ItemCode FROM VX_Requisition_Dtl WHERE RequisitionNo = src.RequisitionNo AND RequestedQty > 0)

	-- Loop thru and update each req independently to ensure gaps in datetime stamps
	DECLARE @loop INT
	SET @loop = (SELECT MAX(rowID) FROM #reqTmp)

	WHILE @loop > 0
	BEGIN 
		DECLARE	 @curDT DATETIME
				,@curReq CHAR(6)
				,@curPO CHAR(6)
				,@curVend VARCHAR(20)
				,@OrdRefId INT = 0

		SET @curDT = GETDATE()		
		
		SELECT	 @curReq = reqNo
				,@curPO = poNo
				,@curVend = vendID 
		FROM #reqTmp 
		WHERE rowid = @loop

		-- Ensure inhouse orders don't go through EDI even if flag doesn't get set correctly coming in
		-- 2019-03-18 ALB: Added if statement to exclude items not in hpb_edi log. use supplied value
		IF EXISTS(SELECT 1 FROM [HPB_EDI].[dbo].[Vendor_SAN_Codes] WHERE vendorid=@curVend)
			SET @inHouseOnly = CASE WHEN (SELECT InHouseOnly FROM [HPB_EDI].[dbo].[Vendor_SAN_Codes] WHERE vendorid=@curVend)=0 THEN @inHouseOnly ELSE 1 END
	
		-- Only run this section if orders will be sent EDI
		IF @inHouseOnly=0
		BEGIN
			IF (@curVend) = 'IDB&TDISTR'  -- BakerTaylor only
			BEGIN 		
				-- Insert orders into BT bulk tables
				INSERT INTO BakerTaylor.dbo.bulkorder_Header (  OrderNumber,IssueDateTime,PurposeCode,FillTermsCode,BuyerPartyIDType,BuyerPartyIdentifier,SellerPartyIDType
															,SellerPartyIdentifier,ShipToPartyIDType,ShipToPartyIdentifier)
					SELECT	 rh.PONumber
							,CONVERT(VARCHAR(10),GETDATE(),112)
							,'Original'
							,''/*'FillPartKillRemainder'*/
							,'SAN'
							,cs.SAN
							,'SAN'
							,'1556150'
							,'SAN'
							,cs.SAN + ' ' + cs.Suffix
					FROM VX_Requisition_Hdr rh 
						INNER JOIN VX_Reorder_Control rc 
							ON rh.RequisitionNo = rc.RequisitionNo
						INNER JOIN BakerTaylor.dbo.codes_SAN cs 
							ON rc.StoreNo = cs.LocationNo 
								AND rc.Warehouse = cs.Warehouse
					WHERE rh.RequisitionNo = @curReq 
				IF @@ERROR != 0 SET @err = @@ERROR
			
				-- Get and set OrdRefId from insert
				SET @OrdRefId = @@identity

				IF @@ERROR = 0  AND ISNULL(@OrdRefId,0) <> 0 AND EXISTS (SELECT OrderNumber FROM BakerTaylor.dbo.bulkorder_Header WHERE LTRIM(RTRIM(OrderNumber))=@curPO)
				BEGIN 
					INSERT INTO BakerTaylor.dbo.bulkorder_ItemDetail (	 OrderID,LineNumber,ProductIDType,ProductIdentifier,OrderQuantity,LineReferenceTypeCode
																	,LineReferenceNumber,ItemFillTermsCode)
						SELECT	 @OrdRefId
								,rd.LineNum
								,'EAN13'
								,RIGHT('0000000000000'+rd.VendorItem,13)
								,rd.RequestedQty
								/*,right(rd.ItemCode,10)*/
								,'BuyersOrderLineReference'
								,rd.LineNum,
								CASE(AllowBackOrder) 
									WHEN 0 THEN 'FillPartKillRemainder' 
									ELSE 'FillPartBackorderRemainderShipAsAvailable' 
								END
						FROM VX_Requisition_Dtl rd WITH(NOLOCK) 
							INNER JOIN VX_Reorder_Control rc 
								ON rd.RequisitionNo = rc.RequisitionNo
						WHERE rd.RequisitionNo = @curReq 
							AND rd.RequestedQty > 0
					IF @@ERROR != 0 SET @err = @@ERROR

					-- Insert order into audit log
					INSERT INTO VX_Submit_Audit_Log ( RequisitionNo,PONumber,SubmitDate )
						SELECT	 @curReq
								,@curPO
								,GETDATE()
					IF @@ERROR != 0 SET @err = @@ERROR
					
					----------------------------------------------------------------------------------------
					-- Update VX_Reorder_Control status to Submitted for user's locked reqs
					UPDATE VX_Reorder_Control
						SET [Status] = 30
					WHERE RequisitionNo = @curReq
					IF @@ERROR != 0 SET @err = @@ERROR
								
					-- Update requisition hdr & dtl statues from VX_Reorder_Control
					UPDATE VX_requisition_hdr
						SET	 [Status]=30
							,OrdRefID=@OrdRefId
					WHERE RequisitionNo = @curReq
					IF @@ERROR != 0 SET @err = @@ERROR

					UPDATE VX_requisition_dtl
						SET [Status] = 30
					WHERE RequisitionNo = @curReq
					IF @@ERROR != 0 SET @err = @@ERROR
					END
		END
		ELSE IF @curVend <> 'IDB&TDISTR' AND EXISTS(SELECT VendorID FROM [HPB_EDI].[dbo].[Vendor_SAN_Codes] WHERE VendorID=@curVend)
		BEGIN
			-- Insert orders into EDI tables
			INSERT INTO [HPB_EDI].[BLK].[PurchaseOrderHeader] (PONumber,IssueDate,VendorID,ShipToLoc,ShipToSAN,BillToLoc,BillToSAN,ShipFromLoc,ShipFromSAN,TotalLines,TotalQuantity,InsertDateTime,Processed)
				SELECT	 rh.PONumber
						,CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS DATETIME)
						,rh.VendorID
						,hc.LocationNo
						,hc.SANCode
						,bt.LocationNo
						,bt.SANCode
						,'VEND'
						,vc.SANCode
						,(SELECT COUNT(Itemcode) FROM VX_Requisition_Dtl WHERE RequisitionNo=@curReq AND RequestedQty>0)
						,rh.ReqQty
						,GETDATE()
						,0
				FROM dbo.VX_Requisition_Hdr rh WITH (NOLOCK) 
					INNER JOIN VX_Reorder_Control rc WITH (NOLOCK) 
						ON rh.RequisitionNo=rc.RequisitionNo
					INNER JOIN dbo.VX_Requisition_Dtl rd WITH (NOLOCK) 
						ON rh.RequisitionNo=rd.RequisitionNo
					INNER JOIN [HPB_EDI].[dbo].[HPB_SAN_Codes] hc WITH (NOLOCK) 
						ON hc.LocationNo=rh.LocationNo
					INNER JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] vc WITH (NOLOCK) 
						ON vc.VendorID=rh.VendorID
					LEFT OUTER join [HPB_EDI].[dbo].[HPB_SAN_Codes] bt WITH (NOLOCK) 
						ON bt.LocationNo='HPBCA'			
				WHERE rh.RequisitionNo = @curReq
				GROUP BY rh.PONumber,rh.VendorID,hc.LocationNo,hc.SANCode,bt.LocationNo,bt.SANCode,vc.VendorID,vc.SANCode,rh.ReqQty			
			IF @@ERROR != 0 SET @err = @@ERROR
			
			-- Get and set OrdRefId from insert
			SET @OrdRefId = @@identity

			IF @@ERROR = 0 AND ISNULL(@OrdRefId,0) <> 0 AND EXISTS (SELECT PONumber FROM [HPB_EDI].[BLK].[PurchaseOrderHeader] WHERE LTRIM(RTRIM(PONumber))=@curPO)
			BEGIN 
				INSERT INTO [HPB_EDI].[BLK].[PurchaseOrderDetail] (OrderId,[LineNo],Quantity,UnitOfMeasure,UnitPrice,PriceCode,ItemIDCode,ItemIdentifier,ItemFillTerms,XActionCode,FillAmount )
					SELECT	 @OrdRefId
							,rd.LineNum
							,rd.RequestedQty
							,'UN'
							,rd.Cost
							,'NT'
							,'EN'
							,rd.VendorItem
							,CASE(AllowBackOrder) WHEN 0 
								THEN 'N' 
								ELSE 'O' 
							 END
							,'0'
							,rd.ExtCost
					FROM VX_Requisition_Dtl rd WITH(NOLOCK) 
						INNER JOIN VX_Reorder_Control rc 
							ON rd.RequisitionNo = rc.RequisitionNo
					WHERE rd.RequisitionNo = @curReq 
						AND rd.RequestedQty > 0
					ORDER BY rd.LineNum 
				IF @@ERROR != 0 SET @err = @@ERROR

				-- Insert order into audit log
				INSERT INTO VX_Submit_Audit_Log(RequisitionNo,PONumber,SubmitDate)
					SELECT	 @curReq
							,@curPO
							,GETDATE()
				IF @@ERROR != 0 SET @err = @@ERROR
							
				----------------------------------------------------------------------------------------
				-- Update VX_Reorder_Control status to Submitted for user's locked reqs
				UPDATE VX_Reorder_Control
					SET [Status] = 30
				WHERE RequisitionNo = @curReq
				IF @@ERROR != 0 SET @err = @@ERROR
				
				-- Update requisition hdr & dtl statues from VX_Reorder_Control
				UPDATE VX_Requisition_Hdr
					SET	 [Status]= 30
						,ordrefid = @OrdRefId
				WHERE RequisitionNo = @curReq
				IF @@ERROR != 0 SET @err = @@ERROR

				UPDATE VX_Requisition_Dtl
					SET [Status] = 30
				WHERE RequisitionNo = @curReq
				IF @@ERROR != 0 set @err = @@ERROR
			END			
		END
	END
	ELSE IF @inHouseOnly=1
	BEGIN
		--This section only approves the orders and sends them through the system without EDI	
			-- Insert order into audit log
		INSERT INTO VX_Submit_Audit_Log(RequisitionNo,PONumber,SubmitDate,ResponseDate,ProcessedFlag)
			SELECT	 @curReq
					,@curPO
					,GETDATE()
					,GETDATE()
					,1
		IF @@ERROR != 0 SET @err = @@ERROR
		----------------------------------------------------------------------------------------
		-- Update VX_Reorder_Control status to Submitted for user's locked reqs
		UPDATE VX_Reorder_Control
			SET [Status] = 50
			WHERE RequisitionNo = @curReq
		IF @@ERROR != 0 SET @err = @@ERROR
		
		-- Update requisition hdr & dtl statues from VX_Reorder_Control
		UPDATE VX_requisition_hdr
			SET  [Status] = 50
				,OrdRefID = @OrdRefId
				,ApprovedBy = @user
				,ApprovedDate = @curDT
		WHERE RequisitionNo = @curReq				
		IF @@ERROR != 0 SET @err = @@ERROR

		UPDATE VX_requisition_dtl
			SET  [Status] = 50
				,ConfirmedQty=RequestedQty
				,ApprovedBy = @user
				,ApprovedDate = @curDT
		WHERE RequisitionNo = @curReq
		IF @@ERROR != 0 SET @err = @@ERROR
		
		-- Insert requisition into audit log for move to DIPS
		INSERT INTO VX_Requisition_Audit_Log (RequisitionNo, PONumber, ReqApprovedDate, ProcessedDate, ProcessedFlag, Comments, InHouse)
			SELECT	 @curReq
					,@curPO
					,GETDATE()
					,NULL
					,0
					,NULL
					,@inHouseOnly						
		IF @@ERROR != 0 SET @err = @@ERROR
			
		-- Check - insert - update any kit items on order
		IF EXISTS( SELECT rd.ItemCode FROM VX_Requisition_Dtl rd INNER JOIN VX_Vendor_Kits vk ON rd.ItemCode=vk.ParentItem WHERE rd.PONumber=@curPO)
		BEGIN
			-- Insert kit items
			INSERT INTO VX_Requisition_Dtl ( RequisitionNo,LineNum,ItemCode,VendorItem,RequestedQty,SuggestedQty,ConfirmedQty,CanceledQty,BackOrderQty,RequestedBy
											,RequestedDate,Cost,ExtCost,[Status],PONumber,AllowBackOrder,ShipFrom )
				SELECT	 rd.RequisitionNo
						,ROW_NUMBER() OVER (PARTITION BY rd.lineNum ORDER BY rd.lineNum)+CAST(MAX(rd.LineNum) AS INT)
						,vk.KitItem
						,pm.ISBN
						,vk.KitQty
						,0
						,vk.KitQty * rd.RequestedQty
						,0
						,0
						,rd.RequestedBy
						,GETDATE()
						,pm.Cost
						,pm.Cost * (vk.KitQty * rd.RequestedQty)
						,rd.[Status]
						,rd.PONumber
						,0
						,NULL
				FROM [$(HPB_Prime)].[dbo].[ProductMaster] pm 
					INNER JOIN VX_Vendor_Kits vk 
						ON pm.ItemCode=vk.KitItem
					INNER JOIN VX_Requisition_Dtl rd 
						ON vk.ParentItem=rd.ItemCode
				WHERE rd.PONumber=@curPO 
					AND rd.ItemCode NOT IN (SELECT DISTINCT KitItem FROM VX_Vendor_Kits WHERE parentitem=rd.itemcode)
				GROUP BY rd.RequisitionNo,rd.LineNum,vk.KitItem,pm.ISBN,vk.KitQty,rd.RequestedBy,vk.KitQty * rd.RequestedQty,pm.Cost,pm.Cost *(vk.KitQty * rd.RequestedQty)
						,rd.[Status],rd.PONumber
		
			-- Update parent item
			UPDATE rd
				SET	 rd.CanceledQty=rd.RequestedQty
					,rd.ConfirmedQty=0
					,rd.Comments='KitUpdate'
			FROM VX_Requisition_Dtl rd 
				INNER JOIN VX_Vendor_Kits vk 
					ON rd.ItemCode=vk.ParentItem
			WHERE rd.PONumber=@curPO 
		END
	END
	SET @loop = @loop - 1
	END
	
	DROP TABLE #reqTmp
	-- Commit or Rollback trans
	SET @rVal = @err
	IF @rVal=0
	BEGIN
		COMMIT TRANSACTION VX_ReqSubmit
		RETURN @rVal
	END
	ELSE
	BEGIN
		ROLLBACK  TRANSACTION VX_ReqSubmit
		RETURN @rVal
	END
END
GO
PRINT N'Altering [dbo].[WEB_InvoiceHdrUpdStatus]...';


GO
-- =============================================
-- Author:		<Joey B.>
-- Create date: <01/27/2016>
-- Description:	<Update BT invoice header status...>
-- =============================================
ALTER PROCEDURE [dbo].[WEB_InvoiceHdrUpdStatus] 
	@InvoiceNo varchar(20), @OrderNo varchar(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	Update [HPB_EDI].dbo.[WEB_Invoice_Audit_Log]
	set Processed=1,ProcessedDateTime=GETDATE()
	where InvoiceNo = @InvoiceNo and OrderNo = @OrderNo

    
END
GO
PRINT N'Creating [meta].[uspLastRunModify]...';


GO
CREATE PROCEDURE meta.uspLastRunModify
AS
BEGIN
	DECLARE @lastrun AS TABLE (Tablename VARCHAR(255), DateRun DATE, DateTimeRun DATETIME)

	BEGIN TRANSACTION lastrun_update
	BEGIN TRY

		IF EXISTS(SELECT 1 FROM staging.CurrentTitleStockInventory)
			INSERT INTO @lastrun ([Tablename], [DateTimeRun])
				SELECT 'CurrentTitleStockInventory', MAX([Last_Modified_Date]) 
				FROM staging.CurrentTitleStockInventory

		IF EXISTS (SELECT 1 FROM staging.IngramContentTitlesActive )
			INSERT INTO @lastrun ([Tablename], [DateTimeRun])
				SELECT 'IngramContentTitlesActive',  MAX([Title_Last_Updated])
				FROM staging.IngramContentTitlesActive 
	   
		UPDATE lr
			SET daterun = CAST(DateTimeRun as DATE)
		FROM @lastrun lr

		--IF(SELECT COUNT(1) FROM meta.LastRun lr INNER JOIN @lastrun t ON lr.[TableName]= t.[Tablename] AND lr.[DateRun] = t.[DateRun]) > 0	
		--	BEGIN
		--		UPDATE lr
		--			SET	 [DateRun] = t.[DateRun]
		--				,[DateTimeRun] = t.[DateTimeRun]
		--		FROM meta.LastRun lr
		--			INNER JOIN @lastrun t
		--				ON lr.[TableName] = t.[Tablename]
		--					AND lr.[DateRun] = t.[DateRun]
		--	END

		INSERT INTO meta.LastRun ([TableName], [DateRun], [DateTimeRun])
			SELECT t.[Tablename], t.[DateRun], t.[DateTimeRun]
			FROM @lastrun t
				LEFT JOIN  meta.LastRun lr
					ON lr.[TableName] = t.[Tablename]
						AND lr.[DateRun] = t.[DateRun]
			WHERE lr.[TableName] IS NULL

		IF @@TRANCOUNT > 0 COMMIT TRANSACTION lastrun_update
		SELECT 'Modify Last Update successful'
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION lastrun_update
		SELECT 'Modify Last Update failed:' + cast(ERROR_NUMBER() AS VARCHAR(20))  + ' ' + CAST(ERROR_MESSAGE() AS VARCHAR(1024))
	END CATCH

END
GO
PRINT N'Creating [meta].[uspTitleAndInventoryTruncate]...';


GO
CREATE PROCEDURE meta.uspTitleAndInventoryTruncate
AS
BEGIN
	DECLARE @Status AS TABLE (Id INT IDENTITY(1,1) NOT NULL, Result VARCHAR(250))

	IF (SELECT COUNT(1) FROM staging.CurrentTitleStockInventory) > 0	
		BEGIN
			TRUNCATE TABLE staging.CurrentTitleStockInventory
			INSERT INTO @Status (Result) VALUES ('STAGING INVENTORY TABLE: TRUNCATED')
		END
	ELSE
		INSERT INTO @Status (Result) VALUES ('STAGING INVENTORY TABLE: EMPTY')
		
	IF (SELECT COUNT(1) FROM staging.IngramContentTitlesActive) > 0		
		BEGIN
			TRUNCATE TABLE staging.IngramContentTitlesActive
			INSERT INTO @Status (Result) VALUES ('STAGING TITLE TABLE: TRUNCATED')
		END
	ELSE
		INSERT INTO @Status (Result) VALUES ('STAGING TITLE TABLE: EMPTY')
	SELECT * FROM @Status
END
GO
PRINT N'Creating [meta].[uspLastRunGet]...';


GO
CREATE PROCEDURE meta.[uspLastRunGet]
(
	@table VARCHAR(255)
)
AS
BEGIN
	IF @table = '*'
		BEGIN
			SELECT lr.TableName, lr.DateRun, lr.DateTimeRun
			FROM meta.LastRun lr
				INNER JOIN (	SELECT TableName, max(DateRun) as maxRunDate
								FROM meta.LastRun
								GROUP BY TableName ) names
					ON lr.TableName = names.TableName
						AND lr.DateRun = names.maxRunDate

		END
	ELSE
		BEGIN
			SELECT lr.TableName, lr.DateRun, lr.DateTimeRun
			FROM meta.LastRun lr
				INNER JOIN (	SELECT TableName, max(DateRun) as maxRunDate
								FROM meta.LastRun
								where TableName = @table
								GROUP BY TableName ) names
					ON lr.TableName = names.TableName
						AND lr.DateRun = names.maxRunDate
		END
END
GO
PRINT N'Creating [meta].[uspUpdateInventory]...';


GO
CREATE PROCEDURE [meta].[uspUpdateInventory]
AS
BEGIN

	BEGIN TRANSACTION updateinv
	BEGIN TRY
		TRUNCATE TABLE staging.ISBNList
		TRUNCATE TABLE meta.IngramContentDCQuantities

		INSERT INTO staging.ISBNList(ISBNUPC)
			SELECT LTRIM(RTRIM(isbn)) AS ISBNUPC
			FROM STOC_TeaserData
			WHERE ISNULL(ISBN,'') != '' 
				AND ISNUMERIC(isbn) > 0
				AND CAST(LastReorderDate as date) > CAST(DATEADD(YEAR, -2, GETDATE()) AS DATE)
			GROUP BY ISBN
			UNION
			SELECT LTRIM(RTRIM(d.vendoritem)) AS ISBNUPC
			FROM VX_Requisition_Hdr h
				INNER JOIN VX_Requisition_Dtl d
					ON h.RequisitionNo = d.RequisitionNo
			WHERE h.[Status] BETWEEN 30 AND 40
			GROUP BY LTRIM(RTRIM(d.VendorItem))
	
		INSERT INTO meta.IngramContentDCQuantities (ISBNUPC, LVTN_OnHand, LVTN_Flag, ATPA_OnHand, ATPA_Flag, CBPA_OnHand, CBPA_Flag, FWIN_OnHand, FWIN_Flag, RBOR_OnHand, RBOR_Flag, FOCA_OnHand, FOCA_Flag)
			SELECT LTRIM(RTRIM(ctsi.ean)) AS ISBNUPC, ctsi.LVTN_On_Hand_Quantity, ctsi.LVTN_Stock_Flag
					,ctsi.ATPA_On_Hand_Quantity, ctsi.ATPA_Stock_Flag
					,ctsi.CBPA_On_Hand_Quantity, ctsi.CBPA_Stock_Flag
					,ctsi.FWIN_On_Hand_Quantity, ctsi.FWIN_Stock_Flag
					,ctsi.RBOR_On_Hand_Quantity, ctsi.RBOR_Stock_Flag
					,ctsi.FOCA_On_Hand_Quantity, ctsi.FOCA_Stock_Flag
			FROM meta.CurrentTitleStockInventory ctsi
				INNER JOIN staging.isbnlist ai
					ON LTRIM(RTRIM(ctsi.EAN)) =ai.ISBNUPC
		--union reserve inventory (not accessible yet)

		IF @@TRANCOUNT > 0 COMMIT TRANSACTION updateinv
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION updateinv

	END CATCH

END
GO
PRINT N'Creating [meta].[uspTitleAndInventoryUpdate]...';


GO
CREATE PROCEDURE [meta].[uspTitleAndInventoryUpdate]
AS
BEGIN
	DECLARE @return INT = -1
	DECLARE @completed VARCHAR(2500) = ''

	BEGIN TRANSACTION upsert_records

	BEGIN TRY
		IF((SELECT COUNT(1) FROM staging.IngramContentTitlesActive) > 0)
			BEGIN
				UPDATE  trgt
						SET	 [ISBN_10]									= srce.[ISBN_10]
							,[Ingram_Product_Type_Code]					= srce.[Ingram_Product_Type_Code]
							,[Ingram_Product_Type]						= srce.[Ingram_Product_Type]
							,[Accessory_Code]							= srce.[Accessory_Code]
							,[Product_Classification_Type]				= srce.[Product_Classification_Type]
							,[Product_Form_Code]						= srce.[Product_Form_Code]
							,[Product_Form]								= srce.[Product_Form]
							,[Product_Form_Detail]						= srce.[Product_Form_Detail]
							,[Title]									= srce.[Title]
							,[Edition_Description]						= srce.[Edition_Description]
							,[Contributor_1_Role]						= srce.[Contributor_1_Role]
							,[Contributor_1]							= srce.[Contributor_1]
							,[Contributor_2_Role]						= srce.[Contributor_2_Role]
							,[Contributor_2]							= srce.[Contributor_2]
							,[Contributor_3_Role]						= srce.[Contributor_3_Role]
							,[Contributor_3]							= srce.[Contributor_3]
							,[Publisher]								= srce.[Publisher]
							,[BISAC_Binding_Type]						= srce.[BISAC_Binding_Type]
							,[BISAC_Childrens_Book_Type]				= srce.[BISAC_Childrens_Book_Type]
							,[Ingram_Subject_Code]						= srce.[Ingram_Subject_Code]
							,[BISAC_Subject_Code_1]						= srce.[BISAC_Subject_Code_1]
							,[BISAC_Subject_Heading_Description_1]		= srce.[BISAC_Subject_Heading_Description_1]
							,[BISAC_Subject_Code_2]						= srce.[BISAC_Subject_Code_2]
							,[BISAC_Subject_Heading_Description_2]		= srce.[BISAC_Subject_Heading_Description_2]
							,[BISAC_Subject_Code_3]						= srce.[BISAC_Subject_Code_3]
							,[BISAC_Subject_Heading_Description_3]		= srce.[BISAC_Subject_Heading_Description_3]
							,[Audience_Age_Minimum]						= srce.[Audience_Age_Minimum]
							,[Audience_Age_Maximum]						= srce.[Audience_Age_Maximum]
							,[Audience_Grade_Minimum]					= srce.[Audience_Grade_Minimum]
							,[Audience_Grade_Minimum_Desc]				= srce.[Audience_Grade_Minimum_Desc]
							,[Audience_Grade_Maximum]					= srce.[Audience_Grade_Maximum]
							,[Audience_Grade_Maximum_Desc]				= srce.[Audience_Grade_Maximum_Desc]
							,[Lexile_Reading_Level]						= srce.[Lexile_Reading_Level]
							,[LCCN]										= srce.[LCCN]
							,[Dewey_Decimal_Classification]				= srce.[Dewey_Decimal_Classification]
							,[Library_of_Congress_Subject_Heading_1]	= srce.[Library_of_Congress_Subject_Heading_1]
							,[Library_of_Congress_Subject_Heading_2]	= srce.[Library_of_Congress_Subject_Heading_2]
							,[Number_Pages]								= srce.[Number_Pages]
							,[Playing_Time]								= srce.[Playing_Time]
							,[Number_Of_Items]							= srce.[Weight_In_Pounds]
							,[Weight_In_Pounds]							= srce.[Weight_In_Pounds]
							,[Length_In_Inches]							= srce.[Length_In_Inches]
							,[Width_In_Inches]							= srce.[Width_In_Inches]
							,[Height_In_Inches]							= srce.[Height_In_Inches]
							,[Dump_Display_Flag]						= srce.[Dump_Display_Flag]
							,[Illustration_Flag]						= srce.[Illustration_Flag]
							,[Spring_Arbor_Division_Flag]				= srce.[Spring_Arbor_Division_Flag]
							,[Language]									= srce.[Language]
							,[Spring_Arbor_Product_Type]				= srce.[Spring_Arbor_Product_Type]
							,[Spring_Arbor_Subject_Code_Major]			= srce.[Spring_Arbor_Subject_Code_Major]
							,[Spring_Arbor_Subject_Code_Minor]			= srce.[Spring_Arbor_Subject_Code_Minor]
							,[Publisher_Price]							= srce.[Publisher_Price] 
							,[Publication_Date]							= srce.[Publication_Date]
							,[Title_Last_Updated]						= srce.[Title_Last_Updated]
				FROM staging.IngramContentTitlesActive srce
					INNER JOIN meta.IngramContentTitlesActive trgt
						ON srce.EAN = trgt.EAN
							AND srce.Title_Last_Updated <> trgt.Title_Last_Updated

				SET @completed = @completed + ';UPD_TTL=YES'
	
				INSERT INTO meta.IngramContentTitlesActive ([ISBN_10], [Ingram_Product_Type_Code], [Ingram_Product_Type], [Accessory_Code], [Product_Classification_Type], [Product_Form_Code], [Product_Form], [Product_Form_Detail], [Title], [Edition_Description], [Contributor_1_Role], [Contributor_1], [Contributor_2_Role], [Contributor_2], [Contributor_3_Role], [Contributor_3], [Publisher], [BISAC_Binding_Type], [BISAC_Childrens_Book_Type], [Ingram_Subject_Code], [BISAC_Subject_Code_1], [BISAC_Subject_Heading_Description_1], [BISAC_Subject_Code_2], [BISAC_Subject_Heading_Description_2], [BISAC_Subject_Code_3], [BISAC_Subject_Heading_Description_3], [Audience_Age_Minimum], [Audience_Age_Maximum], [Audience_Grade_Minimum], [Audience_Grade_Minimum_Desc], [Audience_Grade_Maximum], [Audience_Grade_Maximum_Desc], [Lexile_Reading_Level], [LCCN], [Dewey_Decimal_Classification], [Library_of_Congress_Subject_Heading_1], [Library_of_Congress_Subject_Heading_2], [Number_Pages], [Playing_Time], [Number_Of_Items], [Weight_In_Pounds], [Length_In_Inches], [Width_In_Inches], [Height_In_Inches], [Dump_Display_Flag], [Illustration_Flag], [Spring_Arbor_Division_Flag], [Language], [Spring_Arbor_Product_Type], [Spring_Arbor_Subject_Code_Major], [Spring_Arbor_Subject_Code_Minor], [Publisher_Price], [Publication_Date], [Title_Last_Updated]) 
						SELECT	 srce.[ISBN_10]
								,srce.[Ingram_Product_Type_Code]
								,srce.[Ingram_Product_Type]
								,srce.[Accessory_Code]
								,srce.[Product_Classification_Type]
								,srce.[Product_Form_Code]
								,srce.[Product_Form]
								,srce.[Product_Form_Detail]
								,srce.[Title]
								,srce.[Edition_Description]
								,srce.[Contributor_1_Role]
								,srce.[Contributor_1]
								,srce.[Contributor_2_Role]
								,srce.[Contributor_2]
								,srce.[Contributor_3_Role]
								,srce.[Contributor_3]
								,srce.[Publisher]
								,srce.[BISAC_Binding_Type]
								,srce.[BISAC_Childrens_Book_Type]
								,srce.[Ingram_Subject_Code]
								,srce.[BISAC_Subject_Code_1]
								,srce.[BISAC_Subject_Heading_Description_1]
								,srce.[BISAC_Subject_Code_2]
								,srce.[BISAC_Subject_Heading_Description_2]
								,srce.[BISAC_Subject_Code_3]
								,srce.[BISAC_Subject_Heading_Description_3]
								,srce.[Audience_Age_Minimum]
								,srce.[Audience_Age_Maximum]
								,srce.[Audience_Grade_Minimum]
								,srce.[Audience_Grade_Minimum_Desc]
								,srce.[Audience_Grade_Maximum]
								,srce.[Audience_Grade_Maximum_Desc]
								,srce.[Lexile_Reading_Level]
								,srce.[LCCN]
								,srce.[Dewey_Decimal_Classification]
								,srce.[Library_of_Congress_Subject_Heading_1]
								,srce.[Library_of_Congress_Subject_Heading_2]
								,srce.[Number_Pages]
								,srce.[Playing_Time]
								,srce.[Number_Of_Items]
								,srce.[Weight_In_Pounds]
								,srce.[Length_In_Inches]
								,srce.[Width_In_Inches]
								,srce.[Height_In_Inches]
								,srce.[Dump_Display_Flag]
								,srce.[Illustration_Flag]
								,srce.[Spring_Arbor_Division_Flag]
								,srce.[Language]
								,srce.[Spring_Arbor_Product_Type]
								,srce.[Spring_Arbor_Subject_Code_Major]
								,srce.[Spring_Arbor_Subject_Code_Minor]
								,srce.[Publisher_Price]
								,srce.[Publication_Date]
								,srce.[Title_Last_Updated]
						FROM staging.IngramContentTitlesActive srce
							LEFT JOIN meta.IngramContentTitlesActive trgt
								ON srce.ean = trgt.EAN
						WHERE trgt.EAN IS NULL

					SET @completed = @completed + ';INS_TTL=YES'
			END
		ELSE
			BEGIN
				SET @completed = @completed+ ';UPD_TTL=NRC;INST_TTL=NRC'
			END
			
		IF ((SELECT COUNT(1) FROM staging.CurrentTitleStockInventory ) > 0)
			BEGIN
				UPDATE  trgt
					SET	 [GTIN14]									= srce.[GTIN14]
						,[ISBN13]									= srce.[ISBN13]
						,[UPC]										= srce.[UPC]
						,[ISBN10]									= srce.[ISBN10]
						,[LVTN_On_Hand_Quantity]					= srce.[LVTN_On_Hand_Quantity]
						,[RBOR_On_Hand_Quantity]					= srce.[RBOR_On_Hand_Quantity]
						,[FWIN_On_Hand_Quantity]					= srce.[FWIN_On_Hand_Quantity]
						,[CBPA_On_Hand_Quantity]					= srce.[CBPA_On_Hand_Quantity]
						,[ATPA_On_Hand_Quantity]					= srce.[ATPA_On_Hand_Quantity]
						,[FOCA_On_Hand_Quantity]					= srce.[FOCA_On_Hand_Quantity]
						,[FFOH_On_Hand_Quantity]					= srce.[FFOH_On_Hand_Quantity]
						,[WADC_On_Hand_Quantity]					= srce.[WADC_On_Hand_Quantity]
						,[LVTN_On_Order_Quantity]					= srce.[LVTN_On_Order_Quantity]
						,[RBOR_On_Order_Quantity]					= srce.[RBOR_On_Order_Quantity]
						,[FWIN_On_Order_Quantity]					= srce.[FWIN_On_Order_Quantity]
						,[CBPA_On_Order_Quantity]					= srce.[CBPA_On_Order_Quantity]
						,[ATPA_On_Order_Quantity]					= srce.[ATPA_On_Order_Quantity]
						,[FOCA_On_Order_Quantity]					= srce.[FOCA_On_Order_Quantity]
						,[FFOH_On_Order_Quantity]					= srce.[FFOH_On_Order_Quantity]
						,[WADC_On_Order_Quantity]					= srce.[WADC_On_Order_Quantity]
						,[Total_Quantity_On_Hand]					= srce.[Total_Quantity_On_Hand]
						,[Price]									= srce.[Price]
						,[Discount_Level_Original_Value]			= srce.[Discount_Level_Original_Value]
						,[CDF_Discount_Pct]							= srce.[CDF_Discount_Pct]
						,[Bulk_Discount_Pct]						= srce.[Bulk_Discount_Pct]
						,[Publisher_Status_Code]					= srce.[Publisher_Status_Code]
						,[Publisher_Status_Description]				= srce.[Publisher_Status_Description]
						,[LVTN_Stock_Flag]							= srce.[LVTN_Stock_Flag]
						,[RBOR_Stock_Flag]							= srce.[RBOR_Stock_Flag]
						,[FWIN_Stock_Flag]							= srce.[FWIN_Stock_Flag]
						,[CBPA_Stock_Flag]							= srce.[CBPA_Stock_Flag]
						,[ATPA_Stock_Flag]							= srce.[ATPA_Stock_Flag]
						,[FOCA_Stock_Flag]							= srce.[FOCA_Stock_Flag]
						,[FFOH_Stock_Flag]							= srce.[FFOH_Stock_Flag]
						,[WADC_Stock_Flag]							= srce.[WADC_Stock_Flag]
						,[Publication_Date]							= srce.[Publication_Date]
						,[On_Sale_Date]								= srce.[On_Sale_Date]
						,[Returnable_Indicator]						= srce.[Returnable_Indicator]
						,[Return_Date]								= srce.[Return_Date]
						,[Backorder_Only_Indicator]					= srce.[Backorder_Only_Indicator]
						,[Media_Mail_Indicator]						= srce.[Media_Mail_Indicator]
						,[Ingram_Product_Type]						= srce.[Ingram_Product_Type]
						,[Ingram_Product_Type_Description]			= srce.[Ingram_Product_Type_Description]
						,[Imprintable_Indicator]					= srce.[Imprintable_Indicator]
						,[Indexable_Indicator]						= srce.[Indexable_Indicator]
						,[Weight]									= srce.[Weight]
						,[Ingram_Publisher_Number]					= srce.[Ingram_Publisher_Number]
						,[Ingram_Publisher_Number_Description]		= srce.[Ingram_Publisher_Number_Description]
						,[Restricted_Code]							= srce.[Restricted_Code]
						,[Restricted_Code_Description]				= srce.[Restricted_Code_Description]
						,[Discount_Category_Code]					= srce.[Discount_Category_Code]
						,[Product_Availability_Code]				= srce.[Product_Availability_Code]
						,[Product_Availability_Code_Description]	= srce.[Product_Availability_Code_Description]
						,[Ingram_Title_Code]						= srce.[Ingram_Title_Code]
						,[Product_Classification_Type]				= srce.[Product_Classification_Type]
						,[Last_Modified_Date]						= srce.[Last_Modified_Date]		
				FROM staging.CurrentTitleStockInventory srce
					INNER JOIN meta.CurrentTitleStockInventory trgt
						ON srce.EAN = trgt.EAN
							AND srce.Last_Modified_Date <> trgt.Last_Modified_Date

				SET @completed = @completed + ';UPD_INV=YES'

			INSERT INTO meta.CurrentTitleStockInventory ([GTIN14], [EAN], [ISBN13], [UPC], [ISBN10], [LVTN_On_Hand_Quantity], [RBOR_On_Hand_Quantity], [FWIN_On_Hand_Quantity], [CBPA_On_Hand_Quantity], [ATPA_On_Hand_Quantity], [FOCA_On_Hand_Quantity], [FFOH_On_Hand_Quantity], [WADC_On_Hand_Quantity], [LVTN_On_Order_Quantity], [RBOR_On_Order_Quantity], [FWIN_On_Order_Quantity], [CBPA_On_Order_Quantity], [ATPA_On_Order_Quantity], [FOCA_On_Order_Quantity], [FFOH_On_Order_Quantity], [WADC_On_Order_Quantity], [Total_Quantity_On_Hand], [Price], [Discount_Level_Original_Value], [CDF_Discount_Pct], [Bulk_Discount_Pct], [Publisher_Status_Code], [Publisher_Status_Description], [LVTN_Stock_Flag], [RBOR_Stock_Flag], [FWIN_Stock_Flag], [CBPA_Stock_Flag], [ATPA_Stock_Flag], [FOCA_Stock_Flag], [FFOH_Stock_Flag], [WADC_Stock_Flag], [Publication_Date], [On_Sale_Date], [Returnable_Indicator], [Return_Date], [Backorder_Only_Indicator], [Media_Mail_Indicator], [Ingram_Product_Type], [Ingram_Product_Type_Description], [Imprintable_Indicator], [Indexable_Indicator], [Weight], [Ingram_Publisher_Number], [Ingram_Publisher_Number_Description], [Restricted_Code], [Restricted_Code_Description], [Discount_Category_Code], [Product_Availability_Code], [Product_Availability_Code_Description], [Ingram_Title_Code], [Product_Classification_Type], [Last_Modified_Date])
				SELECT	 srce.[GTIN14]
						,srce.[EAN]
						,srce.[ISBN13]
						,srce.[UPC]
						,srce.[ISBN10]
						,srce.[LVTN_On_Hand_Quantity]
						,srce.[RBOR_On_Hand_Quantity]
						,srce.[FWIN_On_Hand_Quantity]
						,srce.[CBPA_On_Hand_Quantity]
						,srce.[ATPA_On_Hand_Quantity]
						,srce.[FOCA_On_Hand_Quantity]
						,srce.[FFOH_On_Hand_Quantity]
						,srce.[WADC_On_Hand_Quantity]
						,srce.[LVTN_On_Order_Quantity]
						,srce.[RBOR_On_Order_Quantity]
						,srce.[FWIN_On_Order_Quantity]
						,srce.[CBPA_On_Order_Quantity]
						,srce.[ATPA_On_Order_Quantity]
						,srce.[FOCA_On_Order_Quantity]
						,srce.[FFOH_On_Order_Quantity]
						,srce.[WADC_On_Order_Quantity]
						,srce.[Total_Quantity_On_Hand]
						,srce.[Price]
						,srce.[Discount_Level_Original_Value]
						,srce.[CDF_Discount_Pct]
						,srce.[Bulk_Discount_Pct]
						,srce.[Publisher_Status_Code]
						,srce.[Publisher_Status_Description]
						,srce.[LVTN_Stock_Flag]
						,srce.[RBOR_Stock_Flag]
						,srce.[FWIN_Stock_Flag]
						,srce.[CBPA_Stock_Flag]
						,srce.[ATPA_Stock_Flag]
						,srce.[FOCA_Stock_Flag]
						,srce.[FFOH_Stock_Flag]
						,srce.[WADC_Stock_Flag]
						,srce.[Publication_Date]
						,srce.[On_Sale_Date]
						,srce.[Returnable_Indicator]
						,srce.[Return_Date]
						,srce.[Backorder_Only_Indicator]
						,srce.[Media_Mail_Indicator]
						,srce.[Ingram_Product_Type]
						,srce.[Ingram_Product_Type_Description]
						,srce.[Imprintable_Indicator]
						,srce.[Indexable_Indicator]
						,srce.[Weight]
						,srce.[Ingram_Publisher_Number]
						,srce.[Ingram_Publisher_Number_Description]
						,srce.[Restricted_Code]
						,srce.[Restricted_Code_Description]
						,srce.[Discount_Category_Code]
						,srce.[Product_Availability_Code]
						,srce.[Product_Availability_Code_Description]
						,srce.[Ingram_Title_Code]
						,srce.[Product_Classification_Type]
						,srce.[Last_Modified_Date]
				FROM staging.CurrentTitleStockInventory srce
					LEFT JOIN meta.CurrentTitleStockInventory trgt
								ON srce.EAN = trgt.EAN
				WHERE trgt.EAN IS NULL

				SET @completed = @completed + ';INS_INV=YES'
			END
		ELSE
			BEGIN
				SET @completed = @completed + ';UPD_INV=NRC;INS_INV=NRC'
			END

		IF @@TRANCOUNT > 0  COMMIT TRANSACTION upsert_records
			SET @return = 1 
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION upsert_records
		SELECT @return = 0, @completed = @completed + ';CATCH_INVOKED=' + CAST(ERROR_NUMBER() AS VARCHAR(20)) + ' ' + ERROR_MESSAGE()
	END CATCH

	SELECT @return AS ReturnValue, @completed AS ItemsCompleted
END
GO
PRINT N'Creating [staging].[uspTempInventoryCounts]...';


GO
create procedure staging.uspTempInventoryCounts
(
	@isbns as dbo.TypeListString25 readonly
)
as

begin
	select	 tacs.EAN
			,tacs.ISBN13
			,tacs.Title
			,tacs.Contributor_1
			,tacs.Contributor_1_Role
			,tacs.Contributor_2
			,tacs.Contributor_2_Role
			,tacs.Contributor_3
			,tacs.Contributor_3_Role
			,tacs.Publication_Date
			,tacs.Publisher
			,tacs.Publisher_Price
			,tacs.Price
			,tacs.DCQtyAvailable_N
			,tacs.DCQtyAvailable_E
			,tacs.DCQtyAvailable_D
			,tacs.DCQtyAvailable_C
			,tacs.DCQtyAvailable_B
			,tacs.DCQtyAvailable_J
	from meta.vwTitlesActive_CurrentStock tacs
		inner join @ISBNS i
			on tacs.ean = ltrim(rtrim(i.Strings))
end
GO
PRINT N'Creating [dbo].[GetVXData2019]...';


GO
-- =============================================
-- Author:		<Joey B>
-- Create date: <10/24/2012>
-- Description:	<Returns reorder data to VX application>
-- =============================================
CREATE PROCEDURE [dbo].[GetVXData2019]
(
	 @Vendors AS dbo.TypeListString25 READONLY
	,@SectionCodes AS dbo.TypeListString250 READONLY
	,@SectionX BIT
	,@Stores AS dbo.TypeListString25 READONLY
	,@StoreX BIT
	,@Tags AS dbo.TypeListString25 READONLY
	,@TagX BIT
)
AS
BEGIN
	DECLARE 
		 @TWENTYZEROS VARCHAR(20) = REPLICATE('0',20)
		,@SECCOUNT INT

	IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[TEASER_WORK_TBL]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		DROP TABLE #TEASER_WORK_TBL

	CREATE TABLE #TEASER_WORK_TBL
	(
		 [RowID] INT IDENTITY(1,1)
		,[LocationNo] CHAR(5) 
		,[District] VARCHAR(30) 
		,[Title] VARCHAR(250) 
		,[ItemCode] VARCHAR(20) 
		,[PreviousItemCodes] VARCHAR(100)
		,[ReorderItemCode] VARCHAR(10) 
		,[VendorID] VARCHAR(20) 
		,[SectionCode] VARCHAR(20) 
		,[ItemCodeCount] INT 
		,[Cost] MONEY 
		,[Price] MONEY 
		,[InitialStoreDate] DATETIME 
		,[InitialQty] INT 
		,[QtyOnHand] INT 
		,[TotalRcvd] INT 
		,[LastReorderDate] DATETIME 
		,[Pending] INT
		,[RO_CNT] INT 
		,[LastQty] INT
		,[ShipQty] INT
		,[ISBN] VARCHAR(20) 
		,[XRefQty] INT 
		,[LocationID] CHAR(10) NOT NULL
		,[SuggestedOrderQty] INT 
		,[Markdowns] INT 
		,[LastSaleDate] DATETIME 
		,[TransferredOut] INT 
		,[SoldInPeriod] INT 
		,[TotalSold] INT
		,[NextOrderDate] DATETIME
		,[CaseQty] INT
		,[RateOfSale] NUMERIC(9,4) 
		,[PercentSold] NUMERIC(9,2) NULL
		,[SalesRank] VARCHAR(30) NULL
		,[XRefs] VARCHAR(10) NULL
		,[PendXRef] INT
		,[SoldXRef] INT
		,[ISBNSold] INT
	)
	CREATE  CLUSTERED  INDEX [IDX_TEASER_RU] ON #TEASER_WORK_TBL ([LocationID], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU1] ON #TEASER_WORK_TBL ([LocationNo], [ItemCode], [ReorderItemCode])
	CREATE  NONCLUSTERED  INDEX [IDX_TEASER_RU2] ON #TEASER_WORK_TBL ([VendorID], [District], [LocationNo])

	SELECT @SECCOUNT = COUNT(1) FROM @SectionCodes

	IF @SECCOUNT > 0
	BEGIN
		IF @StoreX = 0
			BEGIN
				INSERT INTO #TEASER_WORK_TBL (LocationNo, District, Title, ItemCode, PreviousItemCodes, ReorderItemCode, VendorID
											 ,SectionCode, ItemCodeCount, cost, Price, InitialStoreDate, InitialQty, QtyOnHand, TotalRcvd, LastReorderDate, Pending
											 ,RO_CNT, LastQty, ShipQty, ISBN, XRefQty, LocationID, SuggestedOrderQty, Markdowns, LastSaleDate, TransferredOut, SoldInPeriod
											 ,TotalSold,NextOrderDate,CaseQty,RateOfSale, PercentSold, SalesRank, xrefs, PendXRef, SoldXRef, ISBNSold)									
						SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@TWENTYZEROS + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID
								,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending
								,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod
								,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
								,(CAST(r.XrefQty AS VARCHAR(5))+ ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) 
						FROM dbo.STOC_TeaserData r 
							INNER JOIN @Vendors v
								ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
							INNER JOIN @Stores s
								ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
						WHERE CASE 
									WHEN @StoreX = 0 AND r.locationNo     IN (SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									WHEN @StoreX = 1 AND r.LocationNo NOT IN (SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									ELSE 0
								END = 1
			END
		ELSE IF @StoreX = 1
			BEGIN
				INSERT INTO #TEASER_WORK_TBL (LocationNo, District, Title, ItemCode, PreviousItemCodes, ReorderItemCode, VendorID
											 ,SectionCode, ItemCodeCount, cost, Price, InitialStoreDate, InitialQty, QtyOnHand, TotalRcvd, LastReorderDate, Pending
											 ,RO_CNT, LastQty, ShipQty, ISBN, XRefQty, LocationID, SuggestedOrderQty, Markdowns, LastSaleDate, TransferredOut, SoldInPeriod
											 ,TotalSold,NextOrderDate,CaseQty,RateOfSale, PercentSold, SalesRank, xrefs, PendXRef, SoldXRef, ISBNSold)									
						SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@TWENTYZEROS + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID
								,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending
								,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod
								,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
								,(CAST(r.XrefQty AS VARCHAR(5))+ ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) 
						FROM dbo.STOC_TeaserData r 
							INNER JOIN @Vendors v
								ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
							LEFT JOIN @Stores s
								ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
						WHERE s.Strings IS NULL
							AND CASE 
									WHEN @StoreX = 0 AND r.locationNo     IN (SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									WHEN @StoreX = 1 AND r.LocationNo NOT IN (SELECT Strings FROM @Stores GROUP BY Strings ) THEN 1
									ELSE 0
								END = 1
			END
	END
	ELSE IF @SECCOUNT = 0
		IF @StoreX = 0
			BEGIN
				INSERT INTO #TEASER_WORK_TBL (LocationNo, District, Title, ItemCode, PreviousItemCodes, ReorderItemCode, VendorID
											,SectionCode, ItemCodeCount, cost, Price, InitialStoreDate, InitialQty, QtyOnHand, TotalRcvd, LastReorderDate, Pending
											,RO_CNT, LastQty, ShipQty, ISBN, XRefQty, LocationID, SuggestedOrderQty, Markdowns, LastSaleDate, TransferredOut, SoldInPeriod
											,TotalSold,NextOrderDate,CaseQty,RateOfSale, PercentSold, SalesRank, xrefs, PendXRef, SoldXRef, ISBNSold)
					SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@TWENTYZEROS + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID
							,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending
							,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod
							,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
							,(CAST(r.XrefQty AS VARCHAR(5))+ ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) 
					FROM dbo.STOC_TeaserData r 
						INNER JOIN @Vendors v
							ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
						INNER JOIN @Stores  s
							ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
			END
		ELSE IF @StoreX = 1
			BEGIN
				INSERT INTO #TEASER_WORK_TBL (LocationNo, District, Title, ItemCode, PreviousItemCodes, ReorderItemCode, VendorID
											,SectionCode, ItemCodeCount, cost, Price, InitialStoreDate, InitialQty, QtyOnHand, TotalRcvd, LastReorderDate, Pending
											,RO_CNT, LastQty, ShipQty, ISBN, XRefQty, LocationID, SuggestedOrderQty, Markdowns, LastSaleDate, TransferredOut, SoldInPeriod
											,TotalSold,NextOrderDate,CaseQty,RateOfSale, PercentSold, SalesRank, xrefs, PendXRef, SoldXRef, ISBNSold)
					SELECT	 r.LocationNo,r.District,r.Title,RIGHT(@TWENTYZEROS + r.ItemCode, 20) AS [ItemCode],r.PreviousItemCodes,r.ReorderItemCode,r.VendorID
							,r.SectionCode,r.ItemCodeCount,r.Cost,r.Price,r.InitialStoreDate,r.InitialQty,r.QtyOnHand,r.TotalRcvd,r.LastReorderDate,r.Pending
							,r.RO_CNT,r.LastQty,r.ShipQty,r.ISBN,r.XRefQty,r.LocationID,r.SuggestedOrderQty,r.markdowns,r.LastSaleDate,r.TransferredOut,r.SoldInPeriod
							,r.TotalSold,r.NextOrderDate,r.CaseQty,r.RateOfSale,r.PercentSold,r.SalesRank
							,(CAST(r.XrefQty AS VARCHAR(5))+ ' / ' + CAST(r.SIPSQOH AS VARCHAR(5))),ISNULL(r.PendXref,0),ISNULL(r.SoldXref,0),ISNULL(r.ISBNSold,0) 
					FROM dbo.STOC_TeaserData r 
						INNER JOIN @Vendors v
							ON CAST(LTRIM(RTRIM(v.Strings)) AS VARCHAR(20)) = r.VendorID
						LEFT JOIN @Stores s
							ON CAST(LTRIM(RTRIM(s.Strings)) AS CHAR(5)) = r.LocationNo
					WHERE s.Strings IS NULL
			END

	/*****************************************************************************************************************************************************************
	***GET DATA FROM ROLL-UP TABLE BASED ON PARAMETERS....
	*****************************************************************************************************************************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT	 twt.RowID
			,twt.LocationNo
			,twt.District
			,twt.ReorderItemCode
			,twt.Title
			,twt.Cost
			,twt.Price
			,CASE LEN(CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + CAST(SUM(ISNULL(twt.SoldInPeriod, 0)) AS VARCHAR(6)) + ' / ' + CAST(SUM(ISNULL(twt.SoldXref, 0)) AS VARCHAR(6)) AS [Sold-SLO]
			,twt.ISBNSold
			,SUM(ISNULL(twt.QtyOnHand, 0)) AS [QtyOnHand]
			,CASE LEN(LEFT(twt.XRefs, CHARINDEX('/', twt.XRefs) - 1))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' '
				ELSE ''
			 END + twt.XRefs AS [XRefs]
			,CASE LEN(CAST(SUM(twt.Pending) AS VARCHAR(10)))
				WHEN 1 THEN '  '
				WHEN 2 THEN ' ' 
				ELSE ''
			 END + CAST(SUM(twt.Pending) AS VARCHAR(10)) + ' / ' + CAST(SUM(twt.PendXRef) AS VARCHAR(10)) AS [EnRoute]
			,CASE 
				WHEN EXISTS (	SELECT VendorID
								FROM [$(HPB_Prime)].[dbo].[VendorMaster]
								WHERE VendorID = twt.VendorID
									AND UserChar30 = 'TTBReorder' )
					THEN CASE 
							WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0))
								AND SUM(ISNULL(twt.Pending, 0)) = 0
								AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
								THEN CASE 
								WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
									THEN 0
									ELSE CASE WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) < SUM(ISNULL(waq.QtyOnHand, 0))
												THEN SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))
												ELSE SUM(ISNULL(waq.QtyOnHand, 0))
										END
								    END
								WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
									THEN 0
									ELSE CASE  WHEN SUM(ISNULL(twt.SoldInPeriod, 0)) > SUM(ISNULL(waq.QtyOnHand, 0))
												THEN SUM(ISNULL(waq.QtyOnHand, 0))
												ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
											END
							END
				ELSE CASE 
						WHEN SUM(ISNULL(twt.LastQty, 0)) = SUM(ISNULL(twt.ShipQty, 0))
							AND SUM(ISNULL(twt.Pending, 0)) = 0
							AND SUM(ISNULL(twt.TotalRcvd, 0)) <> 0
							THEN CASE 
									WHEN (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0))) <= 0
										THEN 0
									ELSE (SUM(ISNULL(twt.InitialQty, 0)) - SUM(ISNULL(twt.QtyOnHand, 0)))
									END
						WHEN SUM(ISNULL(twt.ShipQty, 0)) = 0 OR SUM(ISNULL(twt.Pending, 0)) <> 0
							THEN 0
							ELSE SUM(ISNULL(twt.SoldInPeriod, 0))
						END
			 END AS [SuggestedQty]
			,SUM(ISNULL(srd.requestedQty, 0)) AS [OnOrderQty]
			,ISNULL(SUM(ISNULL(waq.QtyOnHand, 0)) - ISNULL(( SELECT ISNULL(OnOrdQty, 0) FROM dbo.FN_VX_GetOnOrdQty_ByWhse(twt.VendorID, twt.ReorderItemCode, twt.LocationNo)), 0), 0) AS [AvailableQty]
			,SUM(ISNULL(srd.ConfirmedQty, 0)) AS [ConfirmedQty]
			,SUM(ISNULL(srd.CanceledQty, 0)) AS [CanceledQty]
			,SUM(ISNULL(srd.BackOrderQty, 0)) AS [BackOrderQty]
			--ISNULL(srd.AllowBackOrder,0) as [BackOrder?]
			,CASE 
					WHEN SUM(ISNULL(srd.requestedQty, 0)) > 0
						THEN ISNULL(srd.AllowBackOrder, 0)
						ELSE ISNULL(ev.DftBackOrd, 0)
			 END AS [BackOrder?]
			,twt.VendorID
			,twt.SectionCode
			,ISNULL('', '') AS [ItemTags]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber, 'NA') END AS [CurrentPONo]
			,ISNULL(src.RequisitionDueDate, '1900/01/01') AS [RequisitionDueDate]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo, 'NA') END AS [CurrentReqNo]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname, 'NA') END AS [ReqStatus]
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname, 'NA') END AS [LineStatus]
			,ISNULL(src.Locked, 'N') AS [ReqLock]
			,ISNULL(src.LockedBy, '') AS [ReqLockBy]
			,ISNULL(twt.ISBN, '') AS [VendorItem]
			--Case when (select count(distinct isbnupc) from vwVX_BT_AvailQty where ISBNUPC = twt.ISBN)= 0 then 'X' else '' end [ValidItem]
			,CASE WHEN twt.VendorID != 'IDB&TDISTR'
					THEN ''
					ELSE CASE WHEN (	SELECT COUNT(DISTINCT isbnupc)
										FROM vwVX_BT_ValidItem 
										WHERE ISBNUPC = twt.ISBN
									) = 0
								THEN 'X'
								ELSE ''
						END
			END AS [ValidItem]
	FROM #TEASER_WORK_TBL twt 
		LEFT JOIN VX_Reorder_Control src 
			ON twt.VendorID = src.VendorID
				AND twt.LocationNo = src.StoreNo
		LEFT JOIN VX_Requisition_Dtl srd 
			ON src.requisitionno = srd.requisitionno
				AND srd.itemcode = RIGHT(@TWENTYZEROS + twt.ReorderItemCode, 20)
		LEFT JOIN VX_Status ss 
			ON src.STATUS = ss.statuscode
		LEFT JOIN VX_Status ss2 			
			ON ISNULL(srd.STATUS, CASE  WHEN ISNULL(src.STATUS, 100) > 20 THEN src.STATUS   ELSE 10 END) = ss2.statuscode
		LEFT JOIN vwVX_BT_AvailQty waq 
			ON waq.ISBNUPC = twt.ISBN
				AND waq.Warehouse = src.Warehouse
		LEFT JOIN VX_Locations l 
			ON twt.LocationNo = l.LocationNo
		LEFT JOIN [HPB_EDI].[dbo].[Vendor_SAN_Codes] ev 
			ON twt.VendorID = ev.VendorID
		GROUP BY twt.RowID ,twt.LocationNo ,twt.District ,twt.Title ,twt.Cost ,twt.Price ,twt.ReorderItemCode ,twt.VendorID ,twt.SectionCode ,twt.Cost ,twt.Price ,twt.ISBNSold ,twt.ISBN
				,twt.NextOrderDate,twt.CaseQty ,twt.RateOfSale ,twt.PercentSold ,twt.SalesRank ,twt.XRefs ,ISNULL(src.RequisitionDueDate, '1900/01/01') 
				,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.PONumber, 'NA') END ,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(src.RequisitionNo, 'NA') END
			,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss.statusname, 'NA') END ,CASE WHEN l.Active = 'N' THEN 'NA' ELSE ISNULL(ss2.statusname, 'NA') END
			,ISNULL(src.Locked, 'N') ,ISNULL(src.LockedBy, '') ,ISNULL(srd.AllowBackOrder, 0) ,ISNULL(ev.DftBackOrd, 0)
		ORDER BY twt.title
			,twt.District
			,twt.LocationNo


	SELECT	 twt.RowID
			,'' AS [LocationNo]
			,'' AS [District]
			,'' AS [ReorderItemCode]
			,'' AS [PreviousItemCodes]
			,'' AS [PercentSold-PY]
			,'' AS [Markdowns-SLO]
			,'' AS [Transfers-SLO]
			,'' AS [ISBN/UPC]
			,'' AS [LastSaleDate]
			,'' AS [Weekly-ROS]
			,'' AS [InitialStoreDate]
			,'' AS [InitialQty]
			,'' AS [LastReorderDate]
			,'' AS [LastQty]
			,'' AS [CaseQty]
			,'' AS [ShipQty-SLO]
			,'' AS [RequisitionDueDate]
			,'' AS [SalesRank]
	FROM #TEASER_WORK_TBL twt with (nolock) 
		LEFT JOIN VX_Reorder_Control src with (nolock) on twt.VendorID = src.VendorID and twt.LocationNo = src.StoreNo
		LEFT JOIN VX_Requisition_Dtl srd with (nolock) on src.requisitionno = srd.requisitionno and srd.itemcode = RIGHT(@TWENTYZEROS+twt.ReorderItemCode,20)
		LEFT JOIN VX_Status ss with (nolock) on src.status = ss.statuscode
		LEFT JOIN vwVX_BT_AvailQty waq with (nolock) on waq.ISBNUPC = twt.ISBN and waq.Warehouse = src.Warehouse
	GROUP BY twt.RowID,twt.LocationNo,twt.District,twt.Title,twt.Cost,twt.Price,twt.ReorderItemCode,twt.VendorID,twt.SectionCode,twt.Cost,twt.Price,twt.ISBNSold,twt.ISBN,twt.NextOrderDate,twt.CaseQty,twt.RateOfSale,twt.PercentSold,twt.SalesRank,twt.XRefs
		,ISNULL(src.RequisitionDueDate,'1900/01/01'),ISNULL(src.RequisitionNo,'NA'),ISNULL(ss.statusname,'NA'),ISNULL(src.Locked,'N'),ISNULL(src.LockedBy,'')
	ORDER BY twt.title,twt.District,twt.LocationNo


/*	************************************************************************************************************************************************************
	* CLEAN UP.....
	************************************************************************************************************************************************************ */
DROP TABLE #TEASER_WORK_TBL
END
GO
PRINT N'Creating [dbo].[vwVX_Vendor_Settings].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4[30] 2[40] 3) )"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2[41] 3) )"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 5
   End
   Begin DiagramPane = 
      PaneHidden = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "Vendor_SAN_Codes (HPB_EDI.dbo)"
            Begin Extent = 
               Top = 7
               Left = 48
               Bottom = 150
               Right = 232
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
      End
   End
   Begin CriteriaPane = 
      PaneHidden = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwVX_Vendor_Settings';


GO
PRINT N'Creating [dbo].[vwVX_Vendor_Settings].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vwVX_Vendor_Settings';


GO
PRINT N'Update complete.';


GO
